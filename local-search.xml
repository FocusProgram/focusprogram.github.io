<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Kubernetes部署</title>
    <link href="/2020/07/11/Kubernetes%E9%83%A8%E7%BD%B2/"/>
    <url>/2020/07/11/Kubernetes%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<p><strong>Kubernetes部署</strong></p><hr><h1 id="1-Kubernetes是什么？"><a href="#1-Kubernetes是什么？" class="headerlink" title="1. Kubernetes是什么？"></a>1. Kubernetes是什么？</h1><blockquote><p><a href="https://kubernetes.io/zh/docs/home/">Kubernetes</a> 是一个可移植的、可扩展的开源平台，用于管理容器化的工作负载和服务，可促进声明式配置和自动化。Kubernetes 拥有一个庞大且快速增长的生态系统。Kubernetes 的服务、支持和工具广泛可用</p></blockquote><h1 id="2-Kubernetes-组件"><a href="#2-Kubernetes-组件" class="headerlink" title="2. Kubernetes 组件"></a>2. Kubernetes 组件</h1><h2 id="2-1-Master-组件"><a href="#2-1-Master-组件" class="headerlink" title="2.1 Master 组件"></a>2.1 Master 组件</h2><blockquote><p>Master 组件提供集群的控制平面。Master 组件对集群进行全局决策（例如，调度），并检测和响应集群事件（例如，当不满足部署的 replicas 字段时，启动新的 pod）。</p><p>Master 组件可以在集群中的任何节点上运行。然而，为了简单起见，安装脚本通常会启动同一个计算机上所有 Master 组件，并且不会在计算机上运行用户容器。请参阅<a href="https://kubernetes.io/docs/admin/high-availability/">构建高可用性集群</a>示例对于多主机 VM 的安装   </p></blockquote><h3 id="2-1-1-kube-apiserver"><a href="#2-1-1-kube-apiserver" class="headerlink" title="2.1.1 kube-apiserver"></a>2.1.1 kube-apiserver</h3><blockquote><p>主节点上负责提供 Kubernetes API 服务的组件；它是 Kubernetes 控制面的前端。</p><p>kube-apiserver 在设计上考虑了水平扩缩的需要。 换言之，通过部署多个实例可以实现扩缩。 参见<a href="https://kubernetes.io/docs/admin/high-availability/">构造高可用集群</a>。</p></blockquote><h3 id="2-2-2-etcd"><a href="#2-2-2-etcd" class="headerlink" title="2.2.2 etcd"></a>2.2.2 etcd</h3><blockquote><p>etcd 是兼具一致性和高可用性的键值数据库，可以作为保存 Kubernetes 所有集群数据的后台数据库。</p><p>您的 Kubernetes 集群的 etcd 数据库通常需要有个备份计划。要了解 etcd 更深层次的信息，请参考<a href="https://etcd.io/docs">etcd 文档</a>。</p></blockquote><h3 id="2-2-3-kube-scheduler"><a href="#2-2-3-kube-scheduler" class="headerlink" title="2.2.3 kube-scheduler"></a>2.2.3 kube-scheduler</h3><blockquote><p>主节点上的组件，该组件监视那些新创建的未指定运行节点的 Pod，并选择节点让 Pod 在上面运行。</p><p>调度决策考虑的因素包括单个 Pod 和 Pod 集合的资源需求、硬件&#x2F;软件&#x2F;策略约束、亲和性和反亲和性规范、数据位置、工作负载间的干扰和最后时限。</p></blockquote><h3 id="2-2-4-kube-controller-manager"><a href="#2-2-4-kube-controller-manager" class="headerlink" title="2.2.4 kube-controller-manager"></a>2.2.4 kube-controller-manager</h3><blockquote><p>在主节点上运行控制器的组件。</p><p>从逻辑上讲，每个控制器都是一个单独的进程，但是为了降低复杂性，它们都被编译到同一个可执行文件，并在一个进程中运行。</p></blockquote><p>这些控制器包括:</p><ul><li>节点控制器（Node Controller）: 负责在节点出现故障时进行通知和响应。</li><li>副本控制器（Replication Controller）: - 负责为系统中的每个副本控制器对象维护正确数量的 Pod。</li><li>端点控制器（Endpoints Controller）: 填充端点(Endpoints)对象(即加入 Service 与 Pod)。</li><li>服务帐户和令牌控制器（Service Account &amp; Token Controllers）: 为新的命名空间创建默认帐户和 API 访问令牌.</li></ul><h3 id="2-2-5-云控制器管理器-cloud-controller-manager"><a href="#2-2-5-云控制器管理器-cloud-controller-manager" class="headerlink" title="2.2.5 云控制器管理器-(cloud-controller-manager)"></a>2.2.5 云控制器管理器-(cloud-controller-manager)</h3><blockquote><p>cloud-controller-manager 运行与基础云提供商交互的控制器。cloud-controller-manager 二进制文件是 Kubernetes 1.6 版本中引入的 alpha 功能。</p><p>cloud-controller-manager 仅运行云提供商特定的控制器循环。您必须在 kube-controller-manager 中禁用这些控制器循环，您可以通过在启动 kube-controller-manager 时将 –cloud-provider 参数设置为 external 来禁用控制器循环。</p><p>cloud-controller-manager 允许云供应商的代码和 Kubernetes 代码彼此独立地发展。在以前的版本中，核心的 Kubernetes 代码依赖于特定云提供商的代码来实现功能。在将来的版本中，云供应商专有的代码应由云供应商自己维护，并与运行 Kubernetes 的云控制器管理器相关联。</p></blockquote><p>以下控制器具有云提供商依赖性:</p><ul><li>节点控制器（Node Controller）: 用于检查云提供商以确定节点是否在云中停止响应后被删除</li><li>路由控制器（Route Controller）: 用于在底层云基础架构中设置路由</li><li>服务控制器（Service Controller）: 用于创建、更新和删除云提供商负载均衡器</li><li>数据卷控制器（Volume Controller）: 用于创建、附加和装载卷、并与云提供商进行交互以编排卷</li></ul><h2 id="2-2-Node组件"><a href="#2-2-Node组件" class="headerlink" title="2.2 Node组件"></a>2.2 Node组件</h2><blockquote><p>节点组件在每个节点上运行，维护运行的 Pod 并提供 Kubernetes 运行环境。</p></blockquote><h3 id="2-2-1-kubelet"><a href="#2-2-1-kubelet" class="headerlink" title="2.2.1 kubelet"></a>2.2.1 kubelet</h3><blockquote><p>一个在集群中每个节点上运行的代理。它保证容器都运行在 Pod 中。</p><p>kubelet 接收一组通过各类机制提供给它的 PodSpecs，确保这些 PodSpecs 中描述的容器处于运行状态且健康。kubelet 不会管理不是由 Kubernetes 创建的容器。</p></blockquote><h3 id="2-2-2-kube-proxy"><a href="#2-2-2-kube-proxy" class="headerlink" title="2.2.2 kube-proxy"></a>2.2.2 kube-proxy</h3><blockquote><p>kube-proxy 是集群中每个节点上运行的网络代理,实现 Kubernetes Service 概念的一部分。</p><p>kube-proxy 维护节点上的网络规则。这些网络规则允许从集群内部或外部的网络会话与 Pod 进行网络通信。</p><p>如果有 kube-proxy 可用，它将使用操作系统数据包过滤层。否则，kube-proxy 会转发流量本身</p></blockquote><h3 id="2-2-3-容器运行环境-Container-Runtime"><a href="#2-2-3-容器运行环境-Container-Runtime" class="headerlink" title="2.2.3 容器运行环境(Container Runtime)"></a>2.2.3 容器运行环境(Container Runtime)</h3><blockquote><p>容器运行环境是负责运行容器的软件。</p><p>Kubernetes 支持多个容器运行环境: <a href="http://www.docker.com/">Docker</a>、 <a href="https://containerd.io/">containerd</a>、<a href="https://cri-o.io/">cri-o</a>、  <a href="https://github.com/kubernetes-incubator/rktlet">rktlet</a>以及任何实现 <a href="https://github.com/kubernetes/community/blob/master/contributors/devel/sig-node/container-runtime-interface.md">Kubernetes CRI (容器运行环境接口)</a>。</p></blockquote><h2 id="2-3-插件-Addons"><a href="#2-3-插件-Addons" class="headerlink" title="2.3 插件(Addons)"></a>2.3 插件(Addons)</h2><blockquote><p>插件使用 Kubernetes 资源 (DaemonSet, Deployment等) 实现集群功能。因为这些提供集群级别的功能，所以插件的命名空间资源属于 kube-system 命名空间。</p><p>所选的插件如下所述：有关可用插件的扩展列表，请参见<a href="https://kubernetes.io/docs/concepts/cluster-administration/addons/">插件 (Addons)</a>。</p></blockquote><h3 id="2-3-1-DNS"><a href="#2-3-1-DNS" class="headerlink" title="2.3.1 DNS"></a>2.3.1 DNS</h3><blockquote><p>尽管并非严格要求其他附加组件，但所有示例都依赖<a href="https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/">集群 DNS</a>，因此所有 Kubernetes 集群都应具有 DNS。</p><p>除了您环境中的其他 DNS 服务器之外，集群 DNS 还是一个 DNS 服务器，它为 Kubernetes 服务提供 DNS 记录。</p><p>Cluster DNS 是一个 DNS 服务器，和您部署环境中的其他 DNS 服务器一起工作，为 Kubernetes 服务提供DNS记录。</p><p>Kubernetes 启动的容器自动将 DNS 服务器包含在 DNS 搜索中。</p></blockquote><h3 id="2-3-2-用户界面-Dashboard"><a href="#2-3-2-用户界面-Dashboard" class="headerlink" title="2.3.2 用户界面(Dashboard)"></a>2.3.2 用户界面(Dashboard)</h3><blockquote><p><a href="https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/">Dashboard</a> 是 Kubernetes 集群的通用基于 Web 的 UI。它使用户可以管理集群中运行的应用程序以及集群本身并进行故障排除。</p></blockquote><h3 id="2-3-3-容器资源监控"><a href="#2-3-3-容器资源监控" class="headerlink" title="2.3.3 容器资源监控"></a>2.3.3 容器资源监控</h3><blockquote><p><a href="https://kubernetes.io/docs/tasks/debug-application-cluster/resource-usage-monitoring/">容器资源监控</a>将关于容器的一些常见的时间序列度量值保存到一个集中的数据库中，并提供用于浏览这些数据的界面。</p></blockquote><h3 id="2-3-4-集群层面日志"><a href="#2-3-4-集群层面日志" class="headerlink" title="2.3.4 集群层面日志"></a>2.3.4 集群层面日志</h3><blockquote><p><a href="https://kubernetes.io/docs/concepts/cluster-administration/logging/">集群层面日志</a> 机制负责将容器的日志数据保存到一个集中的日志存储中，该存储能够提供搜索和浏览接口。</p></blockquote><h1 id="3-Kubernetes安装"><a href="#3-Kubernetes安装" class="headerlink" title="3. Kubernetes安装"></a>3. Kubernetes安装</h1><h2 id="3-1-前提概要"><a href="#3-1-前提概要" class="headerlink" title="3.1 前提概要"></a>3.1 前提概要</h2><blockquote><p>K8s进群搭建的方式有kubeadm（1.13版本后可以使用生产环境）、二进制（不用编译，直接可用，但需要修改配置参数）、minikube（单机版一般是开发测试使用）、yum（使用相对较少）。目前相对使用较多为kubeadm和二进制方式，kubeadm为一键方式，故障不宜解决，二进制方式需自己修改参数，会比较了解信息。</p></blockquote><p>官方提供Kubernetes部署3种方式:</p><ul><li><p><a href="https://kubernetes.io/docs/setup/minikube/">minikube</a><br>是一个工具，可以在本地快速运行一个单点的Kubernetes，尝试Kubernetes或日常开发的用户使用。不能用于生产环境。</p></li><li><p><a href="https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm/">kubeadm</a><br>可帮助你快速部署一套kubernetes集群。kubeadm设计目的为新用户开始尝试kubernetes提供一种简单的方法。目前是Beta版。<br>官方文档：<br><a href="https://kubernetes.io/docs/setup/independent/install-kubeadm/">https://kubernetes.io/docs/setup/independent/install-kubeadm/</a></p></li><li><p><a href="https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG-1.11.md#v1113">二进制包</a><br>从官方下载发行版的二进制包，手动部署每个组件，组成Kubernetes集群。目前企业生产环境中主要使用该方式。</p></li></ul><h2 id="3-2-服务器信息"><a href="#3-2-服务器信息" class="headerlink" title="3.2 服务器信息"></a>3.2 服务器信息</h2><table><thead><tr><th>主机IP</th><th>主机名</th><th>配置</th><th>操作系统</th></tr></thead><tbody><tr><td>192.168.80.128</td><td>k8s-master</td><td>2核4G</td><td>CentOS7.x-86_x64</td></tr><tr><td>192.168.80.129</td><td>k8s-node-one</td><td>2核4G</td><td>CentOS7.x-86_x64</td></tr><tr><td>192.168.80.130</td><td>k8s-node-two</td><td>2核4G</td><td>CentOS7.x-86_x64</td></tr></tbody></table><h2 id="3-3-准备工作"><a href="#3-3-准备工作" class="headerlink" title="3.3 准备工作"></a>3.3 准备工作</h2><h3 id="3-3-1-同步时间"><a href="#3-3-1-同步时间" class="headerlink" title="3.3.1 同步时间"></a>3.3.1 同步时间</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>yum install ntpdate -y<br><br><span class="hljs-variable">$ </span>ntpdate ntp.api.bz<br></code></pre></td></tr></table></figure><h3 id="3-3-2-修改主机名"><a href="#3-3-2-修改主机名" class="headerlink" title="3.3.2 修改主机名"></a>3.3.2 修改主机名</h3><blockquote><p>hostnamectl set-hostname your-new-host-name</p><p>查看修改结果：<br>hostnamectl status</p></blockquote><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig">$ <span class="hljs-string">hostnamectl</span> <span class="hljs-built_in">set-hostname</span> <span class="hljs-string">k8s-master</span><br><br>$ <span class="hljs-string">hostnamectl</span> <span class="hljs-built_in">set-hostname</span> <span class="hljs-string">k8s-node-one</span><br><br>$ <span class="hljs-string">hostnamectl</span> <span class="hljs-built_in">set-hostname</span> <span class="hljs-string">k8s-node-two</span><br></code></pre></td></tr></table></figure><h3 id="3-3-3-设置-hostname-解析"><a href="#3-3-3-设置-hostname-解析" class="headerlink" title="3.3.3 设置 hostname 解析"></a>3.3.3 设置 hostname 解析</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;127.0.0.1 <span class="hljs-subst">$(hostname)</span>&quot;</span> &gt;&gt; /etc/hosts</span><br></code></pre></td></tr></table></figure><p>三台主机分别设置 vim &#x2F;etc&#x2F;sysconfig&#x2F;network</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-attr">HOSTNAME=</span>k8s-<span class="hljs-keyword">master</span>    <span class="hljs-title">192</span>.<span class="hljs-number">168.80</span>.<span class="hljs-number">128</span><br><br><span class="hljs-attr">HOSTNAME=</span>k8s-<span class="hljs-keyword">node</span><span class="hljs-title">-one</span>  <span class="hljs-number">192.168</span>.<span class="hljs-number">80.129</span><br><br><span class="hljs-attr">HOSTNAME=</span>k8s-<span class="hljs-keyword">node</span><span class="hljs-title">-two</span>  <span class="hljs-number">192.168</span>.<span class="hljs-number">80.130</span><br></code></pre></td></tr></table></figure><h3 id="3-3-4-修改主机DNS"><a href="#3-3-4-修改主机DNS" class="headerlink" title="3.3.4 修改主机DNS"></a>3.3.4 修改主机DNS</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ vim <span class="hljs-regexp">/etc/</span>resolv.conf<br><br>nameserver <span class="hljs-number">114.114</span>.<span class="hljs-number">114.114</span><br><br>nameserver <span class="hljs-number">8.8</span>.<span class="hljs-number">8.8</span><br></code></pre></td></tr></table></figure><h3 id="3-3-5-关闭防火墙"><a href="#3-3-5-关闭防火墙" class="headerlink" title="3.3.5 关闭防火墙"></a>3.3.5 关闭防火墙</h3><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">$ systemctl <span class="hljs-keyword">stop</span> firewalld &amp;&amp; systemctl <span class="hljs-keyword">disable</span> firewalld<br></code></pre></td></tr></table></figure><h4 id="3-3-6-关闭selinux"><a href="#3-3-6-关闭selinux" class="headerlink" title="3.3.6 关闭selinux"></a>3.3.6 关闭selinux</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sed -i <span class="hljs-string">&#x27;s/enforcing/disabled/&#x27;</span> /etc/selinux/config</span> <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">setenforce 0</span><br></code></pre></td></tr></table></figure><h3 id="3-3-7-关闭swap"><a href="#3-3-7-关闭swap" class="headerlink" title="3.3.7 关闭swap"></a>3.3.7 关闭swap</h3><h4 id="3-3-7-1-临时关闭"><a href="#3-3-7-1-临时关闭" class="headerlink" title="3.3.7.1 临时关闭"></a>3.3.7.1 临时关闭</h4><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-symbol">$</span> swapoff -a <span class="hljs-symbol">$</span><br></code></pre></td></tr></table></figure><h4 id="3-3-7-2-永久关闭"><a href="#3-3-7-2-永久关闭" class="headerlink" title="3.3.7.2 永久关闭"></a>3.3.7.2 永久关闭</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">vim /etc/fstab $</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">swapoff -a &amp;&amp; sysctl -w vm.swappiness=0 <span class="hljs-comment">#关闭swap</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sed -ri <span class="hljs-string">&#x27;/^[^#]*swap/s@^@#@&#x27;</span> /etc/fstab <span class="hljs-comment">#取消开机挂载swap</span></span><br></code></pre></td></tr></table></figure><h3 id="3-3-8-设置hosts"><a href="#3-3-8-设置hosts" class="headerlink" title="3.3.8 设置hosts"></a>3.3.8 设置hosts</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">$ vim /etc/hosts<br><br><span class="hljs-number">192.168.80.128</span> k8s-master<br><span class="hljs-number">192.168.80.129</span> k8s-node-one<br><span class="hljs-number">192.168.80.130</span> k8s-node-two<br></code></pre></td></tr></table></figure><h3 id="3-3-9-设置路由（Centos7）"><a href="#3-3-9-设置路由（Centos7）" class="headerlink" title="3.3.9 设置路由（Centos7）"></a>3.3.9 设置路由（Centos7）</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">$ yum <span class="hljs-keyword">install</span> -y bridge-utils.x86_64<br></code></pre></td></tr></table></figure><p>加载br_netfilter模块，使用lsmod查看开启的模块:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">modprobe br_netfilter</span><br></code></pre></td></tr></table></figure><p>将桥接的IPv4流量传递到iptables的链：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cat</span> &gt; /etc/sysctl.d/k8s.conf &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="hljs-string">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><h3 id="3-4-0-重新加载所有配置文件重启"><a href="#3-4-0-重新加载所有配置文件重启" class="headerlink" title="3.4.0 重新加载所有配置文件重启"></a>3.4.0 重新加载所有配置文件重启</h3><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-symbol">$</span> sysctl --<span class="hljs-keyword">system</span> &amp;&amp; reboot<br></code></pre></td></tr></table></figure><h2 id="3-4-开始安装"><a href="#3-4-开始安装" class="headerlink" title="3.4 开始安装"></a>3.4 开始安装</h2><blockquote><p>安装流程如下：</p></blockquote><ul><li>在所有节点上安装Docker和kubeadm</li><li>部署Kubernetes Master</li><li>部署容器网络插件</li><li>部署 Kubernetes Node，将节点加入Kubernetes集群中</li><li>部署Dashboard Web页面，可视化查看Kubernetes资源</li></ul><h3 id="3-4-1-所有节点安装Docker"><a href="#3-4-1-所有节点安装Docker" class="headerlink" title="3.4.1 所有节点安装Docker"></a>3.4.1 所有节点安装Docker</h3><blockquote><p>Kubernetes默认CRI（容器运行时）为Docker</p></blockquote><p><img src="https://image.focusprogram.top/k8s-docker.png"></p><h4 id="3-4-1-1-卸载Docker"><a href="#3-4-1-1-卸载Docker" class="headerlink" title="3.4.1.1 卸载Docker"></a>3.4.1.1 卸载Docker</h4><blockquote><p>若之前安装过Docker，防止冲突，请卸载，若未安装，忽略此步</p></blockquote><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livescript">sudo yum remove docker <span class="hljs-string">\</span><br>                  docker-client <span class="hljs-string">\</span><br>                  docker-client-latest <span class="hljs-string">\</span><br>                  docker-common <span class="hljs-string">\</span><br>                  docker-latest <span class="hljs-string">\</span><br>                  docker-latest-logrotate <span class="hljs-string">\</span><br>                  docker-logrotate <span class="hljs-string">\</span><br>                  docker-engine<br></code></pre></td></tr></table></figure><h4 id="3-4-1-2-安装依赖"><a href="#3-4-1-2-安装依赖" class="headerlink" title="3.4.1.2 安装依赖"></a>3.4.1.2 安装依赖</h4><blockquote><p>这个过程可能会升级内核，如果升级了建议重启下切换到新内核</p></blockquote><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">sudo yum <span class="hljs-keyword">update</span> -y <span class="hljs-variable">&amp;&amp;</span> yum install -y yum-utils device-mapper-persistent-data lvm2 <span class="hljs-variable">&amp;&amp;</span> reboot<br></code></pre></td></tr></table></figure><h4 id="3-4-1-3-添加镜像库-二者选其一"><a href="#3-4-1-3-添加镜像库-二者选其一" class="headerlink" title="3.4.1.3 添加镜像库(二者选其一)"></a>3.4.1.3 添加镜像库(二者选其一)</h4><h5 id="3-4-1-3-1-官方yum库"><a href="#3-4-1-3-1-官方yum库" class="headerlink" title="3.4.1.3.1 官方yum库"></a>3.4.1.3.1 官方yum库</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ yum-config-manager --add-repo https:<span class="hljs-regexp">//</span>download.docker.com<span class="hljs-regexp">/linux/</span>centos/docker-ce.repo<br></code></pre></td></tr></table></figure><h5 id="3-4-1-3-2-阿里云镜像库"><a href="#3-4-1-3-2-阿里云镜像库" class="headerlink" title="3.4.1.3.2 阿里云镜像库"></a>3.4.1.3.2 阿里云镜像库</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ yum install wget &amp;&amp; wget https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/</span>docker-ce.repo -O <span class="hljs-regexp">/etc/yum</span>.repos.d/docker-ce.repo<br></code></pre></td></tr></table></figure><h4 id="3-4-1-4-安装Docker"><a href="#3-4-1-4-安装Docker" class="headerlink" title="3.4.1.4 安装Docker"></a>3.4.1.4 安装Docker</h4><h5 id="3-4-1-4-1-安装最新版本"><a href="#3-4-1-4-1-安装最新版本" class="headerlink" title="3.4.1.4.1 安装最新版本"></a>3.4.1.4.1 安装最新版本</h5><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>yum list docker-ce <span class="hljs-comment">#查看最新版本</span><br><br><span class="hljs-variable">$ </span>yum -y install docker-ce docker-ce-cli containerd.io <span class="hljs-comment">#安装最新版本</span><br></code></pre></td></tr></table></figure><h5 id="3-4-1-4-2-安装指定版本"><a href="#3-4-1-4-2-安装指定版本" class="headerlink" title="3.4.1.4.2 安装指定版本"></a>3.4.1.4.2 安装指定版本</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> list docker<span class="hljs-literal">-ce</span> <span class="hljs-literal">--showduplicates</span> | <span class="hljs-built_in">sort</span> <span class="hljs-literal">-r</span> <span class="hljs-comment">#查看历史版本</span><br><br><span class="hljs-variable">$</span> yum <span class="hljs-literal">-y</span> install docker<span class="hljs-literal">-ce-</span>指定版本号      <span class="hljs-comment">#指定版本号安装</span><br></code></pre></td></tr></table></figure><h4 id="3-4-1-5-脚本一键安装"><a href="#3-4-1-5-脚本一键安装" class="headerlink" title="3.4.1.5 脚本一键安装"></a>3.4.1.5 脚本一键安装</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">$ curl -fsSL &quot;https://get.docker.com/&quot; | sh &amp;&amp; systemctl <span class="hljs-keyword">enable</span> <span class="hljs-comment">--now docker</span><br></code></pre></td></tr></table></figure><blockquote><p>修改docker cgroup驱动，与k8s一致，使用systemd方式</p><p>修改docker cgroup驱动：native.cgroupdriver&#x3D;systemd</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> <span class="hljs-built_in">cat</span> &gt; /etc/docker/daemon.json &lt;&lt;EOF<br>&#123;<br>  <span class="hljs-string">&quot;exec-opts&quot;</span>: [<span class="hljs-string">&quot;native.cgroupdriver=systemd&quot;</span>],<br>  <span class="hljs-string">&quot;log-driver&quot;</span>: <span class="hljs-string">&quot;json-file&quot;</span>,<br>  <span class="hljs-string">&quot;log-opts&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;max-size&quot;</span>: <span class="hljs-string">&quot;100m&quot;</span><br>  &#125;,<br>  <span class="hljs-string">&quot;storage-driver&quot;</span>: <span class="hljs-string">&quot;overlay2&quot;</span>,<br>  <span class="hljs-string">&quot;storage-opts&quot;</span>: [<br>    <span class="hljs-string">&quot;overlay2.override_kernel_check=true&quot;</span><br>  ]<br>&#125;<br>EOF<br><br><span class="hljs-variable">$</span> systemctl restart docker  <span class="hljs-comment"># 重启使配置生效</span><br></code></pre></td></tr></table></figure><blockquote><p>备注：systemd是系统自带的cgroup管理器, 系统初始化就存在的, 和cgroups联系紧密,为每一个进程分配cgroups,  用它管理就行了. 如果设置成cgroupfs就存在2个cgroup控制管理器, 实验证明在资源有压力的情况下,会存在不稳定的情况.cgroupfs是docker自带的。</p></blockquote><h4 id="3-4-1-6-配置docker镜像加速地址"><a href="#3-4-1-6-配置docker镜像加速地址" class="headerlink" title="3.4.1.6 配置docker镜像加速地址"></a>3.4.1.6 配置docker镜像加速地址</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/</span>docker/daemon.json<br>&#123;<br>  <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<span class="hljs-string">&quot;https://l5arlel6.mirror.aliyuncs.com&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-4-1-7-启动Docker并设置开机启动"><a href="#3-4-1-7-启动Docker并设置开机启动" class="headerlink" title="3.4.1.7 启动Docker并设置开机启动"></a>3.4.1.7 启动Docker并设置开机启动</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> systemctl enable docker &amp;&amp; systemctl <span class="hljs-built_in">start</span> docker<br><br><span class="hljs-variable">$</span> docker <span class="hljs-literal">--version</span> <span class="hljs-comment">#查看Docker版本</span><br></code></pre></td></tr></table></figure><h3 id="3-4-2-添加阿里云YUM软件源"><a href="#3-4-2-添加阿里云YUM软件源" class="headerlink" title="3.4.2 添加阿里云YUM软件源"></a>3.4.2 添加阿里云YUM软件源</h3><blockquote><p>master、node节点都需要安装kubelet kubeadm kubectl。<br>安装kubernetes的时候，需要安装kubelet, kubeadm等包，但k8s官网给的yum源是packages.cloud.google.com，国内访问不了，此时我们可以使用阿里云的yum仓库镜像。</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ cat &gt; <span class="hljs-regexp">/etc/yum</span>.repos.d/kubernetes.repo &lt;&lt; EOF<br>[kubernetes]<br>name=Kubernetes<br>baseurl=https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/kubernetes/yum</span><span class="hljs-regexp">/repos/</span>kubernetes-el7-x86_64<br>enabled=<span class="hljs-number">1</span><br>gpgcheck=<span class="hljs-number">0</span><br>repo_gpgcheck=<span class="hljs-number">0</span><br>gpgkey=https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/kubernetes/yum</span><span class="hljs-regexp">/doc/yum</span>-key.gpg https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/kubernetes/yum</span><span class="hljs-regexp">/doc/</span>rpm-package-key.gpg<br>EOF<br></code></pre></td></tr></table></figure><h3 id="3-4-3-安装kubeadm、kubelet、kubectl"><a href="#3-4-3-安装kubeadm、kubelet、kubectl" class="headerlink" title="3.4.3 安装kubeadm、kubelet、kubectl"></a>3.4.3 安装kubeadm、kubelet、kubectl</h3><blockquote><p>由于版本更新频繁，可以指定版本号部署：</p><p>kubeadm： 引导集群的命令</p><p>kubelet：集群中运行任务的代理程序</p><p>kubectl：命令行管理工具</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ yum install -y kubelet kubeadm kubectl <span class="hljs-attribute">--disableexcludes</span>=kubernetes 安装最新版<br><br>$ yum install -y kubelet-1.15.0 kubeadm-1.15.0 kubectl-1.15.0  安装制定版本<br><br>$ systemctl <span class="hljs-built_in">enable</span> kubelet &amp;&amp; systemctl start kubelet<br><br>$ systemctl <span class="hljs-built_in">enable</span> kubelet.service<br></code></pre></td></tr></table></figure><p>启动k8s，查看安装k8s的安装目录:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ rpm -ql kubelet<br><span class="hljs-regexp">/etc/</span>kubernetes/manifests 清单目录<br><span class="hljs-regexp">/etc/</span>sysconfig/kubelet   配置文件<br><span class="hljs-regexp">/usr/</span>bin/kubelet<br><span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/systemd/</span>system/kubelet.service<br></code></pre></td></tr></table></figure><h3 id="3-4-4-部署Kubernetes-Master"><a href="#3-4-4-部署Kubernetes-Master" class="headerlink" title="3.4.4 部署Kubernetes Master"></a>3.4.4 部署Kubernetes Master</h3><h4 id="3-4-4-1-可以科学上网访问国外"><a href="#3-4-4-1-可以科学上网访问国外" class="headerlink" title="3.4.4.1 可以科学上网访问国外"></a>3.4.4.1 可以科学上网访问国外</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">$ kubeadm config images pull<br></code></pre></td></tr></table></figure><h4 id="3-4-4-2-不能连接到外网解决办法"><a href="#3-4-4-2-不能连接到外网解决办法" class="headerlink" title="3.4.4.2 不能连接到外网解决办法"></a>3.4.4.2 不能连接到外网解决办法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ kubeadm config images list <span class="hljs-comment"># 列出所需镜像</span><br><br>k8s.gcr.io/kube-apiserver:v1.18.0<br>k8s.gcr.io/kube-controller-manager:v1.18.0<br>k8s.gcr.io/kube-scheduler:v1.18.0<br>k8s.gcr.io/kube-proxy:v1.18.0<br>k8s.gcr.io/pause:3.2<br>k8s.gcr.io/etcd:3.4.3-0<br>k8s.gcr.io/coredns:1.6.7<br></code></pre></td></tr></table></figure><p><img src="https://image.focusprogram.top/20200401114021.png"></p><h5 id="3-4-4-2-1-第一种安装方式"><a href="#3-4-4-2-1-第一种安装方式" class="headerlink" title="3.4.4.2.1 第一种安装方式"></a>3.4.4.2.1 第一种安装方式</h5><p>编写安装脚本vim install.sh</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs awk">K8S_VERSION=v1.<span class="hljs-number">18.0</span><br>ETCD_VERSION=<span class="hljs-number">3.4</span>.<span class="hljs-number">3</span>-<span class="hljs-number">0</span><br>DASHBOARD_VERSION=v1.<span class="hljs-number">8.3</span><br>FLANNEL_VERSION=v0.<span class="hljs-number">12.0</span>-amd64<br>DNS_VERSION=<span class="hljs-number">1.6</span>.<span class="hljs-number">7</span><br>PAUSE_VERSION=<span class="hljs-number">3.2</span><br><span class="hljs-comment"># 基本组件</span><br>docker pull registry.cn-hangzhou.aliyuncs.com<span class="hljs-regexp">/google_containers/</span>kube-apiserver-amd64:<span class="hljs-variable">$K8S_VERSION</span><br>docker pull registry.cn-hangzhou.aliyuncs.com<span class="hljs-regexp">/google_containers/</span>kube-controller-manager-amd64:<span class="hljs-variable">$K8S_VERSION</span><br>docker pull registry.cn-hangzhou.aliyuncs.com<span class="hljs-regexp">/google_containers/</span>kube-scheduler-amd64:<span class="hljs-variable">$K8S_VERSION</span><br>docker pull registry.cn-hangzhou.aliyuncs.com<span class="hljs-regexp">/google_containers/</span>kube-proxy-amd64:<span class="hljs-variable">$K8S_VERSION</span><br>docker pull registry.cn-hangzhou.aliyuncs.com<span class="hljs-regexp">/google_containers/</span>etcd-amd64:<span class="hljs-variable">$ETCD_VERSION</span><br>docker pull registry.cn-hangzhou.aliyuncs.com<span class="hljs-regexp">/google_containers/</span>pause:<span class="hljs-variable">$PAUSE_VERSION</span><br>docker pull registry.cn-hangzhou.aliyuncs.com<span class="hljs-regexp">/google_containers/</span>coredns:<span class="hljs-variable">$DNS_VERSION</span><br><span class="hljs-comment"># 网络组件</span><br>docker pull quay.io<span class="hljs-regexp">/coreos/</span>flannel:<span class="hljs-variable">$FLANNEL_VERSION</span><br><span class="hljs-comment"># 修改tag</span><br>docker tag registry.cn-hangzhou.aliyuncs.com<span class="hljs-regexp">/google_containers/</span>kube-apiserver-amd64:<span class="hljs-variable">$K8S_VERSION</span> k8s.gcr.io/kube-apiserver:<span class="hljs-variable">$K8S_VERSION</span><br>docker tag registry.cn-hangzhou.aliyuncs.com<span class="hljs-regexp">/google_containers/</span>kube-controller-manager-amd64:<span class="hljs-variable">$K8S_VERSION</span> k8s.gcr.io/kube-controller-manager:<span class="hljs-variable">$K8S_VERSION</span><br>docker tag registry.cn-hangzhou.aliyuncs.com<span class="hljs-regexp">/google_containers/</span>kube-scheduler-amd64:<span class="hljs-variable">$K8S_VERSION</span> k8s.gcr.io/kube-scheduler:<span class="hljs-variable">$K8S_VERSION</span><br>docker tag registry.cn-hangzhou.aliyuncs.com<span class="hljs-regexp">/google_containers/</span>kube-proxy-amd64:<span class="hljs-variable">$K8S_VERSION</span> k8s.gcr.io/kube-proxy:<span class="hljs-variable">$K8S_VERSION</span><br>docker tag registry.cn-hangzhou.aliyuncs.com<span class="hljs-regexp">/google_containers/</span>etcd-amd64:<span class="hljs-variable">$ETCD_VERSION</span> k8s.gcr.io/etcd:<span class="hljs-variable">$ETCD_VERSION</span><br>docker tag registry.cn-hangzhou.aliyuncs.com<span class="hljs-regexp">/google_containers/</span>pause:<span class="hljs-variable">$PAUSE_VERSION</span> k8s.gcr.io/pause:<span class="hljs-variable">$PAUSE_VERSION</span><br>docker tag registry.cn-hangzhou.aliyuncs.com<span class="hljs-regexp">/google_containers/</span>coredns:<span class="hljs-variable">$DNS_VERSION</span> k8s.gcr.io/coredns:<span class="hljs-variable">$DNS_VERSION</span><br></code></pre></td></tr></table></figure><h5 id="3-4-4-2-2-第二种安装方式"><a href="#3-4-4-2-2-第二种安装方式" class="headerlink" title="3.4.4.2.2 第二种安装方式"></a>3.4.4.2.2 第二种安装方式</h5><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs julia"><span class="hljs-comment">#下载镜像</span><br>$ kubeadm config images list | sed -e &#x27;s/^/docker pull /g&#x27; -e &#x27;s<span class="hljs-comment">#k8s.gcr.io#registry.cn-hangzhou.aliyuncs.com/google_containers#g&#x27; | sh -x </span><br><br><span class="hljs-comment">#修改镜像名称</span><br>$ docker images | grep registry.cn-hangzhou.aliyuncs.com/google_containers | awk &#x27;&#123;print <span class="hljs-string">&quot;docker tag&quot;</span>,$<span class="hljs-number">1</span><span class="hljs-string">&quot;:&quot;</span>$<span class="hljs-number">2</span>,$<span class="hljs-number">1</span><span class="hljs-string">&quot;:&quot;</span>$<span class="hljs-number">2</span>&#125;&#x27; | sed -e &#x27;s/registry.cn-hangzhou.aliyuncs.com\/google_containers/k8s.gcr.io/<span class="hljs-number">2</span>&#x27; | sh -x <br><br><span class="hljs-comment">#删除原始镜像</span><br>$ docker images | grep registry.cn-hangzhou.aliyuncs.com/google_containers | awk &#x27;&#123;print <span class="hljs-string">&quot;docker rmi &quot;</span><span class="hljs-string">&quot;&quot;</span>$<span class="hljs-number">1</span><span class="hljs-string">&quot;&quot;&quot;:&quot;&quot;&quot;</span>$<span class="hljs-number">2</span>&#125;&#x27; | sh -x <br></code></pre></td></tr></table></figure><p><img src="https://image.focusprogram.top/20200401131713.png"></p><h3 id="3-4-5-部署Kubernetes-Node"><a href="#3-4-5-部署Kubernetes-Node" class="headerlink" title="3.4.5 部署Kubernetes Node"></a>3.4.5 部署Kubernetes Node</h3><p>编写安装脚本vim install.sh</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs awk">K8S_VERSION=v1.<span class="hljs-number">18.0</span><br><br>PAUSE_VERSION=<span class="hljs-number">3.2</span><br><br>FLANNEL_VERSION=v0.<span class="hljs-number">12.0</span>-amd64<br><br><span class="hljs-comment"># 根据所需镜像名字先拉取国内资源</span><br>docker pull registry.cn-hangzhou.aliyuncs.com<span class="hljs-regexp">/google_containers/</span>kube-proxy:<span class="hljs-variable">$K8S_VERSION</span><br>docker pull registry.cn-hangzhou.aliyuncs.com<span class="hljs-regexp">/google_containers/</span>pause:<span class="hljs-variable">$PAUSE_VERSION</span><br>docker pull quay.io<span class="hljs-regexp">/coreos/</span>flannel:<span class="hljs-variable">$FLANNEL_VERSION</span><br><br><span class="hljs-comment"># 修改镜像tag</span><br>docker tag registry.cn-hangzhou.aliyuncs.com<span class="hljs-regexp">/google_containers/</span>kube-proxy:<span class="hljs-variable">$K8S_VERSION</span> k8s.gcr.io/kube-proxy:<span class="hljs-variable">$K8S_VERSION</span><br>docker tag registry.cn-hangzhou.aliyuncs.com<span class="hljs-regexp">/google_containers/</span>pause:<span class="hljs-variable">$PAUSE_VERSION</span> k8s.gcr.io/pause:<span class="hljs-variable">$PAUSE_VERSION</span><br><br><span class="hljs-comment"># 删除原来的镜像</span><br>docker rmi registry.cn-hangzhou.aliyuncs.com<span class="hljs-regexp">/google_containers/</span>kube-proxy:<span class="hljs-variable">$K8S_VERSION</span><br>docker rmi registry.cn-hangzhou.aliyuncs.com<span class="hljs-regexp">/google_containers/</span>pause:<span class="hljs-variable">$PAUSE_VERSION</span><br></code></pre></td></tr></table></figure><p><img src="https://image.focusprogram.top/20200401122908.png"></p><h3 id="3-4-6-初始化Master"><a href="#3-4-6-初始化Master" class="headerlink" title="3.4.6 初始化Master"></a>3.4.6 初始化Master</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">kubeadm</span> init --pod-network-cidr <span class="hljs-number">10.244.0.0</span>/<span class="hljs-number">16</span> --apiserver-advertise-address=<span class="hljs-number">192.168.80.128</span><br></code></pre></td></tr></table></figure><p>无法拉取镜像的可使用此命令192.168.20.61（Master）执行 使用阿里云节点在线方式，节点会自动安装阿里云镜像</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">由于默认拉取镜像地址k8s<span class="hljs-selector-class">.gcr</span>.io国内无法访问，这里指定阿里云镜像仓库地址。kubeadm init <span class="hljs-attr">--pod-network-cidr</span> <span class="hljs-number">10.244</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">16</span> <span class="hljs-attr">--image-repository</span>= registry<span class="hljs-selector-class">.cn-hangzhou</span><span class="hljs-selector-class">.aliyuncs</span>.com/google_containers <span class="hljs-attr">--apiserver-advertise-address</span>=<span class="hljs-number">192.168</span>.<span class="hljs-number">80.128</span><br></code></pre></td></tr></table></figure><p>指定版本实例:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ kubeadm init \<br><span class="hljs-attribute">--apiserver-advertise-address</span>=192.168.80.128 \<br>--image-repository registry.aliyuncs.com/google_containers \<br>--kubernetes-version v1.18.0 \<br><span class="hljs-attribute">--service-cidr</span>=10.1.0.0/16 \<br><span class="hljs-attribute">--pod-network-cidr</span>=10.244.0.0/16<br></code></pre></td></tr></table></figure><p>执行完毕保存kubeadm token，以便node节点加入<br>#每个机器创建的master以下部分都不同,需要自己保存好</p><p><img src="https://image.focusprogram.top/20200401132225.png"></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs llvm">$ kubeadm join <span class="hljs-number">192.168</span>.<span class="hljs-number">80.128</span>:<span class="hljs-number">6443</span> --token <span class="hljs-number">9</span><span class="hljs-keyword">c</span><span class="hljs-number">963</span>m.as<span class="hljs-number">0</span>v<span class="hljs-number">97</span>vbtdajyszd \<br>    --discovery-token-ca-cert-hash sha<span class="hljs-number">256</span>:<span class="hljs-number">9e213498</span>e<span class="hljs-number">36</span>fe<span class="hljs-number">6044</span><span class="hljs-keyword">c</span><span class="hljs-number">5022</span>a<span class="hljs-number">39911989</span><span class="hljs-keyword">c</span><span class="hljs-number">417</span>b<span class="hljs-number">649</span>a<span class="hljs-number">667825239</span>a<span class="hljs-number">536033</span><span class="hljs-keyword">c</span><span class="hljs-number">68e18</span>cb<br></code></pre></td></tr></table></figure><h3 id="3-4-7-查看kubeadm-init的帮助信息"><a href="#3-4-7-查看kubeadm-init的帮助信息" class="headerlink" title="3.4.7 查看kubeadm init的帮助信息"></a>3.4.7 查看kubeadm init的帮助信息</h3><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-comment"># kubeadm init –help</span><br><span class="hljs-built_in">--apiserver-advertise-address：API服务器将通知它正在监听的IP地址，监听的地址为“0.0.0.0”，即本机所有IP地址。</span><br><span class="hljs-built_in">--apiserver-bind-port：API服务器绑定到的端口。(默认：6443)</span><br><span class="hljs-built_in">--cert-dir：加载证书的相关目录（默认：/etc/kubernetes/pki）</span><br><span class="hljs-built_in">--config：配置文件的路径。警告:配置文件目前属于实验性，还不稳定。</span><br><span class="hljs-built_in">--ignore-preflight-errors：将错误显示为警告的检查列表进行忽略。例如:“IsPrivilegedUser,Swp”。Value</span> <span class="hljs-string">&#x27;all&#x27;</span>忽略所有检查中的错误。<br><span class="hljs-built_in">--pod-network-cidr：指定pod网络的IP地址范围。如果设置，控制平面将为每个节点自动分配CIDRs。</span><br><span class="hljs-built_in">--service-cidr：为service</span> <span class="hljs-string">VIPs</span>使用不同的<span class="hljs-string">IP</span>地址。(默认“<span class="hljs-string">10</span>.<span class="hljs-string">96</span>.<span class="hljs-string">0</span>.<span class="hljs-string">0</span>/<span class="hljs-string">12</span>”)。<br></code></pre></td></tr></table></figure><blockquote><p>运行初始化，程序会检验环境一致性，可以根据实际错误提示进一步修复问题。程序会访问<a href="https://dl.k8s.io/release/stable-1.txt%E8%8E%B7%E5%8F%96%E6%9C%80%E6%96%B0%E7%9A%84k8s%E7%89%88%E6%9C%AC%EF%BC%8C%E8%AE%BF%E9%97%AE%E8%BF%99%E4%B8%AA%E8%BF%9E%E6%8E%A5%E9%9C%80%E8%A6%81FQ%EF%BC%8C%E5%A6%82%E6%9E%9C%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE%EF%BC%8C%E5%88%99%E4%BC%9A%E4%BD%BF%E7%94%A8kubeadm">https://dl.k8s.io/release/stable-1.txt获取最新的k8s版本，访问这个连接需要FQ，如果无法访问，则会使用kubeadm</a> client的版本作为安装的版本号，使用kubeadm version查看client版本。也可以使用–kubernetes-version明确指定版本</p></blockquote><h3 id="3-4-8-使用kubectl工具"><a href="#3-4-8-使用kubectl工具" class="headerlink" title="3.4.8 使用kubectl工具"></a>3.4.8 使用kubectl工具</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$HOME</span>/.kube</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo <span class="hljs-built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="hljs-variable">$HOME</span>/.kube/config</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo <span class="hljs-built_in">chown</span> $(<span class="hljs-built_in">id</span> -u):$(<span class="hljs-built_in">id</span> -g) <span class="hljs-variable">$HOME</span>/.kube/config</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">kubectl get nodes</span><br></code></pre></td></tr></table></figure><h3 id="3-4-9-安装Pod网络插件（CNI）"><a href="#3-4-9-安装Pod网络插件（CNI）" class="headerlink" title="3.4.9 安装Pod网络插件（CNI）"></a>3.4.9 安装Pod网络插件（CNI）</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ kubectl apply -f https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/coreos/</span>flannel<span class="hljs-regexp">/master/</span>Documentation/kube-flannel.yml<br></code></pre></td></tr></table></figure><h3 id="3-5-0-加入Kubernetes-Node"><a href="#3-5-0-加入Kubernetes-Node" class="headerlink" title="3.5.0 加入Kubernetes Node"></a>3.5.0 加入Kubernetes Node</h3><blockquote><p>在192.168.80.129&#x2F;130（Node）执行确保之前节点已拉取所需镜像。<br>向集群添加新节点，执行在kubeadm init输出的kubeadm join命令：</p></blockquote><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs llvm">$ kubeadm join <span class="hljs-number">192.168</span>.<span class="hljs-number">80.128</span>:<span class="hljs-number">6443</span> --token <span class="hljs-number">9</span><span class="hljs-keyword">c</span><span class="hljs-number">963</span>m.as<span class="hljs-number">0</span>v<span class="hljs-number">97</span>vbtdajyszd \<br>    --discovery-token-ca-cert-hash sha<span class="hljs-number">256</span>:<span class="hljs-number">9e213498</span>e<span class="hljs-number">36</span>fe<span class="hljs-number">6044</span><span class="hljs-keyword">c</span><span class="hljs-number">5022</span>a<span class="hljs-number">39911989</span><span class="hljs-keyword">c</span><span class="hljs-number">417</span>b<span class="hljs-number">649</span>a<span class="hljs-number">667825239</span>a<span class="hljs-number">536033</span><span class="hljs-keyword">c</span><span class="hljs-number">68e18</span>cb<br></code></pre></td></tr></table></figure><p><img src="https://image.focusprogram.top/20200401133645.png"></p><p>查看已经运行了的容器</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-symbol">$</span> kubectl get pods -n kube-<span class="hljs-keyword">system</span>  查看运行空间为名称为kube-<span class="hljs-keyword">system</span><br><br><span class="hljs-symbol">$</span> kubectl get pods --<span class="hljs-keyword">all</span>-namespaces  查看所有运行空间<br><br><span class="hljs-symbol">$</span> kubectl get ns 查看运行的名称空间<br><br><span class="hljs-symbol">$</span> kubectl get pods -n kube-<span class="hljs-keyword">system</span> -o wide 查看容器详细信息<br><br><span class="hljs-symbol">$</span> kubectl get svc -n kube-<span class="hljs-keyword">system</span> 查看服务信息<br></code></pre></td></tr></table></figure><p>查看所有节点是否正常运行，显示如下，为全部正常运行：</p><p><img src="https://image.focusprogram.top/20200401151922.png"></p><p>如果存在penging等状态，请使用如下命令查看问题：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">kubectl describe pod pod节点名 -<span class="hljs-built_in">n</span> 命名空间<br></code></pre></td></tr></table></figure><h2 id="3-5-测试Kubernetes集群"><a href="#3-5-测试Kubernetes集群" class="headerlink" title="3.5 测试Kubernetes集群"></a>3.5 测试Kubernetes集群</h2><p>在Kubernetes集群中创建一个pod，验证是否正常运行：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ kubectl create deployment nginx <span class="hljs-attribute">--image</span>=nginx<br><br>$ kubectl expose deployment nginx <span class="hljs-attribute">--port</span>=80 <span class="hljs-attribute">--type</span>=NodePort<br><br>$ kubectl <span class="hljs-built_in">get</span> pod,svc<br></code></pre></td></tr></table></figure><p>使用master节点部署，显示如下错误： 1 node(s) had taints that the pod didn’t tolerate</p><p><img src="https://image.focusprogram.top/20200401134920.png"></p><blockquote><p>kubernetes增加污点，达到pod是否能在做节点运行</p><p>master node参与工作负载 (只在主节点执行)<br>使用kubeadm初始化的集群，出于安全考虑Pod不会被调度到Master Node上，也就是说Master Node不参与工作负载。</p><p>这里搭建的是测试环境可以使用下面的命令使Master Node参与工作负载：<br>k8s是master节点的hostname</p></blockquote><p>允许master节点部署pod，使用命令如下:</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">kubectl taint nodes --all <span class="hljs-keyword">node</span><span class="hljs-title">-role</span>.kubernetes.io/<span class="hljs-literal">master</span>-<span class="hljs-number">1</span><br><br>输出如下:<br><br><span class="hljs-keyword">node</span> <span class="hljs-title">“k8s</span>” untainted<br>error: taint “<span class="hljs-keyword">node</span><span class="hljs-title">-role</span>.kubernetes.io/<span class="hljs-literal">master</span>:” not found 错误忽略。<br></code></pre></td></tr></table></figure><p>禁止master部署pod</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">kubectl taint nodes k8s <span class="hljs-keyword">node</span><span class="hljs-title">-role</span>.kubernetes.io/<span class="hljs-attr">master=</span><span class="hljs-literal">true</span>:NoSchedule<br></code></pre></td></tr></table></figure><p>通过命令查看服务端口 kubectl get pod,svc</p><p><img src="https://image.focusprogram.top/20200401151107.png"></p><p>查看服务部署节点 kubectl get pods -A -o wide</p><p><img src="https://image.focusprogram.top/20200401151922.png"></p><p>分别访问192.168.80.128&#x2F;129&#x2F;130节点上运行的Nginx</p><p><a href="http://192.168.80.128:30482/">http://192.168.80.128:30482/</a></p><p><a href="http://192.168.80.129:30482/">http://192.168.80.129:30482/</a></p><p><a href="http://192.168.80.130:30482/">http://192.168.80.130:30482/</a></p><p>显示均为下，则运行正常：</p><p><img src="https://image.focusprogram.top/20200401152349.png"></p><h2 id="3-6-部署-Dashboard"><a href="#3-6-部署-Dashboard" class="headerlink" title="3.6 部署 Dashboard"></a>3.6 部署 Dashboard</h2><h3 id="3-6-1-k8s为v1-16之前安装步骤-v1-10"><a href="#3-6-1-k8s为v1-16之前安装步骤-v1-10" class="headerlink" title="3.6.1 k8s为v1.16之前安装步骤(v1.10)"></a>3.6.1 k8s为v1.16之前安装步骤(v1.10)</h3><h4 id="3-6-1-1-安装kubernetes-dashboard"><a href="#3-6-1-1-安装kubernetes-dashboard" class="headerlink" title="3.6.1.1 安装kubernetes-dashboard"></a>3.6.1.1 安装kubernetes-dashboard</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ kubectl apply -f https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/kubernetes/</span>dashboard<span class="hljs-regexp">/v1.10.1/</span>src<span class="hljs-regexp">/deploy/</span>recommended/kubernetes-dashboard.yaml<br></code></pre></td></tr></table></figure><h4 id="3-6-1-2-查看dashboard部署服务器"><a href="#3-6-1-2-查看dashboard部署服务器" class="headerlink" title="3.6.1.2 查看dashboard部署服务器"></a>3.6.1.2 查看dashboard部署服务器</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ kubectl <span class="hljs-built_in">get</span> pods -A -o wide<br></code></pre></td></tr></table></figure><p><img src="https://image.focusprogram.top/97db9b8f-6c72-4fa6-9ff5-1297de4d4ca7.jpg"></p><p>从图中可以看出 pod在node1节点 其中节点IP为192.168.20.62，但是状态为ErrImagePull</p><p>可使用命令查看具体原因</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-symbol">$</span> kubectl describe pod kubernetes-dashboard -n kube-<span class="hljs-keyword">system</span><br></code></pre></td></tr></table></figure><p>原因：因为默认镜像国内无法访问</p><p>解决办法：使用阿里云镜像下载，在远程k8s-node-one服务器，输入下面命令拉取</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">拉取镜像</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker pull registry.cn-hangzhou.aliyuncs.com/kuberneters/kubernetes-dashboard-amd64:v1.10.1</span>     <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改镜像名</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker tag registry.cn-hangzhou.aliyuncs.com/kuberneters/kubernetes-dashboard-amd64:v1.10.1 k8s.gcr.io/kubernetes-dashboard-amd64:v1.10.1</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除原镜像</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker rmi registry.cn-hangzhou.aliyuncs.com/kuberneters/kubernetes-dashboard-amd64:v1.10.1</span>  <br></code></pre></td></tr></table></figure><p>查看状态</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ kubectl <span class="hljs-built_in">get</span> pods -A -o wide<br></code></pre></td></tr></table></figure><p><img src="https://image.focusprogram.top/5389ea55-a5cd-47b9-80f0-415ce404b2bd.jpg"></p><p>查看服务详情</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm">$ kubectl <span class="hljs-meta">get</span> <span class="hljs-keyword">svc</span> -n kube-system<br></code></pre></td></tr></table></figure><p>默认Dashboard只能集群内部访问</p><p><img src="https://image.focusprogram.top/75bcb537-4d4d-4e83-8932-8d6c9d464695.jpg"></p><p>修改Service为NodePort类型，暴露到外部：<br>修改node为NodePort模式</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scilab">$ kubectl patch svc -n kube-<span class="hljs-built_in">system</span> kubernetes-dashboard -p <span class="hljs-string">&#x27;&#123;&quot;</span>spec<span class="hljs-string">&quot;:&#123;&quot;</span><span class="hljs-built_in">type</span><span class="hljs-string">&quot;:&quot;</span>NodePort<span class="hljs-string">&quot;&#125;&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>或者修改service配置，找到type，将ClusterIP改成NodePort：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ kubectl <span class="hljs-built_in">edit</span><span class="hljs-built_in"> service </span>kubernetes-dashboard <span class="hljs-attribute">--namespace</span>=kube-system<br></code></pre></td></tr></table></figure><p>查看暴露端口：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ kubectl <span class="hljs-built_in">get</span><span class="hljs-built_in"> service </span><span class="hljs-attribute">--namespace</span>=kube-system<br></code></pre></td></tr></table></figure><p><img src="https://image.focusprogram.top/95ba8de3-f3a8-489b-a352-17e7bf6e6089.jpg"></p><p>访问地址为<a href="https://192.168.20.62:32146/">https://192.168.20.62:32146</a></p><p><img src="https://image.focusprogram.top/f09af693-63f4-4e60-a617-a9754bc55657.jpg"></p><h3 id="3-6-2-k8s为v1-16-安装步骤-v2-0"><a href="#3-6-2-k8s为v1-16-安装步骤-v2-0" class="headerlink" title="3.6.2 k8s为v1.16+安装步骤(v2.0)"></a>3.6.2 k8s为v1.16+安装步骤(v2.0)</h3><h4 id="3-6-2-1-下载recommended-yaml"><a href="#3-6-2-1-下载recommended-yaml" class="headerlink" title="3.6.2.1 下载recommended.yaml"></a>3.6.2.1 下载recommended.yaml</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ mkdir <span class="hljs-regexp">/data &amp;&amp; cd /</span>data<br><br>$ wget https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/kubernetes/</span>dashboard<span class="hljs-regexp">/v2.0.0-beta4/</span>aio<span class="hljs-regexp">/deploy/</span>recommended.yaml<br></code></pre></td></tr></table></figure><h4 id="3-6-2-2-编辑配置文件"><a href="#3-6-2-2-编辑配置文件" class="headerlink" title="3.6.2.2 编辑配置文件"></a>3.6.2.2 编辑配置文件</h4><blockquote><p>解决认证问题，端口问题，镜像问题</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">$</span> <span class="hljs-string">vim</span> <span class="hljs-string">recommended.yaml</span><br><br><span class="hljs-comment">## 设置对外开放端口</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kubernetes-dashboard</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kubernetes-dashboard</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kubernetes-dashboard</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span> <span class="hljs-comment"># 设置为NodePort</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">443</span><br>      <span class="hljs-attr">nodePort:</span> <span class="hljs-number">30001</span> <span class="hljs-comment"># 不设置随机端口，设置为固定端口30001</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">8443</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kubernetes-dashboard</span><br><br><span class="hljs-meta">---    </span><br><span class="hljs-meta"></span><br><span class="hljs-comment">## 由于证书问题，只能firefox浏览器才能打开，通过修改证书的方式，使得所有浏览器都能打开：注释此段</span><br><span class="hljs-comment">#apiVersion: v1</span><br><span class="hljs-comment">#kind: Secret</span><br><span class="hljs-comment">#metadata:</span><br><span class="hljs-comment">#  labels:</span><br><span class="hljs-comment">#    k8s-app: kubernetes-dashboard</span><br><span class="hljs-comment">#  name: kubernetes-dashboard-certs # 生成证书会用到该名字</span><br><span class="hljs-comment">#  namespace: kubernetes-dashboard  # 生成证书会用到该名字</span><br><span class="hljs-comment">#type: Opaque</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-comment">## 修改获取镜像相关</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">nodeSelector:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">master</span> <span class="hljs-comment"># 选择部署到哪一台节点</span><br>  <span class="hljs-attr">containers:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">kubernetes-dashboard</span><br>      <span class="hljs-attr">image:</span> <span class="hljs-string">kubernetesui/dashboard:v2.0.0-beta4</span><br>      <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">Always</span> <span class="hljs-comment"># 注释原来的镜像拉取规则</span><br>      <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span>   <span class="hljs-comment"># 设置为本地没有则拉取</span><br>   <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">8443</span><br>      <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>  <span class="hljs-attr">args:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">--token-ttl=43200</span> <span class="hljs-comment"># 修改token的实效时间60*60*12 为12小时,默认15分钟</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">--auto-generate-certificates</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">--namespace=kubernetes-dashboard</span><br><br></code></pre></td></tr></table></figure><h4 id="3-6-2-3-配置证书"><a href="#3-6-2-3-配置证书" class="headerlink" title="3.6.2.3 配置证书"></a>3.6.2.3 配置证书</h4><blockquote><p>由于证书问题，只能firefox浏览器能打开，通过修改证书的方式，使得所有浏览器都能打开</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">进入默认证书目录进行配置</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> /etc/kubernetes/pki/</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看是否存在namespace为kubernetes-dashboard</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">kubectl get namespaces</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">不存在namespace为创建kubernetes-dashboard创建namespace</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">kubectl create namespace kubernetes-dashboard</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建一个证书</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">(<span class="hljs-built_in">umask</span> 077; openssl genrsa -out dashboard.key 2048)</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">建立证书的签署请求(二者选其一即可)</span><br><br>方式一：<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">openssl req -new -key dashboard.key -out dashboard.csr -subj <span class="hljs-string">&quot;/O=HTI/CN=kubernetes-dashboard&quot;</span></span><br><br>方式二：master节点IP<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">openssl req -days 3650 -new -out dashboard.csr -key dashboard.key -subj <span class="hljs-string">&#x27;/CN=**192.168.80.128**&#x27;</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用集群的ca来签署证书</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">openssl x509 -req -<span class="hljs-keyword">in</span> dashboard.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out dashboard.crt -days 3650</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">我们需要把我们创建的证书创建为secret给k8s使用</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">kubectl create secret generic kubernetes-dashboard-certs --from-file=dashboard.crt=./dashboard.crt --from-file=dashboard.key=./dashboard.key  -n kubernetes-dashboard</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">在master节点上这是label，拉取镜像</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置node选择器label为master</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">kubectl label node k8s-master <span class="hljs-built_in">type</span>=master</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">拉取镜像</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker pull kubernetesui/dashboard:v2.0.0-beta4</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">进入配置文件所在目录,应用配置文件</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">kubectl apply -f recommended.yaml</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">获取默认用户登录token</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">kubectl describe secrets  $(kubectl  get secrets -n kubernetes-dashboard | awk  <span class="hljs-string">&#x27;/kubernetes-dashboard-token/&#123;print $1&#125;&#x27;</span> ) -n kubernetes-dashboard |sed -n <span class="hljs-string">&#x27;/token:.*/p&#x27;</span></span><br><br>eyJhbGciOiJSUzI1NiIsImtpZCI6ImdEa1F3eU0yckVWTDhWSkFac1Uyc0RkcUF3VmlTTlA0ZEp6UzdlNmRpNm8ifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJrdWJlcm5ldGVzLWRhc2hib2FyZC10b2tlbi1ocnhwdiIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50Lm5hbWUiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6IjhkMmI2MWNiLTY1OTEtNGRkYy1iYjFmLWVjNWZjODg0ZDg0ZCIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDprdWJlcm5ldGVzLWRhc2hib2FyZDprdWJlcm5ldGVzLWRhc2hib2FyZCJ9.i6oCoHDpKMt9b-yIXVULYf-QPdAnHQignKNvJTxCR7Bzw_GGKx3iSnBF366C0NaWVm5nWRXJSd61qp89Z-02OrVWAJbZw0FEiQ9cudM2ynE6J_sid1hat24q-M7thwr0rz_2E7uxmB1NBN9X1mw9KIMYwMeRvhdhLgMdD_t_o40pX05IMYhGKKEFf3GdEBrBQ4sIoY2FTbxgN2tWolAaU3gUaJtMw1iuMz7ePDEsw_exv5An-DNnfYeKcKhqN4FGmHCR-YNzYtsWXBEN3GxYmzX16U4eLC1ir9W32nVDaT5bisPaZ53Z_OJnSMJsEvXoz27_9_6lEAzuv022j0TFVQ<br></code></pre></td></tr></table></figure><p>查看状态</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ kubectl <span class="hljs-built_in">get</span> pods -A -o wide<br></code></pre></td></tr></table></figure><p><img src="https://image.focusprogram.top/20200401212246.png"></p><p>查看服务详情</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm">$ kubectl <span class="hljs-meta">get</span> <span class="hljs-keyword">svc</span> -n kubernetes-dashboard<br></code></pre></td></tr></table></figure><p><img src="https://image.focusprogram.top/20200401212316.png"></p><p>查看pod 与service是否运行正常</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm">$ kubectl <span class="hljs-meta">get</span> pod,<span class="hljs-keyword">svc</span> -n kubernetes-dashboard -o wide<br></code></pre></td></tr></table></figure><p><img src="https://image.focusprogram.top/20200401212338.png"></p><p>可根据需求查看kubernetes-dashboard-75d8b49cf6-7q8nk信息</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>kubectl describe pod kubernetes-dashboard-<span class="hljs-number">649</span>b495f5d-c2f58 -n kubernetes-dashboard<br></code></pre></td></tr></table></figure><p><img src="https://image.focusprogram.top/20200401212420.png"></p><h3 id="3-6-3-访问Dashboard"><a href="#3-6-3-访问Dashboard" class="headerlink" title="3.6.3 访问Dashboard"></a>3.6.3 访问Dashboard</h3><p>使用默认token登录 <a href="https://192.168.80.128:30001/#/login">https://192.168.80.128:30001</a></p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">eyJhbGciOiJSUzI1NiIsImtpZCI6ImdEa1F3eU0yckVWTDhWSkFac1Uyc0RkcUF3VmlTTlA0ZEp6UzdlNmRpNm8ifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJrdWJlcm5ldGVzLWRhc2hib2FyZC10b2tlbi1ocnhwdiIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50Lm5hbWUiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6IjhkMmI2MWNiLTY1OTEtNGRkYy1iYjFmLWVjNWZjODg0ZDg0ZCIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDprdWJlcm5ldGVzLWRhc2hib2FyZDprdWJlcm5ldGVzLWRhc2hib2FyZCJ9.i6oCoHDpKMt9b-yIXVULYf-QPdAnHQignKNvJTxCR7Bzw_GGKx3iSnBF366C0NaWVm5nWRXJSd61qp89Z-02OrVWAJbZw0FEiQ9cudM2ynE6J_sid1hat24q-M7thwr0rz_2E7uxmB1NBN9X1mw9KIMYwMeRvhdhLgMdD_t_o40pX05IMYhGKKEFf3GdEBrBQ4sIoY2FTbxgN2tWolAaU3gUaJtMw1iuMz7ePDEsw_exv5An-DNnfYeKcKhqN4FGmHCR-YNzYtsWXBEN3GxYmzX16U4eLC1ir9W32nVDaT5bisPaZ53Z_OJnSMJsEvXoz27_9_6lEAzuv022j0TFVQ<br></code></pre></td></tr></table></figure><p><img src="https://image.focusprogram.top/20200401223006.png"></p><p>默认用户权限不足—授权管理员，创建service account并绑定默认cluster-admin管理员集群角色：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"># 创建service account<br>$ kubectl create serviceaccount dashboard-admin -n kubernetes-dashboard<br><br># 绑定集群管理员<br>$ kubectl create clusterrolebinding dashboard-cluster-admin --clusterrole=cluster-admin --serviceaccount=kubernetes-dashboard:dashboard-admin<br><br># 获取token<br>$ kubectl describe secrets  <span class="hljs-constructor">$(<span class="hljs-params">kubectl</span>  <span class="hljs-params">get</span> <span class="hljs-params">secrets</span> -<span class="hljs-params">n</span> <span class="hljs-params">kubernetes</span>-<span class="hljs-params">dashboard</span> | <span class="hljs-params">awk</span>  &#x27;<span class="hljs-operator">/</span><span class="hljs-params">dashboard</span>-<span class="hljs-params">admin</span>-<span class="hljs-params">token</span><span class="hljs-operator">/</span>&#123;<span class="hljs-params">print</span> $1&#125;&#x27; )</span> -n kubernetes-dashboard <span class="hljs-pattern-match">|sed -n &#x27;<span class="hljs-operator">/</span>token:.<span class="hljs-operator">*</span><span class="hljs-operator">/</span>p&#x27;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">ey<span class="hljs-constructor">JhbGciOiJSUzI1NiIsImtpZCI6ImdEa1F3eU0yckVWTDhWSkFac1Uyc0RkcUF3VmlTTlA0ZEp6UzdlNmRpNm8ifQ</span>.ey<span class="hljs-constructor">Jpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJkYXNoYm9hcmQtYWRtaW4tdG9rZW4tZGZtZmQiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGFzaGJvYXJkLWFkbWluIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiNWQ0ZTQwYjUtN2QxNi00NjFhLWE1N2YtYTZiZGJiZjYzZjc5Iiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmVybmV0ZXMtZGFzaGJvYXJkOmRhc2hib2FyZC1hZG1pbiJ9</span>.<span class="hljs-constructor">JvfId92C8sOJ60mgKT39RDuvmA9ANZJuG8VwtJoC8qRRVD</span>-<span class="hljs-constructor">CDL_sTsDR_GXqpAZDvs3q_HtUhWMMkF1awqPnQQNMdQ36K</span>-t<span class="hljs-constructor">LI7ZAquPhjX71mEQq</span>-<span class="hljs-constructor">Smto9XVOJziHlkXPizgBnf5kemaG</span>-<span class="hljs-constructor">SYOOIbesFBk2Ky9264K2APoaafrDCtgwrCHQz9HrCDrbGb6ffjd_DeoMYRSu9pYr4baQsl57DEwLL5CLZ56W37IaFyiGA90s8ZDc_RzKx5nRftOXv4j0xiR</span>-e<span class="hljs-constructor">GRjhuzUb35SMQsVIvejIVcHUwCGKNAE74PRDmSbauhcab0SMgR5DW6Lk5lsGnIPAXKs3BUp9iURoi1A</span></span><br></code></pre></td></tr></table></figure><p>记录，以备不时之需或者获取token信息知晓管理员token</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ kubectl <span class="hljs-built_in">get</span><span class="hljs-built_in"> secret </span>-n kubernetes-dashboard |grep dashboard<br></code></pre></td></tr></table></figure><p><img src="https://image.focusprogram.top/20200401224525.png"></p><p>获取token</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">$ kubectl <span class="hljs-keyword">describe</span> secrets kubernetes-dashboard-<span class="hljs-keyword">token</span>-9tkf9 -<span class="hljs-keyword">n</span> kubernetes-dashboard<br></code></pre></td></tr></table></figure><p><img src="https://image.focusprogram.top/20200401224620.png"></p><p>使用输出的token登录Dashboard <a href="https://192.168.80.129:30001/">https://192.168.80.128:30001/</a></p><p><img src="https://image.focusprogram.top/20200401224832.png"></p><p>至此，Kubernetes搭建完毕</p><h2 id="3-7-Dashboard中文版本安装-扩展"><a href="#3-7-Dashboard中文版本安装-扩展" class="headerlink" title="3.7 Dashboard中文版本安装(扩展)"></a>3.7 Dashboard中文版本安装(扩展)</h2><h3 id="3-7-1-卸载Dashboard-v2-0版本"><a href="#3-7-1-卸载Dashboard-v2-0版本" class="headerlink" title="3.7.1 卸载Dashboard:v2.0版本"></a>3.7.1 卸载Dashboard:v2.0版本</h3><h4 id="3-7-1-1-卸载Dashboard"><a href="#3-7-1-1-卸载Dashboard" class="headerlink" title="3.7.1.1 卸载Dashboard"></a>3.7.1.1 卸载Dashboard</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> kubectl delete <span class="hljs-operator">-f</span> kubernetes<span class="hljs-literal">-dashboard</span>.yaml<br></code></pre></td></tr></table></figure><h4 id="3-7-1-2-删除证书"><a href="#3-7-1-2-删除证书" class="headerlink" title="3.7.1.2 删除证书"></a>3.7.1.2 删除证书</h4><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">$ kubectl delete secret <span class="hljs-keyword">generic</span> kubernetes-dashboard-certs -n kube-<span class="hljs-keyword">system</span><br></code></pre></td></tr></table></figure><h3 id="3-7-2-安装Dashboard-v1-8-3版本"><a href="#3-7-2-安装Dashboard-v1-8-3版本" class="headerlink" title="3.7.2 安装Dashboard:v1.8.3版本"></a>3.7.2 安装Dashboard:v1.8.3版本</h3><h4 id="3-7-2-1-重新生成证书"><a href="#3-7-2-1-重新生成证书" class="headerlink" title="3.7.2.1 重新生成证书"></a>3.7.2.1 重新生成证书</h4><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sas">## 生成证书请求的<span class="hljs-keyword">key</span><br>$ openssl genrsa -<span class="hljs-keyword">out</span> dashboard.<span class="hljs-keyword">key</span> 2048<br><br>## 生成证书请求<br>$ openssl req -days 3650 -new -<span class="hljs-keyword">out</span> dashboard.csr -<span class="hljs-keyword">key</span> dashboard.<span class="hljs-keyword">key</span> -subj <span class="hljs-string">&#x27;/CN=**192.168.80.128**&#x27;</span><br><br>## 生成自签证书<br>$ openssl x509 -req -<span class="hljs-keyword">in</span> dashboard.csr -signkey dashboard.<span class="hljs-keyword">key</span> -<span class="hljs-keyword">out</span> dashboard.crt<br><br>## 创建证书<br><br>kubectl <span class="hljs-keyword">create</span> secret generic kubernetes-dashboard-certs --<span class="hljs-keyword">from</span>-<span class="hljs-keyword">file</span>=dashboard.<span class="hljs-keyword">key</span> --<span class="hljs-keyword">from</span>-<span class="hljs-keyword">file</span>=dashboard.crt -n kube-system<br></code></pre></td></tr></table></figure><h4 id="3-7-2-2-下载配置文件"><a href="#3-7-2-2-下载配置文件" class="headerlink" title="3.7.2.2 下载配置文件"></a>3.7.2.2 下载配置文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker pull mirrorgooglecontainers/kubernetes-dashboard-amd64:v1.8.3</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">wget http://down.i4t.com/k8s-passwd-dashboard.yaml| kubectl apply -f k8s-passwd-dashboard.yaml</span><br></code></pre></td></tr></table></figure><h4 id="3-7-2-3-编辑配置文件"><a href="#3-7-2-3-编辑配置文件" class="headerlink" title="3.7.2.3 编辑配置文件"></a>3.7.2.3 编辑配置文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">vim k8s-passwd-dashboard.yaml</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 注释证书鉴证，免得只能用火狐浏览器访问</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">apiVersion: v1</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">kind: Secret</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">metadata:</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"> labels:</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">   k8s-app: kubernetes-dashboard</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"> name: kubernetes-dashboard-certs</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"> namespace: kube-system</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">type</span>: Opaque</span><br></code></pre></td></tr></table></figure><h4 id="3-7-2-4-basic认证"><a href="#3-7-2-4-basic认证" class="headerlink" title="3.7.2.4 basic认证"></a>3.7.2.4 basic认证</h4><p>方式一：修改kube-api的启动参数</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">## 增加配置文件:</span><br>$ vim <span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span>basic_auth_file.csv<br><br>admin,admin,<span class="hljs-number">1</span><br>system,system,<span class="hljs-number">2</span><br><br>$ vim <span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/manifests/</span>kube-apiserver.yaml<br><br><span class="hljs-comment">## 增加如下参数：</span><br>- --basic-auth-file=<span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span>basic_auth_file.csv<br><br><span class="hljs-comment">## 对admin用户授权</span><br>$ kubectl create clusterrolebinding cluster-test2 --clusterrole=cluster-admin --user=admin<br><br>$ kubectl -s=<span class="hljs-string">&quot;https://192.168.80.128:6443&quot;</span> --username=<span class="hljs-string">&quot;admin&quot;</span> --password=<span class="hljs-string">&quot;admin&quot;</span> get pods -n kube-system<br></code></pre></td></tr></table></figure><p>方式二：给匿名用户授权</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">$ kubectl <span class="hljs-keyword">create</span> clusterrolebinding test:anonymous --clusterrole=<span class="hljs-keyword">cluster</span>-admin --<span class="hljs-keyword">user</span>=<span class="hljs-keyword">system</span>:anonymous<br></code></pre></td></tr></table></figure><h4 id="3-7-2-5-发布"><a href="#3-7-2-5-发布" class="headerlink" title="3.7.2.5 发布"></a>3.7.2.5 发布</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> kubectl apply <span class="hljs-operator">-f</span> k8s<span class="hljs-literal">-passwd-dashboard</span>.yaml<br></code></pre></td></tr></table></figure><h4 id="3-7-2-6-访问"><a href="#3-7-2-6-访问" class="headerlink" title="3.7.2.6 访问"></a>3.7.2.6 访问</h4><p>访问 <a href="https://192.168.80.128:30000/">https://192.168.80.128:30000/</a></p><p>使用 admin&#x2F;admin 登陆</p><p><img src="https://image.focusprogram.top/20200403155621.png"></p><p><img src="https://image.focusprogram.top/20200403155637.png"></p><h2 id="3-8-安装常见问题汇总"><a href="#3-8-安装常见问题汇总" class="headerlink" title="3.8 安装常见问题汇总"></a>3.8 安装常见问题汇总</h2><h3 id="3-8-1-克隆github代码速度慢"><a href="#3-8-1-克隆github代码速度慢" class="headerlink" title="3.8.1 克隆github代码速度慢"></a>3.8.1 克隆github代码速度慢</h3><p>解决办法：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/x 换成 git:/</span><span class="hljs-regexp">/github.com/</span>x<br></code></pre></td></tr></table></figure><h3 id="3-8-2-boot空间不足"><a href="#3-8-2-boot空间不足" class="headerlink" title="3.8.2 boot空间不足"></a>3.8.2 boot空间不足</h3><p>解决办法：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs stylus">内核信息<br><span class="hljs-number">1</span>.查看现运行的内核版本<br>$ uname -r<br><br><span class="hljs-number">3.10</span>.<span class="hljs-number">0</span>-<span class="hljs-number">1062.18</span>.<span class="hljs-number">1</span><span class="hljs-selector-class">.el7</span><span class="hljs-selector-class">.x86_64</span><br> <br><span class="hljs-number">2</span>.列出所有的内核文件<br>$ rpm -<span class="hljs-selector-tag">q</span> kernel<br><br>kernel-<span class="hljs-number">3.10</span>.<span class="hljs-number">0</span>-<span class="hljs-number">862</span><span class="hljs-selector-class">.el7</span><span class="hljs-selector-class">.x86_64</span><br>kernel-<span class="hljs-number">3.10</span>.<span class="hljs-number">0</span>-<span class="hljs-number">1062.18</span>.<span class="hljs-number">1</span><span class="hljs-selector-class">.el7</span><span class="hljs-selector-class">.x86_64</span><br> <br><span class="hljs-number">3</span>.删除所有旧的内核文件<br>（注意不要删除当前系统正在运行的内核文件）<br>$ rpm -ekernel-<span class="hljs-number">3.10</span>.<span class="hljs-number">0</span>-<span class="hljs-number">862</span><span class="hljs-selector-class">.el7</span><span class="hljs-selector-class">.x86_64</span><br>到此，旧的内核文件就安全删除<br><br>$ rpm -<span class="hljs-selector-tag">q</span> kernel<br>kernel-<span class="hljs-number">3.10</span>.<span class="hljs-number">0</span>-<span class="hljs-number">1062.18</span>.<span class="hljs-number">1</span><span class="hljs-selector-class">.el7</span>.x86_64<br></code></pre></td></tr></table></figure><h3 id="3-8-3-pod-一直未处于Running状态"><a href="#3-8-3-pod-一直未处于Running状态" class="headerlink" title="3.8.3 pod 一直未处于Running状态"></a>3.8.3 pod 一直未处于Running状态</h3><p>解决办法：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs maxima"># 使用 <span class="hljs-built_in">describe</span> 命令查看具体原因：<br><br>$ kubectl <span class="hljs-built_in">describe</span> pod kubernetes-dashboard -n kube-<span class="hljs-built_in">system</span><br></code></pre></td></tr></table></figure><h3 id="3-8-4-彻底删除pod"><a href="#3-8-4-彻底删除pod" class="headerlink" title="3.8.4 彻底删除pod"></a>3.8.4 彻底删除pod</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 删除pod</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">kubectl get pod -n 命名空间</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">kubectl delete pod 节点名 -n 命名空间</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 删除deployment</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">kubectl get deployment -n 命名空间</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">kubectl delete deployment 部署名 -n 命名空间</span><br></code></pre></td></tr></table></figure><h3 id="3-8-5-开机运行kubectl失败"><a href="#3-8-5-开机运行kubectl失败" class="headerlink" title="3.8.5 开机运行kubectl失败"></a>3.8.5 开机运行kubectl失败</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>systemctl status kubelet  命令查看kubelet的情况<br></code></pre></td></tr></table></figure><h1 id="4-Metrics-server安装"><a href="#4-Metrics-server安装" class="headerlink" title="4. Metrics-server安装"></a>4. Metrics-server安装</h1><blockquote><p>在k8s早期版本中，对资源的监控使用的是heapster的资源监控工具。</p><p>但是从 Kubernetes 1.8 开始，Kubernetes 通过 Metrics API 获取资源使用指标，例如容器 CPU 和内存使用情况。</p><p>这些度量指标可以由用户直接访问，例如通过使用kubectl top 命令，或者使用集群中的控制器。</p><p>Metrics API: 通过 Metrics API，您可以获得 node 或 pod 当前的资源使用情况（但是不存储）。</p><p>metres-server比 heapster 优势在于： 访问不需要 apiserver 的代理机制，提供认证和授权等; 很多集群内组件依赖它（HPA,scheduler,kubectl top），因此它应该在集群中默认运行</p></blockquote><h2 id="4-1-Kubernetes安装版本信息"><a href="#4-1-Kubernetes安装版本信息" class="headerlink" title="4.1 Kubernetes安装版本信息"></a>4.1 Kubernetes安装版本信息</h2><p><img src="https://image.focusprogram.top/20200402112923.png"></p><p><img src="https://image.focusprogram.top/20200402113046.png"></p><h2 id="4-2-部署metrics-server"><a href="#4-2-部署metrics-server" class="headerlink" title="4.2 部署metrics-server"></a>4.2 部署metrics-server</h2><h3 id="4-2-1-下载metrics-server"><a href="#4-2-1-下载metrics-server" class="headerlink" title="4.2.1 下载metrics-server"></a>4.2.1 下载metrics-server</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> /data</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">clone</span> https://github.com/kubernetes-incubator/metrics-server</span><br></code></pre></td></tr></table></figure><h3 id="4-2-2-查看依赖镜像"><a href="#4-2-2-查看依赖镜像" class="headerlink" title="4.2.2 查看依赖镜像"></a>4.2.2 查看依赖镜像</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> <span class="hljs-built_in">cd</span> /<span class="hljs-keyword">data</span>/metrics<span class="hljs-literal">-server</span>/deploy/kubernetes/<br><br><span class="hljs-variable">$</span> grep <span class="hljs-string">&#x27;image:&#x27;</span> *<br><br>metrics<span class="hljs-literal">-server-deployment</span>.yaml: image: k8s.gcr.io/metrics<span class="hljs-literal">-server-amd64</span>:v0.<span class="hljs-number">3.6</span><br><br><span class="hljs-comment"># 无法访问外网，修改为阿里云镜像</span><br><span class="hljs-variable">$</span> sed <span class="hljs-literal">-i</span> <span class="hljs-string">&quot;s/image: .*/image: registry.cn-hangzhou.aliyuncs.com\/centosos\/metrics-server-amd64:v0.3.6/g&quot;</span> metrics<span class="hljs-literal">-server-deployment</span>.yaml<br></code></pre></td></tr></table></figure><p><img src="https://image.focusprogram.top/20200402114356.png"></p><h3 id="4-2-3-安装metrics-server"><a href="#4-2-3-安装metrics-server" class="headerlink" title="4.2.3 安装metrics-server"></a>4.2.3 安装metrics-server</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ kubectl create -f <span class="hljs-regexp">/data/m</span>etrics-server<span class="hljs-regexp">/deploy/</span>kubernetes/<br></code></pre></td></tr></table></figure><p><img src="https://image.focusprogram.top/20200402114521.png"></p><p>查看pod是否运行</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ kubectl -n kube-system <span class="hljs-built_in">get</span> pods -l <span class="hljs-attribute">k8s-app</span>=metrics-server<br></code></pre></td></tr></table></figure><p><img src="https://image.focusprogram.top/20200402114549.png"></p><p>查看pod的具体信息</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-symbol">$</span> kubectl get pods -n kube-<span class="hljs-keyword">system</span> -o wide<br></code></pre></td></tr></table></figure><p><img src="https://image.focusprogram.top/20200402114617.png"></p><p>验证是否安全成功查看 apiserver</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ kubectl <span class="hljs-built_in">get</span> apiservices<br></code></pre></td></tr></table></figure><p><img src="https://image.focusprogram.top/20200402114655.png"></p><p>查看服务是否正常</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">$ kubectl top <span class="hljs-keyword">node</span> <span class="hljs-title">出现error</span>: metrics not available yet<br><br><span class="hljs-comment">## 查看pod信息诊断</span><br>$ kubectl describe pods metrics-server-bfcf447f7-vk9bm -n kube-system<br></code></pre></td></tr></table></figure><p><img src="https://image.focusprogram.top/20200402115616.png"></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean">## 查看日志<br>$ kubectl logs metrics-server-bfcf447f7-vk9bm -n kube-<span class="hljs-keyword">system</span> <br></code></pre></td></tr></table></figure><p><img src="https://image.focusprogram.top/20200402115824.png"></p><h3 id="4-2-4-问题总结"><a href="#4-2-4-问题总结" class="headerlink" title="4.2.4 问题总结"></a>4.2.4 问题总结</h3><ul><li><p>问题1：metrics-server默认使用节点hostname通过kubelet 10250端口获取数据，但是coredns里面没有该数据无法解析(10.96.0.10:53)，可以在metrics server启动命令添加参数 –kubelet-preferred-address-types&#x3D;InternalIP 直接使用节点IP地址获取数据</p></li><li><p>问题2：kubelet 的10250端口使用的是https协议，连接需要验证tls证书。可以在metrics server启动命令添加参数–kubelet-insecure-tls不验证客户端证书</p></li><li><p>问题3：yaml文件中的image地址k8s.gcr.io&#x2F;metrics-server-amd64:v0.3.6 需要梯子，需要改成中国可以访问的image地址，可以使用aliyun的。这里使用hub.docker.com里的google镜像地址 image: mirrorgooglecontainers&#x2F;metrics-server-amd64:v0.3.6</p></li></ul><h3 id="4-2-5-问题修正"><a href="#4-2-5-问题修正" class="headerlink" title="4.2.5 问题修正"></a>4.2.5 问题修正</h3><p>编辑 vim &#x2F;data&#x2F;metrics-server&#x2F;deploy&#x2F;kubernetes&#x2F;metrics-server-deployment.yaml</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-bullet">-</span> <span class="hljs-string">name: metrics-server</span><br>       <span class="hljs-comment">#image: k8s.gcr.io/metrics-server-amd64:v0.3.6</span><br>       <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">registry.cn-hangzhou.aliyuncs.com/centosos/metrics-server-amd64:v0.3.6</span><br>       <span class="hljs-comment">#imagePullPolicy: IfNotPresent</span><br>       <span class="hljs-attribute">imagePullPolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Always</span><br>       <span class="hljs-attribute">command</span><span class="hljs-punctuation">:</span><br>           <span class="hljs-bullet">-</span> <span class="hljs-string">/metrics-server</span><br>           <span class="hljs-comment"># - --kubelet-preferred-address-types=InternalIP</span><br>           <span class="hljs-bullet">-</span> <span class="hljs-string">--kubelet-preferred-address-types=InternalIP,Hostname,InternalDNS,ExternalDNS,ExternalIP</span><br>           <span class="hljs-bullet">-</span> <span class="hljs-string">--kubelet-insecure-tls</span><br></code></pre></td></tr></table></figure><p><img src="https://image.focusprogram.top/20200402125032.png"></p><p>然后重新部署metrics-server</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ kubectl apply -f <span class="hljs-regexp">/data/m</span>etrics-server<span class="hljs-regexp">/deploy/</span>kubernetes/metrics-server-deployment.yaml<br></code></pre></td></tr></table></figure><p><img src="https://image.focusprogram.top/20200402125008.png"></p><p>查看部署状态并验证</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-symbol">$</span> kubectl get pods -n kube-<span class="hljs-keyword">system</span><br><br><span class="hljs-symbol">$</span> kubectl top node<br></code></pre></td></tr></table></figure><p><img src="https://image.focusprogram.top/20200402132122.png"></p><font color="red"><p>出现该报错信息：the server is currently unable to handle the request (get nodes.metrics.k8s.io)</p></font><p>解决方法：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">## 编辑配置文件</span><br>$ vim <span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/manifests/</span>kube-apiserver.yaml<br><br><span class="hljs-comment">## 添加配置</span><br><br>- --enable-aggregator-routing<br></code></pre></td></tr></table></figure><p><img src="https://image.focusprogram.top/20200402171535.png"></p><p>再次验证：</p><p><img src="https://image.focusprogram.top/20200402163020.png"></p><h2 id="4-3-访问Dashboard查看metrics-server"><a href="#4-3-访问Dashboard查看metrics-server" class="headerlink" title="4.3 访问Dashboard查看metrics-server"></a>4.3 访问Dashboard查看metrics-server</h2><p>显示如下,部署成功：<a href="https://192.168.80.128:30001/">https://192.168.80.128:30001/</a></p><p><img src="https://image.focusprogram.top/20200402163034.png"></p>]]></content>
    
    
    <categories>
      
      <category>Devops</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>Kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jenkins部署项目</title>
    <link href="/2020/07/11/Jenkins%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/"/>
    <url>/2020/07/11/Jenkins%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<p><strong>Jenkins部署项目</strong></p><hr><blockquote><p>新建任务</p></blockquote><p><img src="https://image.focusprogram.top/20190918161333.png"></p><blockquote><p>配置任务</p></blockquote><p>1.General配置</p><p><img src="https://image.focusprogram.top/20190918161450.png"></p><p>2.源码管理</p><p><img src="https://image.focusprogram.top/20190918161708.png"></p><p>3.构建环境</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-number">1</span>.Delete workspace <span class="hljs-keyword">before </span><span class="hljs-keyword">build </span>starts：构建前清空工作空间<br><br><span class="hljs-number">2</span>.Use secret text(s) <span class="hljs-keyword">or </span>file(s)：使用加密文件或文本<br><br><span class="hljs-number">3</span>.Abort the <span class="hljs-keyword">build </span>if it’s stuck：构建出现问题，则终止构建<br><br><span class="hljs-number">4</span>.<span class="hljs-keyword">Add </span>timestamps to the Console Output：给控制台输出增加时间戳<br><br><span class="hljs-number">5</span>.<span class="hljs-keyword">Inspect </span><span class="hljs-keyword">build </span>log for published Gradle <span class="hljs-keyword">build </span><span class="hljs-keyword">scans：检查已发布的Gradle构建扫描的构建日志</span><br><span class="hljs-keyword"></span><br><span class="hljs-number">6</span>.With Ant：用 Ant<br></code></pre></td></tr></table></figure><p>4.构建触发器</p><p><img src="https://image.focusprogram.top/20190918171407.png"></p><p>&#x3D;&#x3D;&lt;1&gt;.触发远程构建(例如脚本)&#x3D;&#x3D;</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">该触发方法是指通过调用jenkins接口触发构建任务(token在任务中配置)<br><br>curl http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">80.80</span>:<span class="hljs-number">8080</span><span class="hljs-regexp">/job/</span>springboot-quartz/build?token=<span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;&lt;2&gt;.其他工程构建后触发&#x3D;&#x3D;</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">该触发方法可以选择在jenkins构建完某个项目时触发构建<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;&lt;3&gt;.GitHub hook trigger for GITScm polling&#x3D;&#x3D;</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">该方法是通过向github提交代码时触发<br></code></pre></td></tr></table></figure><p>系统管理 》 系统设置</p><p>github中生成token</p><p><img src="https://image.focusprogram.top/20190918163851.png"></p><p><img src="https://image.focusprogram.top/20190918163359.png"></p><p><img src="https://image.focusprogram.top/20190918164046.png"></p><p>jenkins系统设置中配置 Hook URL</p><p><img src="https://image.focusprogram.top/20190918164248.png"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>p2g1055383.iask.<span class="hljs-keyword">in</span> --&gt; http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">80.80</span>:<span class="hljs-number">8080</span> 外网映射<br></code></pre></td></tr></table></figure><p>github中配置Webhooks地址</p><p><img src="https://image.focusprogram.top/20190918164425.png"></p><p>&#x3D;&#x3D;&lt;4&gt;.定时构建&#x3D;&#x3D;</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">该构建是指在某个时刻定时去构建项目类似定时任务<br><br>不管SVN或Git中数据有无变化，均执行定时化的构建任务<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;&lt;5&gt;.轮训SCM&#x3D;&#x3D;</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">只要SVN或Git中数据有更新，则执行构建任务<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">日程表表达式可以参考https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/nklinsirui/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">95338535</span><br></code></pre></td></tr></table></figure><p>5.构建</p><p>&#x3D;&#x3D;&lt;1&gt;.Invoke Ant&#x3D;&#x3D;</p><p>&#x3D;&#x3D;&lt;2&gt;.Invoke Gradle script&#x3D;&#x3D;</p><p>&#x3D;&#x3D;&lt;3&gt;.Run with timeout&#x3D;&#x3D;</p><p>&#x3D;&#x3D;&lt;4&gt;.Set Build status to “pending”  on GitHub commit&#x3D;&#x3D;</p><p>&#x3D;&#x3D;&lt;5&gt;.执行Windows批处理命令&#x3D;&#x3D;</p><p>&#x3D;&#x3D;&lt;6&gt;.执行Shell&#x3D;&#x3D;</p><p>&#x3D;&#x3D;&lt;7&gt;.调用顶层Maven目标&#x3D;&#x3D;</p><p><img src="https://image.focusprogram.top/20190918165242.png"></p><blockquote><p>shell脚本构建jar直接运行java -jar项目</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment">#服务名称</span><br>SERVER_NAME=quartz<br><br><span class="hljs-comment"># 源jar路径,mvn打包完成之后，target目录下的jar包名称，也可选择成为war包，war包可移动到Tomcat的webapps目录下运行，这里使用jar包，用java -jar 命令执行  </span><br>JAR_NAME=quartz-0.0.1-SNAPSHOT<br><br><span class="hljs-comment"># 源jar路径  </span><br><span class="hljs-comment">#/usr/local/jenkins_home/workspace---&gt;jenkins 工作目录</span><br><br><span class="hljs-comment">#demo 项目目录</span><br><span class="hljs-comment">#target 打包生成jar包的目录</span><br>JAR_PATH=/data/jenkins_home/workspace/quartz/target/<br><br><span class="hljs-comment"># 打包完成之后，把jar包移动到运行jar包的目录</span><br>JAR_WORK_PATH=/data/run<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;查询进程id--&gt;<span class="hljs-variable">$SERVER_NAME</span>&quot;</span><br>PID=`ps -ef | grep <span class="hljs-string">&quot;<span class="hljs-variable">$SERVER_NAME</span>&quot;</span> | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>`<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;得到进程ID：<span class="hljs-variable">$PID</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;结束进程&quot;</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">id</span> <span class="hljs-keyword">in</span> <span class="hljs-variable">$PID</span><br><span class="hljs-keyword">do</span><br><span class="hljs-built_in">kill</span> -9 <span class="hljs-variable">$id</span>  <br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;killed <span class="hljs-variable">$id</span>&quot;</span>  <br><span class="hljs-keyword">done</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;结束进程完成&quot;</span><br><br><span class="hljs-comment">#复制jar包到执行目录</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;复制jar包到执行目录:cp <span class="hljs-variable">$JAR_PATH</span>/<span class="hljs-variable">$JAR_NAME</span>.jar <span class="hljs-variable">$JAR_WORK_PATH</span>&quot;</span><br><span class="hljs-built_in">cp</span> <span class="hljs-variable">$JAR_PATH</span>/<span class="hljs-variable">$JAR_NAME</span>.jar <span class="hljs-variable">$JAR_WORK_PATH</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;复制jar包完成&quot;</span><br><span class="hljs-built_in">cd</span> <span class="hljs-variable">$JAR_WORK_PATH</span><br><span class="hljs-comment">#修改文件权限</span><br><span class="hljs-built_in">chmod</span> 755 <span class="hljs-variable">$JAR_NAME</span>.jar<br><br><span class="hljs-comment">#后台运行jar包</span><br>BUILD_ID=dontKillMe <span class="hljs-built_in">nohup</span> java -jar  <span class="hljs-variable">$JAR_NAME</span>.jar  &amp;<br></code></pre></td></tr></table></figure><blockquote><p>shell脚本构建war部署tomcat项目</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment">#防止tomcat和jenkins位于同一服务器上时tomcat启动失败</span><br><span class="hljs-built_in">export</span> BUILD_ID=tomcat_build_id<br><br><span class="hljs-built_in">cd</span> /data/jenkins_home/workspace/qywk/开发源码/Work/qywk-idea<br><br>mvn clean install<br><br><span class="hljs-comment">#tomcat位置</span><br>TOMCAT_PATH=/data/apache-tomcat-8.0.44<br><br><span class="hljs-comment">#服务名称</span><br>SERVER_NAME=qianYuWeiKe-0.0.1-SNAPSHOT<br><span class="hljs-comment"># 源jar路径,mvn打包完成之后，target目录下的jar包名称，也可选择成为war包，war包可移动到Tomcat的webapps目录下运行，这里使用jar包，用java -jar 命令执行  </span><br>JAR_NAME=qianYuWeiKe-0.0.1-SNAPSHOT<br>JAR_NWE_NAME=qianYuWeiKe<br><br><span class="hljs-comment"># 源jar路径  </span><br><span class="hljs-comment">#/usr/local/jenkins_home/workspace---&gt;jenkins 工作目录</span><br><span class="hljs-comment">#demo 项目目录</span><br><span class="hljs-comment">#target 打包生成jar包的目录</span><br>JAR_PATH=/data/jenkins_home/workspace/qywk/开发源码/Work/qywk-idea/qianYuWeiKe/target<br><span class="hljs-comment"># 打包完成之后，把jar包移动到运行jar包的目录---&gt;work_daemon，work_daemon这个目录需要自己提前创建</span><br>JAR_WORK_PATH=/data/run<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;查询进程id--&gt;<span class="hljs-variable">$SERVER_NAME</span>&quot;</span><br>PID=`ps -ef | grep <span class="hljs-string">&quot;<span class="hljs-variable">$SERVER_NAME</span>&quot;</span> | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>`<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;得到进程ID：<span class="hljs-variable">$PID</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;结束进程&quot;</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">id</span> <span class="hljs-keyword">in</span> <span class="hljs-variable">$PID</span><br><span class="hljs-keyword">do</span><br><span class="hljs-built_in">kill</span> -9 <span class="hljs-variable">$id</span>  <br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;killed <span class="hljs-variable">$id</span>&quot;</span>  <br><span class="hljs-keyword">done</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;结束进程完成&quot;</span><br><br><span class="hljs-comment">#复制jar包到执行目录</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;复制jar包到执行目录:cp <span class="hljs-variable">$JAR_PATH</span>/<span class="hljs-variable">$JAR_NAME</span>.war <span class="hljs-variable">$JAR_WORK_PATH</span>&quot;</span><br><span class="hljs-built_in">cp</span> <span class="hljs-variable">$JAR_PATH</span>/<span class="hljs-variable">$JAR_NAME</span>.war <span class="hljs-variable">$JAR_WORK_PATH</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;复制jar包完成&quot;</span><br><span class="hljs-built_in">cd</span> <span class="hljs-variable">$JAR_WORK_PATH</span><br><span class="hljs-comment">#修改文件权限</span><br><span class="hljs-built_in">chmod</span> 755 <span class="hljs-variable">$JAR_NAME</span>.war<br><br><span class="hljs-built_in">chmod</span> +x <span class="hljs-variable">$TOMCAT_PATH</span>/bin/*.sh <br><br><span class="hljs-built_in">cp</span> <span class="hljs-variable">$JAR_WORK_PATH</span>/<span class="hljs-variable">$JAR_NAME</span>.war <span class="hljs-variable">$TOMCAT_PATH</span>/webapps<br><br><span class="hljs-built_in">mv</span> <span class="hljs-variable">$TOMCAT_PATH</span>/webapps/<span class="hljs-variable">$JAR_NAME</span>.war <span class="hljs-variable">$TOMCAT_PATH</span>/webapps/<span class="hljs-variable">$JAR_NWE_NAME</span>.war<br> <br><span class="hljs-comment">#tomcat进程的id并kill掉</span><br>ps -ef |grep tomcat  |awk &#123;<span class="hljs-string">&#x27;print $2&#x27;</span>&#125; | sed -e <span class="hljs-string">&quot;s/^/kill -9 /g&quot;</span> | sh -<br> <br><span class="hljs-comment">#删除tomcat日志文件</span><br><span class="hljs-built_in">rm</span>  $<span class="hljs-variable">$TOMCAT_PATH</span>/logs/* -rf<br> <br><span class="hljs-comment">#删除tomcat的临时目录</span><br><span class="hljs-built_in">rm</span>  $<span class="hljs-variable">$TOMCAT_PATH</span>/work/* -rf<br><br><span class="hljs-comment">#停止tomcat</span><br><span class="hljs-variable">$TOMCAT_PATH</span>/bin/shutdown.sh<br> <br><span class="hljs-comment">#启动tomcat</span><br><span class="hljs-variable">$TOMCAT_PATH</span>/bin/startup.sh <br> <br><span class="hljs-comment">#看启动日志</span><br><span class="hljs-built_in">tail</span> -f <span class="hljs-variable">$TOMCAT_PATH</span>/logs/catalina.out<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Devops</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>Jenkins</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lvs+Keepalived+Nginx+FastDFS分布式文件系统高可用集群搭建</title>
    <link href="/2020/07/11/Lvs-Keepalived-Nginx-FastDFS%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    <url>/2020/07/11/Lvs-Keepalived-Nginx-FastDFS%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<p>高可用文件服务器架构设计图</p><hr><p><img src="https://image.focusprogram.top/FastDFS.png"></p><p>所需服务器配置</p><hr><p><img src="https://image.focusprogram.top/20191127143513.png"></p><blockquote><p>&#x3D;&#x3D;192.168.80.128&#x3D;&#x3D;       和 &#x3D;&#x3D;192.168.80.129&#x3D;&#x3D;两台服务器上搭建Nginx+Keepalived</p></blockquote><hr><p>基础软件安装</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> yum install gcc openssl<span class="hljs-literal">-devel</span> libnl libnl<span class="hljs-literal">-devel</span> libnfnetlink<span class="hljs-literal">-devel</span> net<span class="hljs-literal">-tools</span> vim <span class="hljs-built_in">wget</span> lrzsz lsof <span class="hljs-literal">-y</span><br></code></pre></td></tr></table></figure><blockquote><p>Keepalived源码包安装</p></blockquote><p>下载安装Keepalived</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> /data &amp;&amp; <span class="hljs-built_in">cd</span> /data</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">wget https://www.keepalived.org/software/keepalived-2.0.19.tar.gz</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">tar -zxvf keepalived-2.0.19.tar.gz</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> /keepalived-2.0.19</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./configure</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">make &amp;&amp; make install</span><br></code></pre></td></tr></table></figure><p>keepalived配置</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ mkdir <span class="hljs-regexp">/etc/</span>keepalived<br><br>$ cp <span class="hljs-regexp">/data/</span>keepalived-<span class="hljs-number">2.0</span>.<span class="hljs-number">19</span><span class="hljs-regexp">/keepalived/</span>etc<span class="hljs-regexp">/keepalived/</span>keepalived.conf <span class="hljs-regexp">/etc/</span>keepalived/<br></code></pre></td></tr></table></figure><p>开机启动项</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ cp <span class="hljs-regexp">/data/</span>keepalived-<span class="hljs-number">2.0</span>.<span class="hljs-number">19</span><span class="hljs-regexp">/keepalived/</span>etc<span class="hljs-regexp">/init.d/</span>keepalived <span class="hljs-regexp">/etc/</span>rc.d<span class="hljs-regexp">/init.d/</span><br><br>$ cp <span class="hljs-regexp">/data/</span>keepalived-<span class="hljs-number">2.0</span>.<span class="hljs-number">19</span><span class="hljs-regexp">/keepalived/</span>etc<span class="hljs-regexp">/sysconfig/</span>keepalived <span class="hljs-regexp">/etc/</span>sysconfig/<br><br>$ cp <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/sbin/</span>keepalived <span class="hljs-regexp">/usr/</span>sbin/<br><br>$ chkconfig –add keepalived<br><br>$ chkconfig keepalived on<br></code></pre></td></tr></table></figure><blockquote><p>Keepalived从yum源安装</p></blockquote><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">$ yum <span class="hljs-keyword">install</span> -y keepalived<br></code></pre></td></tr></table></figure><blockquote><p>服务命令（启动、重启、关闭）</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ <span class="hljs-regexp">/etc/i</span>nit.d/keepalived start 启动<br> <br>$ <span class="hljs-regexp">/etc/i</span>nit.d/keepalived restart 重启<br><br>$ <span class="hljs-regexp">/etc/i</span>nit.d/keepalived stop 停止<br></code></pre></td></tr></table></figure><p>安装ipvsadm（用于查看lvs转发及代理情况的工具）</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">$ yum <span class="hljs-keyword">install</span> ipvsadm -y<br></code></pre></td></tr></table></figure><p>查看统计</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-comment">#查看当前配置的虚拟服务和各个RS的权重</span><br><span class="hljs-variable">$ </span>ipvsadm -Ln<br><span class="hljs-comment">#查看当前ipvs模块中记录的连接（可用于观察转发情况）</span><br><span class="hljs-variable">$ </span>ipvsadm -lnc<br><span class="hljs-comment">#查看ipvs模块的转发情况统计</span><br><span class="hljs-variable">$ </span>ipvsadm -Ln --stats | --rate<br></code></pre></td></tr></table></figure><p>lvs超时配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">查看lvs的超时时间</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">ipvsadm -L --<span class="hljs-built_in">timeout</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">优化连接超时时间</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">ipvsadm --<span class="hljs-built_in">set</span> 1 10 300</span><br></code></pre></td></tr></table></figure><p>lvs监控真实服务测试</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-comment">#查看最新的虚拟ip对应的RealServer的情况</span><br><span class="hljs-variable">$ </span>ipvsadm -l<br></code></pre></td></tr></table></figure><p>配置Keepalived</p><blockquote><p>配置Master</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> /etc/keepalived</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">备份默认的keepalived配置</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">mv</span> keepalived.conf keepalived-back.conf</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">vim keepalived.conf</span><br></code></pre></td></tr></table></figure><p>添加以下配置:</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs tap">global_defs &#123;<br>   <span class="hljs-comment"># 这里配置只能发送邮件到本机</span><br>   notification_email &#123;<br>         root@localhost<br>   &#125;<br>   notification_email_from root@localhost<br>   smtp_server 127.0.0.1<br>   smtp_connection_timeout 30<br>   router_id LVS_DEVEL  <span class="hljs-comment"># 设置lvs的id，在一个网络内应该是唯一的</span><br>&#125;<br>vrrp_instance VI_1 &#123;<br>    state MASTER   <span class="hljs-comment">#指定Keepalived的角色，MASTER为主，BACKUP为备 记得大写</span><br>    interface ens33  <span class="hljs-comment">#网卡id 不同的电脑网卡id会有区别 可以使用:ip a查看</span><br>    virtual_router_id<span class="hljs-number"> 51 </span> <span class="hljs-comment">#虚拟路由编号，主备要一致</span><br>    priority<span class="hljs-number"> 100 </span> <span class="hljs-comment">#定义优先级，数字越大，优先级越高，主DR必须大于备用DR</span><br>    advert_int<span class="hljs-number"> 1 </span> <span class="hljs-comment">#检查间隔，默认为1s</span><br>    authentication &#123;   <span class="hljs-comment">#这里配置的密码最多为8位，主备要一致，否则无法正常通讯</span><br>        auth_type PASS<br>        auth_pass 159357<br>    &#125;<br>    virtual_ipaddress &#123;<br>        192.168.80.80  <span class="hljs-comment">#定义虚拟IP(VIP)为192.168.1.200，可多设，每行一个</span><br>    &#125;<br>&#125;<br><span class="hljs-comment"># 定义对外提供服务的LVS的VIP以及port</span><br>virtual_server 192.168.80.80<span class="hljs-number"> 80 </span>&#123;<br>    delay_loop<span class="hljs-number"> 6 </span><span class="hljs-comment"># 设置健康检查时间，单位是秒</span><br>    lb_algo rr <span class="hljs-comment"># 设置负载调度的算法为wlc</span><br>    lb_kind DR <span class="hljs-comment"># 设置LVS实现负载的机制，有NAT、TUN、DR三个模式</span><br>    nat_mask 255.255.255.0<br>    persistence_timeout 0<br>    protocol TCP<br>    real_server 192.168.80.128<span class="hljs-number"> 80 </span>&#123;  <span class="hljs-comment"># 指定real server1的IP地址</span><br>        weight<span class="hljs-number"> 3 </span>  <span class="hljs-comment"># 配置节点权值，数字越大权重越高</span><br>        TCP_CHECK &#123;<br>        connect_timeout 10<br>        nb_get_retry 3<br>        delay_before_retry 3<br>        connect_port 80<br>        &#125;<br>    &#125;<br>    real_server 192.168.80.129<span class="hljs-number"> 80 </span>&#123;  <span class="hljs-comment"># 指定real server2的IP地址</span><br>        weight<span class="hljs-number"> 3 </span> <span class="hljs-comment"># 配置节点权值，数字越大权重越高</span><br>        TCP_CHECK &#123;<br>        connect_timeout 10<br>        nb_get_retry 3<br>        delay_before_retry 3<br>        connect_port 80<br>        &#125;<br>     &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>配置Backup</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> /etc/keepalived</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">备份默认的keepalived配置</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">mv</span> keepalived.conf keepalived-back.conf</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">vim keepalived.conf</span><br></code></pre></td></tr></table></figure><p>添加以下配置:</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs tap">global_defs &#123;<br>   <span class="hljs-comment"># 这里配置只能发送邮件到本机</span><br>   notification_email &#123;<br>         root@localhost<br>   &#125;<br>   notification_email_from root@localhost<br>   smtp_server 127.0.0.1<br>   smtp_connection_timeout 30<br>   router_id LVS_DEVEL  <span class="hljs-comment"># 设置lvs的id，在一个网络内应该是唯一的</span><br>&#125;<br>vrrp_instance VI_1 &#123;<br>    state BACKUP   <span class="hljs-comment">#指定Keepalived的角色，MASTER为主，BACKUP为备 记得大写</span><br>    interface ens33  <span class="hljs-comment">#网卡id 不同的电脑网卡id会有区别 可以使用:ip a查看</span><br>    nopreempt <span class="hljs-comment">#不与主机MASTER抢占VIP资源</span><br>    virtual_router_id<span class="hljs-number"> 51 </span> <span class="hljs-comment">#虚拟路由编号，主备要一致</span><br>    priority<span class="hljs-number"> 90 </span><span class="hljs-comment">#定义优先级，数字越大，优先级越高，主DR必须大于备用DR</span><br>    advert_int<span class="hljs-number"> 1 </span> <span class="hljs-comment">#检查间隔，默认为1s</span><br>    authentication &#123;   <span class="hljs-comment">#这里配置的密码最多为8位，主备要一致，否则无法正常通讯</span><br>        auth_type PASS<br>        auth_pass 159357<br>    &#125;<br>    virtual_ipaddress &#123;<br>        192.168.80.80  <span class="hljs-comment">#定义虚拟IP(VIP)为192.168.1.200，可多设，每行一个</span><br>    &#125;<br>&#125;<br><span class="hljs-comment"># 定义对外提供服务的LVS的VIP以及port</span><br>virtual_server 192.168.80.80<span class="hljs-number"> 80 </span>&#123;<br>    delay_loop<span class="hljs-number"> 6 </span><span class="hljs-comment"># 设置健康检查时间，单位是秒</span><br>    lb_algo rr <span class="hljs-comment"># 设置负载调度的算法为wlc</span><br>    lb_kind DR <span class="hljs-comment"># 设置LVS实现负载的机制，有NAT、TUN、DR三个模式</span><br>    nat_mask 255.255.255.0<br>    persistence_timeout 0<br>    protocol TCP<br>    real_server 192.168.80.128<span class="hljs-number"> 80 </span>&#123;  <span class="hljs-comment"># 指定real server1的IP地址</span><br>        weight<span class="hljs-number"> 3 </span>  <span class="hljs-comment"># 配置节点权值，数字越大权重越高</span><br>        TCP_CHECK &#123;<br>        connect_timeout 10<br>        nb_get_retry 3<br>        delay_before_retry 3<br>        connect_port 80<br>        &#125;<br>    &#125;<br>    real_server 192.168.80.129<span class="hljs-number"> 80 </span>&#123;  <span class="hljs-comment"># 指定real server2的IP地址</span><br>        weight<span class="hljs-number"> 3 </span> <span class="hljs-comment"># 配置节点权值，数字越大权重越高</span><br>        TCP_CHECK &#123;<br>        connect_timeout 10<br>        nb_get_retry 3<br>        delay_before_retry 3<br>        connect_port 80<br>        &#125;<br>     &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>配置Keepalived出现问题时发送邮件</p><p>编写脚本sendmail.pl放在&#x2F;etc&#x2F;keepalived 中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> /etc/keepalived</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">vim sendmail.pl</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">chmod</span> 755 sendmail.pl</span><br></code></pre></td></tr></table></figure><p>添加如下内容：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs clean">#!/usr/bin/perl -w  <br>use Net::SMTP_auth;  <br>use strict;  <br>my $mailhost = <span class="hljs-string">&#x27;smtp.163.com&#x27;</span>;  <br>my $mailfrom = <span class="hljs-string">&#x27;email@163.com&#x27;</span>;  <br>my @mailto   = (<span class="hljs-string">&#x27;email@163.com&#x27;</span>);  <br>my $subject  = <span class="hljs-string">&#x27;keepalived up on backup&#x27;</span>;  <br>my $text = <span class="hljs-string">&quot;Keepalived服务器宕机！&quot;</span>;    <br>my $user   = <span class="hljs-string">&#x27;email@163.com&#x27;</span>;  <br>my $passwd = <span class="hljs-string">&#x27;*******&#x27;</span>;   #注意是要填写客户端授权的密码<br>&amp;SendMail();  <br>##############################  <br># Send notice mail  <br>##############################  <br>sub SendMail() &#123;  <br>    my $smtp = Net::SMTP_auth-&gt;new( $mailhost, Timeout =&gt; <span class="hljs-number">120</span>, Debug =&gt; <span class="hljs-number">1</span> )  <br>      or die <span class="hljs-string">&quot;Error.\n&quot;</span>;  <br>    $smtp-&gt;auth( <span class="hljs-string">&#x27;LOGIN&#x27;</span>, $user, $passwd );  <br>    foreach my $mailto (@mailto) &#123;  <br>        $smtp-&gt;mail($mailfrom);  <br>        $smtp-&gt;to($mailto);  <br>        $smtp-&gt;data();  <br>        $smtp-&gt;datasend(<span class="hljs-string">&quot;To: $mailto\n&quot;</span>);  <br>        $smtp-&gt;datasend(<span class="hljs-string">&quot;From:$mailfrom\n&quot;</span>);  <br>        $smtp-&gt;datasend(<span class="hljs-string">&quot;Subject: $subject\n&quot;</span>);  <br>        $smtp-&gt;datasend(<span class="hljs-string">&quot;\n&quot;</span>);  <br>        $smtp-&gt;datasend(<span class="hljs-string">&quot;$text\n\n&quot;</span>);   <br>        $smtp-&gt;dataend();  <br>    &#125;  <br>    $smtp-&gt;quit;  <br>&#125;  <br></code></pre></td></tr></table></figure><p>Keepalived配置文件修改内容，注：我把脚本放到了与配置文件同级目录下，添加一段：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs tap">global_defs &#123;<br>   <span class="hljs-comment"># 这里配置只能发送邮件到本机</span><br>   notification_email &#123;<br>         root@localhost<br>   &#125;<br>   notification_email_from root@localhost<br>   smtp_server 127.0.0.1<br>   smtp_connection_timeout 30<br>   router_id LVS_DEVEL  <span class="hljs-comment"># 设置lvs的id，在一个网络内应该是唯一的</span><br>&#125;<br><br>vrrp_script chk_nginx &#123;<br>    script &quot;/etc/keepalived/ck_ng.sh&quot;<br>    interval 2<br>    weight -5<br>    fall 3<br>    rise 2<br>&#125;<br><br>vrrp_sync_group VG_1 &#123;<br>   group &#123;<br>      VI_1<br>&#125;<br> <span class="hljs-comment">#节点变为master时执行</span><br> notify_master /etc/keepalived/sendmail.pl<br>&#125;<br><br>vrrp_instance VI_1 &#123;<br>    state MASTER   <span class="hljs-comment">#指定Keepalived的角色，MASTER为主，BACKUP为备 记得大写</span><br>    interface ens33  <span class="hljs-comment">#网卡id 不同的电脑网卡id会有区别 可以使用:ip a查看</span><br>    virtual_router_id<span class="hljs-number"> 51 </span> <span class="hljs-comment">#虚拟路由编号，主备要一致</span><br>    priority<span class="hljs-number"> 100 </span> <span class="hljs-comment">#定义优先级，数字越大，优先级越高，主DR必须大于备用DR</span><br>    advert_int<span class="hljs-number"> 1 </span> <span class="hljs-comment">#检查间隔，默认为1s</span><br>    authentication &#123;   <span class="hljs-comment">#这里配置的密码最多为8位，主备要一致，否则无法正常通讯</span><br>        auth_type PASS<br>        auth_pass 159357<br>    &#125;<br>    virtual_ipaddress &#123;<br>        192.168.80.80  <span class="hljs-comment">#定义虚拟IP(VIP)为192.168.1.200，可多设，每行一个</span><br>    &#125;<br>&#125;<br><span class="hljs-comment"># 定义对外提供服务的LVS的VIP以及port</span><br>virtual_server 192.168.80.80<span class="hljs-number"> 80 </span>&#123;<br>    delay_loop<span class="hljs-number"> 6 </span><span class="hljs-comment"># 设置健康检查时间，单位是秒</span><br>    lb_algo rr <span class="hljs-comment"># 设置负载调度的算法为wlc</span><br>    lb_kind DR <span class="hljs-comment"># 设置LVS实现负载的机制，有NAT、TUN、DR三个模式</span><br>    nat_mask 255.255.255.0<br>    persistence_timeout 0<br>    protocol TCP<br>    real_server 192.168.80.128<span class="hljs-number"> 80 </span>&#123;  <span class="hljs-comment"># 指定real server1的IP地址</span><br>        weight<span class="hljs-number"> 3 </span>  <span class="hljs-comment"># 配置节点权值，数字越大权重越高</span><br>        TCP_CHECK &#123;<br>        connect_timeout 10<br>        nb_get_retry 3<br>        delay_before_retry 3<br>        connect_port 80<br>        &#125;<br>    &#125;<br>    real_server 192.168.80.129<span class="hljs-number"> 80 </span>&#123;  <span class="hljs-comment"># 指定real server2的IP地址</span><br>        weight<span class="hljs-number"> 3 </span> <span class="hljs-comment"># 配置节点权值，数字越大权重越高</span><br>        TCP_CHECK &#123;<br>        connect_timeout 10<br>        nb_get_retry 3<br>        delay_before_retry 3<br>        connect_port 80<br>        &#125;<br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可进入该脚本目录，直接执行脚本，看看是否发送邮件成功；若失败，安装Net::SMTP_auth模块 ，安装方法：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>yum -y install perl-<span class="hljs-title class_">CPAN</span> <br><br><span class="hljs-variable">$ </span>perl -<span class="hljs-title class_">MCPAN</span> -e shell<br><br>capn &gt; install <span class="hljs-title class_">Net</span>::<span class="hljs-title class_">SMTP_auth</span><br></code></pre></td></tr></table></figure><blockquote><p>Nginx源码包安装</p></blockquote><p>安装c++依赖库</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">$ yum install</span> <span class="hljs-literal">-</span><span class="hljs-comment">y gcc</span><span class="hljs-literal">-</span><span class="hljs-comment">c</span><span class="hljs-literal">++</span><br></code></pre></td></tr></table></figure><p>下载依赖文件压缩包</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ cd /data<br><br>$ wget http:<span class="hljs-regexp">//</span>nginx.org<span class="hljs-regexp">/download/</span>nginx-<span class="hljs-number">1.16</span>.<span class="hljs-number">1</span>.tar.gz<br><br>$ wget http:<span class="hljs-regexp">//</span>www.openssl.org<span class="hljs-regexp">/source/</span>openssl-<span class="hljs-number">1.1</span>.<span class="hljs-number">0</span>f.tar.gz<br><br>$ wget http:<span class="hljs-regexp">//</span>zlib.NET/zlib-<span class="hljs-number">1.2</span>.<span class="hljs-number">11</span>.tar.gz<br><br>$ wget ftp:<span class="hljs-regexp">//</span>ftp.csx.cam.ac.uk<span class="hljs-regexp">/pub/</span>software<span class="hljs-regexp">/programming/</span>pcre/pcre-<span class="hljs-number">8.40</span>.tar.gz<br></code></pre></td></tr></table></figure><p>解压资源</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> <span class="hljs-built_in">cd</span> /<span class="hljs-keyword">data</span><br><br><span class="hljs-variable">$</span> tar <span class="hljs-literal">-xf</span> zlib<span class="hljs-literal">-1</span>.<span class="hljs-number">2.11</span>.tar.gz<br><br><span class="hljs-variable">$</span> tar <span class="hljs-literal">-xf</span> openssl<span class="hljs-literal">-1</span>.<span class="hljs-number">1.0</span>f.tar.gz<br><br><span class="hljs-variable">$</span> tar <span class="hljs-literal">-xf</span> pcre<span class="hljs-literal">-8</span>.<span class="hljs-number">40</span>.tar.gz<br><br><span class="hljs-variable">$</span> tar <span class="hljs-literal">-xf</span> nginx<span class="hljs-literal">-1</span>.<span class="hljs-number">12.1</span>.tar.gz<br></code></pre></td></tr></table></figure><p>设置权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">chown</span> -R root:root ./data</span><br></code></pre></td></tr></table></figure><blockquote><p>编译安装</p></blockquote><p>安装zlib</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> /data/zlib-1.2.11/</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./configure</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">make &amp;&amp; make install</span><br></code></pre></td></tr></table></figure><p>安装openssl(用于配置ssl证书)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> /data/openssl-1.1.0f/</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">./config</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">make &amp;&amp; make install</span><br></code></pre></td></tr></table></figure><p>安装pcre</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> /data/pcre-8.40/</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./configure</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">make &amp;&amp; make install</span><br></code></pre></td></tr></table></figure><p>安装nginx</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ cd <span class="hljs-regexp">/data/</span>nginx-<span class="hljs-number">1.16</span>.<span class="hljs-number">1</span>/<br><br>$ .<span class="hljs-regexp">/configure --prefix=/u</span>sr<span class="hljs-regexp">/local/</span>nginx --with-http_ssl_module --with-http_stub_status_module --with-pcre=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/src/</span>pcre-<span class="hljs-number">8.40</span> --with-zlib=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/src/</span>zlib-<span class="hljs-number">1.2</span>.<span class="hljs-number">11</span> --with-openssl=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/src/</span>openssl-<span class="hljs-number">1.1</span>.<span class="hljs-number">0</span>f<br><br>$ make &amp;&amp; make install<br></code></pre></td></tr></table></figure><blockquote><p>Nginx系统自带安装包安装</p></blockquote><p>查看gcc相关的安装包</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>yum list gcc*<br></code></pre></td></tr></table></figure><p>安装依赖包</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nsis">$ yum install -y gcc-c++ openssl openssl-devel <span class="hljs-literal">zlib</span> <span class="hljs-literal">zlib</span>-devel pcre pcre-devel<br></code></pre></td></tr></table></figure><p>下载nginx</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> <span class="hljs-built_in">cd</span> /<span class="hljs-keyword">data</span><br><br><span class="hljs-variable">$</span> <span class="hljs-built_in">wget</span> http://nginx.org/download/nginx<span class="hljs-literal">-1</span>.<span class="hljs-number">16.1</span>.tar.gz<br></code></pre></td></tr></table></figure><p>安装nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> /data</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">tar -zxvf nginx-1.16.1.tar.gz</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> /nginx-1.16.1</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./configure --prefix=/usr/local/nginx --with-http_ssl_module --with-http_stub_status_module</span> <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">make &amp;&amp; make install</span><br></code></pre></td></tr></table></figure><p>配置Nginx开机自启</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ vim <span class="hljs-regexp">/etc/i</span>nit.d/nginx<br></code></pre></td></tr></table></figure><p>添加配置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># chkconfig: - 85 15</span><br><span class="hljs-comment"># description: Nginx is a World Wide Web server.</span><br><span class="hljs-comment"># processname: nginx</span><br><br>nginx=/usr/local/nginx/sbin/nginx<br>conf=/usr/local/nginx/conf/nginx.conf<br><span class="hljs-keyword">case</span> <span class="hljs-variable">$1</span> <span class="hljs-keyword">in</span><br>start)<br><span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;Starting Nginx&quot;</span><br><span class="hljs-variable">$nginx</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot; done&quot;</span><br>;;<br>stop)<br><span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;Stopping Nginx&quot;</span><br><span class="hljs-variable">$nginx</span> -s stop<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot; done&quot;</span><br>;;<br><span class="hljs-built_in">test</span>)<br><span class="hljs-variable">$nginx</span> -t -c <span class="hljs-variable">$conf</span><br>;;<br>reload)<br><span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;Reloading Nginx&quot;</span><br><span class="hljs-variable">$nginx</span> -s reload<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot; done&quot;</span><br>;;<br>restart)<br>sh <span class="hljs-variable">$0</span> stop<br>sh <span class="hljs-variable">$0</span> start<br>;;<br>show)<br>ps -aux|grep nginx<br>;;<br>*)<br><span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;Usage: <span class="hljs-variable">$0</span> &#123;start|restart|reload|stop|test|show&#125;&quot;</span><br>;;<br><span class="hljs-keyword">esac</span><br></code></pre></td></tr></table></figure><p>配置文件nginx的权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">chmod</span> 755 /etc/init.d/nginx</span><br></code></pre></td></tr></table></figure><p>设置开机自启动</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">$ chkconfig nginx <span class="hljs-keyword">on</span><br></code></pre></td></tr></table></figure><blockquote><p>配置防火墙方式一（弃用firewalld使用iptables）</p></blockquote><p>停止和禁用firewalld</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">$ systemctl <span class="hljs-keyword">stop</span> firewalld &amp;&amp; systemctl <span class="hljs-keyword">disable</span> firewalld<br></code></pre></td></tr></table></figure><p>安装iptables相关组件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> yum install <span class="hljs-literal">-y</span> iptables<span class="hljs-literal">-services</span> iptables<span class="hljs-literal">-devel</span>.x86_64 iptables.x86_64<br><br><span class="hljs-variable">$</span> systemctl enable iptables <span class="hljs-comment">#启用iptables</span><br><br><span class="hljs-variable">$</span> systemctl <span class="hljs-built_in">start</span> iptables  <span class="hljs-comment">#启动iptables</span><br><br><span class="hljs-variable">$</span> systemctl status iptables <span class="hljs-comment">#查看iptables状态</span><br></code></pre></td></tr></table></figure><blockquote><p>&#x3D;&#x3D;192.168.80.128&#x3D;&#x3D; 和 &#x3D;&#x3D;192.168.80.129&#x3D;&#x3D;配置防火墙</p></blockquote><p>keepalived服务器下的配置</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ vim <span class="hljs-regexp">/etc/</span>sysconfig/iptables<br><br><span class="hljs-comment">#允许vrrp多播心跳(如果防火墙开启，这里不配置这个，就会出现裂脑)</span><br>-I INPUT -p vrrp -j ACCEPT<br><span class="hljs-comment">#开启80端口的访问(如果防火墙开启，不配置这个，vip的80端口将无法正常访问)</span><br>-I INPUT -p tcp --dport <span class="hljs-number">80</span> -j ACCEPT<br></code></pre></td></tr></table></figure><p>nginx服务器下配置</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pf"><span class="hljs-comment">#nginx默认监听的80端口 这里直接开启80端口的外网访问(不开启外网将无法正常反问对应服务器的nginx)</span><br>-A INPUT -p tcp -m <span class="hljs-keyword">state</span> --state NEW -m tcp --dport <span class="hljs-number">80</span> -j ACCEPT<br></code></pre></td></tr></table></figure><p>重启防火墙</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">systemctl <span class="hljs-built_in">restart</span> iptables.service<br></code></pre></td></tr></table></figure><blockquote><p>配置防火墙方式一（禁用防火墙，生产环境不推荐）</p></blockquote><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino">$ systemctl stop iptables.service<br><br>$ systemctl stop firewalld<br></code></pre></td></tr></table></figure><p>配置Nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> /etc/init.d/</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">vim realserver</span><br></code></pre></td></tr></table></figure><p>添加如下配置</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#虚拟的vip 根据自己的实际情况定义</span><br>SNS_VIP=<span class="hljs-number">192.168</span>.<span class="hljs-number">80.80</span><br><span class="hljs-regexp">/etc/</span>rc.d<span class="hljs-regexp">/init.d/</span>functions<br>case <span class="hljs-string">&quot;$1&quot;</span> <span class="hljs-keyword">in</span><br>start)<br>       ifconfig lo:<span class="hljs-number">0</span> <span class="hljs-variable">$SNS_VIP</span> netmask <span class="hljs-number">255.255</span>.<span class="hljs-number">255.255</span> broadcast <span class="hljs-variable">$SNS_VIP</span><br>       <span class="hljs-regexp">/sbin/</span>route add -host <span class="hljs-variable">$SNS_VIP</span> dev lo:<span class="hljs-number">0</span><br>       echo <span class="hljs-string">&quot;1&quot;</span> &gt;<span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/net/i</span>pv4<span class="hljs-regexp">/conf/</span>lo/arp_ignore<br>       echo <span class="hljs-string">&quot;2&quot;</span> &gt;<span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/net/i</span>pv4<span class="hljs-regexp">/conf/</span>lo/arp_announce<br>       echo <span class="hljs-string">&quot;1&quot;</span> &gt;<span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/net/i</span>pv4<span class="hljs-regexp">/conf/</span>all/arp_ignore<br>       echo <span class="hljs-string">&quot;2&quot;</span> &gt;<span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/net/i</span>pv4<span class="hljs-regexp">/conf/</span>all/arp_announce<br>       sysctl -p &gt;<span class="hljs-regexp">/dev/</span>null <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span><br>       echo <span class="hljs-string">&quot;RealServer Start OK&quot;</span><br>       ;;<br>stop)<br>       ifconfig lo:<span class="hljs-number">0</span> down<br>       route del <span class="hljs-variable">$SNS_VIP</span> &gt;<span class="hljs-regexp">/dev/</span>null <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span><br>       echo <span class="hljs-string">&quot;0&quot;</span> &gt;<span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/net/i</span>pv4<span class="hljs-regexp">/conf/</span>lo/arp_ignore<br>       echo <span class="hljs-string">&quot;0&quot;</span> &gt;<span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/net/i</span>pv4<span class="hljs-regexp">/conf/</span>lo/arp_announce<br>       echo <span class="hljs-string">&quot;0&quot;</span> &gt;<span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/net/i</span>pv4<span class="hljs-regexp">/conf/</span>all/arp_ignore<br>       echo <span class="hljs-string">&quot;0&quot;</span> &gt;<span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/net/i</span>pv4<span class="hljs-regexp">/conf/</span>all/arp_announce<br>       echo <span class="hljs-string">&quot;RealServer Stoped&quot;</span><br>       ;;<br>*)<br>       echo <span class="hljs-string">&quot;Usage: $0 &#123;start|stop&#125;&quot;</span><br>       <span class="hljs-keyword">exit</span> <span class="hljs-number">1</span><br>esac<br><span class="hljs-keyword">exit</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>保存并设置脚本的执行权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">chmod</span> 755 /etc/init.d/realserver</span><br></code></pre></td></tr></table></figure><p>因为realserver脚本中用到了&#x2F;etc&#x2F;rc.d&#x2F;init.d&#x2F;functions，所以一并设置权限</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ chmod <span class="hljs-number">755</span> <span class="hljs-regexp">/etc/</span>rc.d<span class="hljs-regexp">/init.d/</span>functions<br></code></pre></td></tr></table></figure><p>执行脚本</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> service realserver <span class="hljs-built_in">start</span><br></code></pre></td></tr></table></figure><p>设置开机自启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">vim /etc/rc.d/rc.local</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">添加如下内容</span><br>exec service realserver start<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看文件操作权限</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">ll /etc/rc.d/rc.local</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">设置文件操作权限</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">chmod</span> +x /etc/rc.d/rc.local</span><br><br>或<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">chmod</span> 755 /etc/rc.d/rc.local</span><br></code></pre></td></tr></table></figure><p>查看是否配置成功</p><p><img src="https://image.focusprogram.top/20191127234906.png"></p><blockquote><p>启动Keepalived</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ <span class="hljs-regexp">/etc/i</span>nit.d/keepalived start <span class="hljs-comment">#启动</span><br><br>$ <span class="hljs-regexp">/etc/i</span>nit.d/keepalived restart <span class="hljs-comment">#重启</span><br><br>$ <span class="hljs-regexp">/etc/i</span>nit.d/keepalived stop <span class="hljs-comment"># 停止</span><br></code></pre></td></tr></table></figure><p>检查主keepalived 启动后的配置情况<br>ip a<br>如果网卡下出现192.168.80.80（VIP）说明主已经启动成功</p><p><img src="https://image.focusprogram.top/20191127235938.png"></p><p>检查备keepalived 启动后的配置情况<br>ip a<br>备服务器的网卡下没有出现192.168.80.80（VIP）的ip，说明备服务正常<br>注:如果这里也出现了VIP，那么说明裂脑了，需要检查防火墙是否配置正确；是否允许了vrrp的多播通讯</p><p><img src="https://image.focusprogram.top/20191128000041.png"></p><blockquote><p>FastDFS集群搭建</p></blockquote><p>&#x3D;&#x3D;192.168.80.130&#x3D;&#x3D; 、&#x3D;&#x3D;192.168.80.131&#x3D;&#x3D; 、&#x3D;&#x3D;192.168.80.132&#x3D;&#x3D; 、&#x3D;&#x3D;192.168.80.133&#x3D;&#x3D; 、<br>&#x3D;&#x3D;192.168.80.134&#x3D;&#x3D; 、 &#x3D;&#x3D;192.168.80.135&#x3D;&#x3D; 上安装FastDFS所需的安装环境</p><p>编译环境</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">yum install git gcc gcc-c++ make <span class="hljs-built_in">auto</span>make <span class="hljs-built_in">auto</span>conf libtool pcre pcre-devel zlib zlib-devel openssl-devel wget vim git -y<br></code></pre></td></tr></table></figure><p>配置防火墙开放相应的端口(禁用firewalld采用iptables配置)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">systemctl stop firewalld &amp;&amp; systemctl <span class="hljs-built_in">disable</span> firewalld</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">yum install -y iptables-services iptables-devel.x86_64 iptables.x86_64</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">vim /etc/sysconfig/iptables</span><br></code></pre></td></tr></table></figure><p>添加如何配置，开放相应的端口</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">-<span class="hljs-selector-tag">A</span> <span class="hljs-selector-tag">INPUT</span> -<span class="hljs-selector-tag">p</span> tcp -m state <span class="hljs-attr">--state</span> NEW -m tcp <span class="hljs-attr">--dport</span> <span class="hljs-number">80</span> -j ACCEPT<br><br>-<span class="hljs-selector-tag">A</span> <span class="hljs-selector-tag">INPUT</span> -<span class="hljs-selector-tag">p</span> tcp -m state <span class="hljs-attr">--state</span> NEW -m tcp <span class="hljs-attr">--dport</span> <span class="hljs-number">22122</span> -j ACCEPT<br><br>-<span class="hljs-selector-tag">A</span> <span class="hljs-selector-tag">INPUT</span> -<span class="hljs-selector-tag">p</span> tcp -m state <span class="hljs-attr">--state</span> NEW -m tcp <span class="hljs-attr">--dport</span> <span class="hljs-number">23000</span> -j ACCEPT<br></code></pre></td></tr></table></figure><p>启用iptables并设置开机自启</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nsis">$ <span class="hljs-params">system</span>ctl start iptables &amp;&amp; <span class="hljs-params">system</span>ctl enable iptables<br></code></pre></td></tr></table></figure><p>查看防火墙对外开放的端口</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>iptables -L -n<br></code></pre></td></tr></table></figure><p>创建下载文件目录和存储文件目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> -p /data/fastdfs/&#123;data,store_path&#125;</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> -p /data/soft &amp;&amp; <span class="hljs-built_in">cd</span> /data/soft</span><br></code></pre></td></tr></table></figure><p>安装libfatscommon</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">clone</span> https://github.com/happyfish100/libfastcommon.git --depth 1</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">$ <span class="hljs-built_in">cd</span> libfastcommon/</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"></span><br><span class="language-bash">./make.sh &amp;&amp; ./make.sh install <span class="hljs-comment">#编译安装</span></span><br></code></pre></td></tr></table></figure><p>安装FastDFS</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> ../ <span class="hljs-comment">#返回上一级目录</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">clone</span> https://github.com/happyfish100/fastdfs.git --depth 1</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> fastdfs/</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./make.sh &amp;&amp; ./make.sh install <span class="hljs-comment">#编译安装</span></span><br></code></pre></td></tr></table></figure><p>配置文件准备</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment">#编写所需文件执行脚本</span><br><br>$ touch <span class="hljs-built_in">config</span>.<span class="hljs-keyword">sh </span>&amp;&amp; chmod <span class="hljs-number">777</span> <span class="hljs-built_in">config</span>.<span class="hljs-keyword">sh </span>&amp;&amp; vim <span class="hljs-built_in">config</span>.<span class="hljs-keyword">sh</span><br></code></pre></td></tr></table></figure><p>#添加如下内容</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#! /bin/bash</span><br><br><span class="hljs-comment">#Tracker文件</span><br>cp <span class="hljs-regexp">/etc/</span>fdfs<span class="hljs-regexp">/tracker.conf.sample /</span>etc<span class="hljs-regexp">/fdfs/</span>tracker.conf<br><br><span class="hljs-comment">#Storage文件</span><br>cp <span class="hljs-regexp">/etc/</span>fdfs<span class="hljs-regexp">/storage.conf.sample /</span>etc<span class="hljs-regexp">/fdfs/</span>storage.conf<br><br><span class="hljs-comment">#客户端文件(测试)</span><br>cp <span class="hljs-regexp">/etc/</span>fdfs<span class="hljs-regexp">/client.conf.sample /</span>etc<span class="hljs-regexp">/fdfs/</span>client.conf<br><br><span class="hljs-comment">#供nginx访问使用</span><br>cp <span class="hljs-regexp">/data/</span>soft<span class="hljs-regexp">/fastdfs/</span>conf<span class="hljs-regexp">/http.conf /</span>etc<span class="hljs-regexp">/fdfs/</span><br><br><span class="hljs-comment">#供nginx访问使用</span><br>cp <span class="hljs-regexp">/data/</span>soft<span class="hljs-regexp">/fastdfs/</span>conf<span class="hljs-regexp">/mime.types /</span>etc<span class="hljs-regexp">/fdfs/</span><br></code></pre></td></tr></table></figure><p>安装fastdfs-nginx-module</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ cd ../ <span class="hljs-comment">#返回上一级目录</span><br><br>$ git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/happyfish100/</span>fastdfs-nginx-module.git --depth <span class="hljs-number">1</span><br><br>$ cp <span class="hljs-regexp">/data/</span>soft<span class="hljs-regexp">/fastdfs-nginx-module/</span>src<span class="hljs-regexp">/mod_fastdfs.conf /</span>etc/fdfs<br></code></pre></td></tr></table></figure><p>安装nginx</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#下载nginx压缩包</span><br>$ wget http:<span class="hljs-regexp">//</span>nginx.org<span class="hljs-regexp">/download/</span>nginx-<span class="hljs-number">1.16</span>.<span class="hljs-number">1</span>.tar.gz<br><br><span class="hljs-comment">#解压</span><br>$ tar -zxvf nginx-<span class="hljs-number">1.16</span>.<span class="hljs-number">1</span>.tar.gz <br><br>$ cd nginx-<span class="hljs-number">1.16</span>.<span class="hljs-number">1</span>/<br><br><span class="hljs-comment">#添加fastdfs-nginx-module模块</span><br>$ .<span class="hljs-regexp">/configure --add-module=/</span>data<span class="hljs-regexp">/soft/</span>fastdfs-nginx-module<span class="hljs-regexp">/src/</span> <br><br><span class="hljs-comment">#编译安装</span><br>$ make &amp;&amp; make install<br></code></pre></td></tr></table></figure><p>Tracker配置</p><p>#服务器ip为 &#x3D;&#x3D;192.168.80.130&#x3D;&#x3D; 、&#x3D;&#x3D;192.168.80.131&#x3D;&#x3D;</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ vim <span class="hljs-regexp">/etc/</span>fdfs/tracker.conf<br><br><span class="hljs-comment">#需要修改的内容如下</span><br>port=<span class="hljs-number">22122</span>  <span class="hljs-comment"># tracker服务器端口（默认22122,一般不修改）</span><br>base_path=<span class="hljs-regexp">/data/</span>fastdfs/data  <span class="hljs-comment"># 存储日志和数据的根目录</span><br></code></pre></td></tr></table></figure><p>Storage配置</p><p>#服务器ip为 &#x3D;&#x3D;192.168.80.132&#x3D;&#x3D; 、&#x3D;&#x3D;192.168.80.133&#x3D;&#x3D; 、&#x3D;&#x3D;192.168.80.134&#x3D;&#x3D; 、&#x3D;&#x3D;192.168.80.135&#x3D;&#x3D;</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ vim /etc/fdfs/storage.conf<br><br><span class="hljs-comment">#需要修改的内容如下</span><br><span class="hljs-attribute">port</span>=23000  # storage服务端口（默认23000,一般不修改）<br><br><span class="hljs-comment"># 数据和日志文件存储根目录</span><br><span class="hljs-attribute">base_path</span>=/data/fastdfs/data<br><br> # 第一个存储目录<br><span class="hljs-attribute">store_path0</span>=/data/fastdfs/store_path<br><span class="hljs-attribute">tracker_server</span>=192.168.80.130:22122  # 服务器1<br><span class="hljs-attribute">tracker_server</span>=192.168.80.131:22122  # 服务器2<br><br><span class="hljs-comment"># http访问文件的端口(默认8888,看情况修改,和nginx中保持一致)</span><br>http.<span class="hljs-attribute">server_port</span>=80  <br></code></pre></td></tr></table></figure><p>client测试</p><p>#服务器ip为 &#x3D;&#x3D;192.168.80.132&#x3D;&#x3D; 、&#x3D;&#x3D;192.168.80.133&#x3D;&#x3D; 、&#x3D;&#x3D;192.168.80.134&#x3D;&#x3D; 、&#x3D;&#x3D;192.168.80.135&#x3D;&#x3D;</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ vim <span class="hljs-regexp">/etc/</span>fdfs/client.conf<br><br><span class="hljs-comment">#需要修改的内容如下</span><br>base_path=<span class="hljs-regexp">/home/m</span>oe/dfs<br>tracker_server=<span class="hljs-number">192.168</span>.<span class="hljs-number">80.130</span>:<span class="hljs-number">22122</span>  <span class="hljs-comment"># 服务器1</span><br>tracker_server=<span class="hljs-number">192.168</span>.<span class="hljs-number">80.131</span>:<span class="hljs-number">22122</span>  <span class="hljs-comment"># 服务器2</span><br><br><span class="hljs-comment">#保存后测试,返回ID表示成功 如：group1/M00/00/00/xx.tar.gz</span><br>fdfs_upload_file <span class="hljs-regexp">/etc/</span>fdfs<span class="hljs-regexp">/client.conf /u</span>sr<span class="hljs-regexp">/local/</span>src/nginx-<span class="hljs-number">1.15</span>.<span class="hljs-number">4</span>.tar.gz<br></code></pre></td></tr></table></figure><p>配置nginx访问</p><p>#服务器ip为 &#x3D;&#x3D;192.168.80.132&#x3D;&#x3D; 、&#x3D;&#x3D;192.168.80.133&#x3D;&#x3D; 、&#x3D;&#x3D;192.168.80.134&#x3D;&#x3D; 、&#x3D;&#x3D;192.168.80.135&#x3D;&#x3D;</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ vim <span class="hljs-regexp">/etc/</span>fdfs/mod_fastdfs.conf<br><br><span class="hljs-comment">#需要修改的内容如下</span><br>tracker_server=<span class="hljs-number">192.168</span>.<span class="hljs-number">80.131</span>:<span class="hljs-number">22122</span>  <span class="hljs-comment"># 服务器1</span><br>tracker_server=<span class="hljs-number">192.168</span>.<span class="hljs-number">80.132</span>:<span class="hljs-number">22122</span>  <span class="hljs-comment"># 服务器2</span><br><br>url_have_group_name=true<br>store_path0=<span class="hljs-regexp">/data/</span>fastdfs/data<br><br><span class="hljs-comment">#配置nginx.config</span><br>$ vim <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>conf/nginx.conf<br><br><span class="hljs-comment">#添加如下配置</span><br>server &#123;<br>    listen       <span class="hljs-number">80</span>;    <span class="hljs-comment">## 该端口为storage.conf中的http.server_port相同</span><br>    server_name  localhost;<br>    location ~<span class="hljs-regexp">/group[0-9]/</span> &#123;<br>        ngx_fastdfs_module;<br>    &#125;<br>    error_page   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /<span class="hljs-number">50</span>x.html;<br>    location = /<span class="hljs-number">50</span>x.html &#123;<br>    root   html;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>配置开机自启</p></blockquote><p>Nginx开机自启</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ vim <span class="hljs-regexp">/etc/i</span>nit.d/nginx<br></code></pre></td></tr></table></figure><p>添加配置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># chkconfig: - 85 15</span><br><span class="hljs-comment"># description: Nginx is a World Wide Web server.</span><br><span class="hljs-comment"># processname: nginx</span><br><br>nginx=/usr/local/nginx/sbin/nginx<br>conf=/usr/local/nginx/conf/nginx.conf<br><span class="hljs-keyword">case</span> <span class="hljs-variable">$1</span> <span class="hljs-keyword">in</span><br>start)<br><span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;Starting Nginx&quot;</span><br><span class="hljs-variable">$nginx</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot; done&quot;</span><br>;;<br>stop)<br><span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;Stopping Nginx&quot;</span><br><span class="hljs-variable">$nginx</span> -s stop<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot; done&quot;</span><br>;;<br><span class="hljs-built_in">test</span>)<br><span class="hljs-variable">$nginx</span> -t -c <span class="hljs-variable">$conf</span><br>;;<br>reload)<br><span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;Reloading Nginx&quot;</span><br><span class="hljs-variable">$nginx</span> -s reload<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot; done&quot;</span><br>;;<br>restart)<br>sh <span class="hljs-variable">$0</span> stop<br>sh <span class="hljs-variable">$0</span> start<br>;;<br>show)<br>ps -aux|grep nginx<br>;;<br>*)<br><span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;Usage: <span class="hljs-variable">$0</span> &#123;start|restart|reload|stop|test|show&#125;&quot;</span><br>;;<br><span class="hljs-keyword">esac</span><br></code></pre></td></tr></table></figure><p>配置文件nginx的权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">chmod</span> 755 /etc/init.d/nginx</span><br></code></pre></td></tr></table></figure><p>设置开机自启动</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">$ chkconfig nginx <span class="hljs-keyword">on</span><br></code></pre></td></tr></table></figure><p>FastDFS配置开机自启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">chmod</span> +x /etc/rc.d/rc.local</span> <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">vim /etc/rc.d/rc.local</span><br></code></pre></td></tr></table></figure><p>添加如下命令</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">exec <span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/fdfs_trackerd /</span>etc<span class="hljs-regexp">/fdfs/</span>tracker.conf start<br><br>exec <span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/fdfs_storaged /</span>etc<span class="hljs-regexp">/fdfs/</span>storage.conf start<br></code></pre></td></tr></table></figure><p>操作FastDFS常用命令</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ <span class="hljs-regexp">/etc/i</span>nit.d/fdfs_trackerd start <span class="hljs-comment">#启动tracker服务</span><br>$ <span class="hljs-regexp">/etc/i</span>nit.d/fdfs_trackerd restart <span class="hljs-comment">#重启动tracker服务</span><br>$ <span class="hljs-regexp">/etc/i</span>nit.d/fdfs_trackerd stop <span class="hljs-comment">#停止tracker服务</span><br>$ chkconfig fdfs_trackerd on <span class="hljs-comment">#自启动tracker服务</span><br><br>$ <span class="hljs-regexp">/etc/i</span>nit.d/fdfs_storaged start <span class="hljs-comment">#启动storage服务</span><br>$ <span class="hljs-regexp">/etc/i</span>nit.d/fdfs_storaged restart <span class="hljs-comment">#重动storage服务</span><br>$ <span class="hljs-regexp">/etc/i</span>nit.d/fdfs_storaged stop <span class="hljs-comment">#停止动storage服务</span><br>$ chkconfig fdfs_storaged on <span class="hljs-comment">#自启动storage服务</span><br><br>$ <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>sbin/nginx <span class="hljs-comment">#启动nginx</span><br>$ <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>sbin/nginx -s reload <span class="hljs-comment">#重启nginx</span><br>$ <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>sbin/nginx -s stop <span class="hljs-comment">#停止nginx</span><br></code></pre></td></tr></table></figure><p>检测集群</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ <span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/fdfs_monitor /</span>etc<span class="hljs-regexp">/fdfs/</span>storage.conf<br></code></pre></td></tr></table></figure><p><img src="https://image.focusprogram.top/Tracker-one.png"></p><p><img src="https://image.focusprogram.top/Tracker-two.png"></p><p>客户端测试上传</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gradle">#保存后测试,返回ID表示成功 如：group1<span class="hljs-regexp">/M00/</span><span class="hljs-number">00</span><span class="hljs-regexp">/00/</span>xx.tar.gz<br><br>$ fdfs_upload_file <span class="hljs-regexp">/etc/</span>fdfs<span class="hljs-regexp">/client.conf /</span>data<span class="hljs-regexp">/soft/</span>nginx-<span class="hljs-number">1.16</span>.<span class="hljs-number">1</span>.tar.gz<br><br>$ <span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/fdfs_test /</span>etc<span class="hljs-regexp">/fdfs/</span>client.conf upload <span class="hljs-regexp">/data/</span>soft/nginx-<span class="hljs-number">1.16</span>.<span class="hljs-number">1</span>.tar.gz<br></code></pre></td></tr></table></figure><p><img src="https://image.focusprogram.top/20191130184341.png"></p><p><img src="https://image.focusprogram.top/20191130184409.png"></p><p><img src="https://image.focusprogram.top/20191130184433.png"></p><p><img src="https://image.focusprogram.top/20191130184703.png"></p><p>若四台机器均可正常访问图片,至此两台Tracker+四台Storage正式搭建成功</p><blockquote><p>配置文件访问的负载均衡和高可用</p></blockquote><p>在&#x3D;&#x3D;192.168.80.128&#x3D;&#x3D; 和 &#x3D;&#x3D;192.168.80.129&#x3D;&#x3D;上配置nginx配置文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ vim <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>conf/nginx.conf<br></code></pre></td></tr></table></figure><p>修改配置如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment">#user  nobody;</span><br><span class="hljs-attribute">worker_processes</span>  <span class="hljs-number">1</span>;<br><br><span class="hljs-comment">#error_log  logs/error.log;</span><br><span class="hljs-comment">#error_log  logs/error.log  notice;</span><br><span class="hljs-comment">#error_log  logs/error.log  info;</span><br><br><span class="hljs-comment">#pid        logs/nginx.pid;</span><br><br><br><span class="hljs-section">events</span> &#123;<br>    <span class="hljs-attribute">worker_connections</span>  <span class="hljs-number">1024</span>;<br>&#125;<br><br><span class="hljs-section">http</span> &#123;<br>    <span class="hljs-attribute">include</span>       mime.types;<br>    <span class="hljs-attribute">default_type</span>  application/octet-stream;<br><br>    <span class="hljs-comment">#设置 group1 的服务器</span><br>    <span class="hljs-section">upstream</span> fdfs_group1 &#123;<br>          <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.80.132:80</span> weight=<span class="hljs-number">1</span> max_fails=<span class="hljs-number">2</span> fail_timeout=<span class="hljs-number">30s</span>;<br>          <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.80.133:80</span> weight=<span class="hljs-number">1</span> max_fails=<span class="hljs-number">2</span> fail_timeout=<span class="hljs-number">30s</span>;<br>          <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.80.134:80</span> weight=<span class="hljs-number">1</span> max_fails=<span class="hljs-number">2</span> fail_timeout=<span class="hljs-number">30s</span>;<br>          <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.80.135:80</span> weight=<span class="hljs-number">1</span> max_fails=<span class="hljs-number">2</span> fail_timeout=<span class="hljs-number">30s</span>;<br>    &#125;<br>    <br><br>    <span class="hljs-comment">#log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br>    <span class="hljs-comment">#                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br>    <span class="hljs-comment">#                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><br>    <span class="hljs-comment">#access_log  logs/access.log  main;</span><br><br>    <span class="hljs-attribute">sendfile</span>        <span class="hljs-literal">on</span>;<br>    <span class="hljs-comment">#tcp_nopush     on;</span><br><br>    <span class="hljs-comment">#keepalive_timeout  0;</span><br>    <span class="hljs-attribute">keepalive_timeout</span>  <span class="hljs-number">65</span>;<br><br>    <span class="hljs-comment">#gzip  on;</span><br><br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<br>        <span class="hljs-attribute">server_name</span>  localhost;<br><br>        <span class="hljs-comment">#charset koi8-r;</span><br><br>        <span class="hljs-comment">#access_log  logs/host.access.log  main;</span><br><br>        <span class="hljs-comment">#location / &#123;</span><br>        <span class="hljs-comment">#    root   html;</span><br>        <span class="hljs-comment">#    index  index.html index.htm;</span><br>        <span class="hljs-comment">#&#125;</span><br><br>    <span class="hljs-comment">#设置 group 的负载均衡参数</span><br>    <span class="hljs-section">location</span> /group1/M00 &#123;<br>          <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$host</span>;<br>          <span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>          <span class="hljs-attribute">proxy_pass</span> http://fdfs_group1;<br>    &#125;<br><br>        <span class="hljs-comment">#error_page  404              /404.html;</span><br><br>        <span class="hljs-comment"># redirect server error pages to the static page /50x.html</span><br>        <span class="hljs-comment">#</span><br>        <span class="hljs-attribute">error_page</span>   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /50x.html;<br>        <span class="hljs-section">location</span> = /50x.html &#123;<br>            <span class="hljs-attribute">root</span>   html;<br>        &#125;<br><br>        <span class="hljs-comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br>        <span class="hljs-comment">#</span><br>        <span class="hljs-comment">#location ~ \.php$ &#123;</span><br>        <span class="hljs-comment">#    proxy_pass   http://127.0.0.1;</span><br>        <span class="hljs-comment">#&#125;</span><br><br>        <span class="hljs-comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br>        <span class="hljs-comment">#</span><br>        <span class="hljs-comment">#location ~ \.php$ &#123;</span><br>        <span class="hljs-comment">#    root           html;</span><br>        <span class="hljs-comment">#    fastcgi_pass   127.0.0.1:9000;</span><br>        <span class="hljs-comment">#    fastcgi_index  index.php;</span><br>        <span class="hljs-comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br>        <span class="hljs-comment">#    include        fastcgi_params;</span><br>        <span class="hljs-comment">#&#125;</span><br><br>        <span class="hljs-comment"># deny access to .htaccess files, if Apache&#x27;s document root</span><br>        <span class="hljs-comment"># concurs with nginx&#x27;s one</span><br>        <span class="hljs-comment">#</span><br>        <span class="hljs-comment">#location ~ /\.ht &#123;</span><br>        <span class="hljs-comment">#    deny  all;</span><br>        <span class="hljs-comment">#&#125;</span><br>    &#125;<br><br><br>    <span class="hljs-comment"># another virtual host using mix of IP-, name-, and port-based configuration</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment">#server &#123;</span><br>    <span class="hljs-comment">#    listen       8000;</span><br>    <span class="hljs-comment">#    listen       somename:8080;</span><br>    <span class="hljs-comment">#    server_name  somename  alias  another.alias;</span><br><br>    <span class="hljs-comment">#    location / &#123;</span><br>    <span class="hljs-comment">#        root   html;</span><br>    <span class="hljs-comment">#        index  index.html index.htm;</span><br>    <span class="hljs-comment">#    &#125;</span><br>    <span class="hljs-comment">#&#125;</span><br><br><br>    <span class="hljs-comment"># HTTPS server</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment">#server &#123;</span><br>    <span class="hljs-comment">#    listen       443 ssl;</span><br>    <span class="hljs-comment">#    server_name  localhost;</span><br><br>    <span class="hljs-comment">#    ssl_certificate      cert.pem;</span><br>    <span class="hljs-comment">#    ssl_certificate_key  cert.key;</span><br><br>    <span class="hljs-comment">#    ssl_session_cache    shared:SSL:1m;</span><br>    <span class="hljs-comment">#    ssl_session_timeout  5m;</span><br><br>    <span class="hljs-comment">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br>    <span class="hljs-comment">#    ssl_prefer_server_ciphers  on;</span><br><br>    <span class="hljs-comment">#    location / &#123;</span><br>    <span class="hljs-comment">#        root   html;</span><br>    <span class="hljs-comment">#        index  index.html index.htm;</span><br>    <span class="hljs-comment">#    &#125;</span><br>    <span class="hljs-comment">#&#125;</span><br><br>&#125;<br></code></pre></td></tr></table></figure><p>通过VIP主机访问，访问成功，至此LVS+Keepalived+Nginx+FastDFS高可用集群全部搭建成功</p><p><img src="https://image.focusprogram.top/20191130191442.png"></p><blockquote><p>Fast分组集群</p></blockquote><p>修改&#x3D;&#x3D;192.168.80.132&#x3D;&#x3D; 和 &#x3D;&#x3D;192.168.80.133&#x3D;&#x3D; 的Storage.conf如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">base_path</span>=/data/fastdfs/data<br><span class="hljs-attr">store_path0</span>=/data/fastdfs/store_path<br><span class="hljs-attr">tracker_server</span>=<span class="hljs-number">192.168</span>.<span class="hljs-number">80.130</span>:<span class="hljs-number">22122</span><br><span class="hljs-attr">tracker_server</span>=<span class="hljs-number">192.168</span>.<span class="hljs-number">80.131</span>:<span class="hljs-number">22122</span><br><span class="hljs-attr">group_name</span>=group1<br></code></pre></td></tr></table></figure><p>修改&#x3D;&#x3D;192.168.80.132&#x3D;&#x3D; 和 &#x3D;&#x3D;192.168.80.133&#x3D;&#x3D; 的mod_fastdfs.conf如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">base_path</span>=/data/fastdfs/storage<br><span class="hljs-comment">#保留默认值也可以</span><br><span class="hljs-attr">connect_timeout</span>=<span class="hljs-number">10</span>                       <br><span class="hljs-attr">tracker_server</span>=<span class="hljs-number">192.168</span>.<span class="hljs-number">80.130</span>:<span class="hljs-number">22122</span><br><span class="hljs-attr">tracker_server</span>=<span class="hljs-number">192.168</span>.<span class="hljs-number">80.131</span>:<span class="hljs-number">22122</span><br><span class="hljs-attr">url_have_group_name</span> = <span class="hljs-literal">true</span>                <span class="hljs-comment">#url中是否加上group名</span><br><span class="hljs-attr">store_path0</span>=/data/fastdfs/store_path<br><span class="hljs-attr">group_name</span>=group1                        <span class="hljs-comment">#当前storage所属的组名</span><br><span class="hljs-attr">group_count</span> = <span class="hljs-number">2</span>                    <span class="hljs-comment">#组的数量，示例中共两组：group1、group2</span><br><br><span class="hljs-section">[group1]</span><br><span class="hljs-attr">group_name</span>=group1<br><span class="hljs-attr">storage_server_port</span>=<span class="hljs-number">23000</span><br><span class="hljs-attr">store_path_count</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">store_path0</span>=/data/fastdfs/store_path<br><br><span class="hljs-section">[group2]</span><br><span class="hljs-attr">group_name</span>=group2<br><span class="hljs-attr">storage_server_port</span>=<span class="hljs-number">23000</span><br><span class="hljs-attr">store_path_count</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">store_path0</span>=/data/fastdfs/store_path<br></code></pre></td></tr></table></figure><p>修改&#x3D;&#x3D;192.168.80.134&#x3D;&#x3D; 和 &#x3D;&#x3D;192.168.80.135&#x3D;&#x3D; 的Storage.conf如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">base_path</span>=/data/fastdfs/data<br><span class="hljs-attr">store_path0</span>=/data/fastdfs/store_path<br><span class="hljs-attr">tracker_server</span>=<span class="hljs-number">192.168</span>.<span class="hljs-number">80.130</span>:<span class="hljs-number">22122</span><br><span class="hljs-attr">tracker_server</span>=<span class="hljs-number">192.168</span>.<span class="hljs-number">80.131</span>:<span class="hljs-number">22122</span><br><span class="hljs-attr">group_name</span>=group2<br></code></pre></td></tr></table></figure><p>修改&#x3D;&#x3D;192.168.80.134&#x3D;&#x3D; 和 &#x3D;&#x3D;192.168.80.135&#x3D;&#x3D; 的mod_fastdfs.conf如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">base_path</span>=/data/fastdfs/storage<br><span class="hljs-comment">#保留默认值也可以</span><br><span class="hljs-attr">connect_timeout</span>=<span class="hljs-number">10</span>                       <br><span class="hljs-attr">tracker_server</span>=<span class="hljs-number">192.168</span>.<span class="hljs-number">80.130</span>:<span class="hljs-number">22122</span><br><span class="hljs-attr">tracker_server</span>=<span class="hljs-number">192.168</span>.<span class="hljs-number">80.131</span>:<span class="hljs-number">22122</span><br><span class="hljs-attr">url_have_group_name</span> = <span class="hljs-literal">true</span>                <span class="hljs-comment">#url中是否加上group名</span><br><span class="hljs-attr">store_path0</span>=/data/fastdfs/store_path<br><span class="hljs-attr">group_name</span>=group2                        <span class="hljs-comment">#当前storage所属的组名</span><br><span class="hljs-attr">group_count</span> = <span class="hljs-number">2</span>                    <span class="hljs-comment">#组的数量，示例中共两组：group1、group2</span><br><br><span class="hljs-section">[group1]</span><br><span class="hljs-attr">group_name</span>=group1<br><span class="hljs-attr">storage_server_port</span>=<span class="hljs-number">23000</span><br><span class="hljs-attr">store_path_count</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">store_path0</span>=/data/fastdfs/store_path<br><br><span class="hljs-section">[group2]</span><br><span class="hljs-attr">group_name</span>=group2<br><span class="hljs-attr">storage_server_port</span>=<span class="hljs-number">23000</span><br><span class="hljs-attr">store_path_count</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">store_path0</span>=/data/fastdfs/store_path<br></code></pre></td></tr></table></figure><p>修改&#x3D;&#x3D;192.168.80.128&#x3D;&#x3D; 和 &#x3D;&#x3D;192.168.80.129&#x3D;&#x3D; 的nginx.conf如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><br><span class="hljs-comment">#user  nobody;</span><br><span class="hljs-attribute">worker_processes</span>  <span class="hljs-number">1</span>;<br><br><span class="hljs-comment">#error_log  logs/error.log;</span><br><span class="hljs-comment">#error_log  logs/error.log  notice;</span><br><span class="hljs-comment">#error_log  logs/error.log  info;</span><br><br><span class="hljs-comment">#pid        logs/nginx.pid;</span><br><br><br><span class="hljs-section">events</span> &#123;<br>    <span class="hljs-attribute">worker_connections</span>  <span class="hljs-number">1024</span>;<br>&#125;<br><br><span class="hljs-section">http</span> &#123;<br>    <span class="hljs-attribute">include</span>       mime.types;<br>    <span class="hljs-attribute">default_type</span>  application/octet-stream;<br><br>    <span class="hljs-comment">#设置 group1 的服务器</span><br>    <span class="hljs-section">upstream</span> fdfs_group1 &#123;<br>          <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.80.132:80</span> weight=<span class="hljs-number">1</span> max_fails=<span class="hljs-number">2</span> fail_timeout=<span class="hljs-number">30s</span>;<br>          <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.80.133:80</span> weight=<span class="hljs-number">1</span> max_fails=<span class="hljs-number">2</span> fail_timeout=<span class="hljs-number">30s</span>;<br>    &#125;<br><br>    <span class="hljs-comment">#设置 group1 的服务器</span><br>    <span class="hljs-section">upstream</span> fdfs_group2 &#123;<br>  <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.80.134:80</span> weight=<span class="hljs-number">1</span> max_fails=<span class="hljs-number">2</span> fail_timeout=<span class="hljs-number">30s</span>;<br>  <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.80.135:80</span> weight=<span class="hljs-number">1</span> max_fails=<span class="hljs-number">2</span> fail_timeout=<span class="hljs-number">30s</span>;<br>    &#125;<br>    <br><br>    <span class="hljs-comment">#log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br>    <span class="hljs-comment">#                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br>    <span class="hljs-comment">#                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><br>    <span class="hljs-comment">#access_log  logs/access.log  main;</span><br><br>    <span class="hljs-attribute">sendfile</span>        <span class="hljs-literal">on</span>;<br>    <span class="hljs-comment">#tcp_nopush     on;</span><br><br>    <span class="hljs-comment">#keepalive_timeout  0;</span><br>    <span class="hljs-attribute">keepalive_timeout</span>  <span class="hljs-number">65</span>;<br><br>    <span class="hljs-comment">#gzip  on;</span><br><br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<br>        <span class="hljs-attribute">server_name</span>  <span class="hljs-number">192.168.80.128</span>;<br><br>        <span class="hljs-comment">#charset koi8-r;</span><br><br>        <span class="hljs-comment">#access_log  logs/host.access.log  main;</span><br><br>        <span class="hljs-comment">#location / &#123;</span><br>        <span class="hljs-comment">#    root   html;</span><br>        <span class="hljs-comment">#    index  index.html index.htm;</span><br>        <span class="hljs-comment">#&#125;</span><br><br><span class="hljs-comment">#设置 group1 的负载均衡参数</span><br><span class="hljs-section">location</span> /group1/M00 &#123;<br>      <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$host</span>;<br>      <span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>      <span class="hljs-attribute">proxy_pass</span> http://fdfs_group1;<br>&#125;<br><br><span class="hljs-comment">#设置 group2 的负载均衡参数</span><br><span class="hljs-section">location</span> /group2/M00 &#123;<br>      <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$host</span>;<br>      <span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>      <span class="hljs-attribute">proxy_pass</span> http://fdfs_group2;<br>&#125;<br>                                                          <br><br>        <span class="hljs-comment">#error_page  404              /404.html;</span><br><br>        <span class="hljs-comment"># redirect server error pages to the static page /50x.html</span><br>        <span class="hljs-comment">#</span><br>        <span class="hljs-attribute">error_page</span>   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /50x.html;<br>        <span class="hljs-section">location</span> = /50x.html &#123;<br>            <span class="hljs-attribute">root</span>   html;<br>        &#125;<br><br>        <span class="hljs-comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br>        <span class="hljs-comment">#</span><br>        <span class="hljs-comment">#location ~ \.php$ &#123;</span><br>        <span class="hljs-comment">#    proxy_pass   http://127.0.0.1;</span><br>        <span class="hljs-comment">#&#125;</span><br><br>        <span class="hljs-comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br>        <span class="hljs-comment">#</span><br>        <span class="hljs-comment">#location ~ \.php$ &#123;</span><br>        <span class="hljs-comment">#    root           html;</span><br>        <span class="hljs-comment">#    fastcgi_pass   127.0.0.1:9000;</span><br>        <span class="hljs-comment">#    fastcgi_index  index.php;</span><br>        <span class="hljs-comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br>        <span class="hljs-comment">#    include        fastcgi_params;</span><br>        <span class="hljs-comment">#&#125;</span><br><br>        <span class="hljs-comment"># deny access to .htaccess files, if Apache&#x27;s document root</span><br>        <span class="hljs-comment"># concurs with nginx&#x27;s one</span><br>        <span class="hljs-comment">#</span><br>        <span class="hljs-comment">#location ~ /\.ht &#123;</span><br>        <span class="hljs-comment">#    deny  all;</span><br>        <span class="hljs-comment">#&#125;</span><br>    &#125;<br><br><br>    <span class="hljs-comment"># another virtual host using mix of IP-, name-, and port-based configuration</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment">#server &#123;</span><br>    <span class="hljs-comment">#    listen       8000;</span><br>    <span class="hljs-comment">#    listen       somename:8080;</span><br>    <span class="hljs-comment">#    server_name  somename  alias  another.alias;</span><br><br>    <span class="hljs-comment">#    location / &#123;</span><br>    <span class="hljs-comment">#        root   html;</span><br>    <span class="hljs-comment">#        index  index.html index.htm;</span><br>    <span class="hljs-comment">#    &#125;</span><br>    <span class="hljs-comment">#&#125;</span><br><br><br>    <span class="hljs-comment"># HTTPS server</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment">#server &#123;</span><br>    <span class="hljs-comment">#    listen       443 ssl;</span><br>    <span class="hljs-comment">#    server_name  localhost;</span><br><br>    <span class="hljs-comment">#    ssl_certificate      cert.pem;</span><br>    <span class="hljs-comment">#    ssl_certificate_key  cert.key;</span><br><br>    <span class="hljs-comment">#    ssl_session_cache    shared:SSL:1m;</span><br>    <span class="hljs-comment">#    ssl_session_timeout  5m;</span><br><br>    <span class="hljs-comment">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br>    <span class="hljs-comment">#    ssl_prefer_server_ciphers  on;</span><br><br>    <span class="hljs-comment">#    location / &#123;</span><br>    <span class="hljs-comment">#        root   html;</span><br>    <span class="hljs-comment">#        index  index.html index.htm;</span><br>    <span class="hljs-comment">#    &#125;</span><br>    <span class="hljs-comment">#&#125;</span><br><br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>Nginx追加https模块</p></blockquote><p>查看nginx原有的模块</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>sbin/nginx -V<br></code></pre></td></tr></table></figure><p>添加Https模块</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">$ <span class="hljs-keyword">cd</span> <span class="hljs-string">/data/nginx-1.16.1</span><br><br>$ <span class="hljs-string">./configure</span> <span class="hljs-params">--with-http_stub_status_module</span> <span class="hljs-params">--with-http_ssl_module</span><br></code></pre></td></tr></table></figure><p>编译不覆盖安装</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ make<br><br>$ cp .<span class="hljs-regexp">/objs/</span>nginx <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>sbin/<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Devops</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>FastDFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker+Nginx+FastDFS分布式文件系统搭建</title>
    <link href="/2020/07/11/Docker-Nginx-FastDFS%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%90%AD%E5%BB%BA/"/>
    <url>/2020/07/11/Docker-Nginx-FastDFS%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<p>FastDFS介绍</p><hr><p>1.1   什么是FastDFS</p><p>         FastDFS是用c语言编写的一款开源的分布式文件系统。FastDFS为互联网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。</p><p>1.2   FastDFS架构</p><p>         FastDFS架构包括 Tracker server和Storage server。客户端请求Tracker server进行文件上传、下载，通过Trackerserver调度最终由Storage server完成文件上传和下载。</p><p>         Trackerserver作用是负载均衡和调度，通过Trackerserver在文件上传时可以根据一些策略找到Storageserver提供文件上传服务。可以将tracker称为追踪服务器或调度服务器。</p><p>         Storageserver作用是文件存储，客户端上传的文件最终存储在Storage服务器上，Storage server没有实现自己的文件系统而是利用操作系统 的文件系统来管理文件。可以将storage称为存储服务器。</p><pre><code class="hljs">Tracker 集群FastDFS集群中的Trackerserver可以有多台，Trackerserver之间是相互平等关系同时提供服务，Trackerserver不存在单点故障。客户端请求Trackerserver采用轮询方式，如果请求的tracker无法提供服务则换另一个tracker。Storage 集群Storage集群采用了分组存储方式。storage集群由一个或多个组构成，集群存储总容量为集群中所有组的存储容量之和。一个组由一台或多台存储服务器组成，组内的Storage server之间是平等关系，不同组的Storageserver之间不会相互通信，同组内的Storageserver之间会相互连接进行文件同步，从而保证同组内每个storage上的文件完全一致的。一个组的存储容量为该组内存储服务器容量最小的那个，由此可见组内存储服务器的软硬件配置最好是一致的。采用分组存储方式的好处是灵活、可控性较强。比如上传文件时，可以由客户端直接指定上传到的组也可以由tracker进行调度选择。一个分组的存储服务器访问压力较大时，可以在该组增加存储服务器来扩充服务能力（纵向扩容）。当系统容量不足时，可以增加组来扩充存储容量（横向扩容）。</code></pre><p>搭建FastDFS文件系统</p><hr><p>准备工作-关闭防火墙</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ systemctl stop firewalld &amp; systemctl <span class="hljs-built_in">disable</span> firewalld<br><br>$ vim /etc/sysconfig/selinux<br>  <br>  <span class="hljs-attribute">SELINUX</span>=disabled<br></code></pre></td></tr></table></figure><p>准备工作-编译环境（FastDFS是C语言开发，安装FastDFS需要先将官网下载的源码进行编译，编译依赖gcc环境，如果没有gcc环境，需要安装gcc）</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">$ yum install git gcc gcc-c++ make <span class="hljs-built_in">auto</span>make <span class="hljs-built_in">auto</span>conf libtool pcre pcre-devel zlib zlib-devel openssl-devel wget vim -y<br></code></pre></td></tr></table></figure><p>准备工作-Git</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">$ yum <span class="hljs-keyword">install</span> git<br></code></pre></td></tr></table></figure><p>1.下载镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker search fastdfs</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker pull season/fastdfs</span><br></code></pre></td></tr></table></figure><p>2.创建文件存储目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> -p /data/fdfs</span><br></code></pre></td></tr></table></figure><p>3.安装libfatscommon</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">clone</span> https://github.com/happyfish100/libfastcommon.git --depth 1</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> libfastcommon/</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./make.sh &amp;&amp; ./make.sh install <span class="hljs-comment">#编译安装</span></span><br></code></pre></td></tr></table></figure><p>4.安装FastDFS</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">clone</span> https://github.com/happyfish100/fastdfs.git --depth 1</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> fastdfs/</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./make.sh &amp;&amp; ./make.sh install <span class="hljs-comment">#编译安装</span></span><br></code></pre></td></tr></table></figure><p>5.安装fastdfs-nginx-module</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/happyfish100/</span>fastdfs-nginx-module.git --depth <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>6.安装Nginx</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ wget http:<span class="hljs-regexp">//</span>nginx.org<span class="hljs-regexp">/download/</span>nginx-<span class="hljs-number">1.15</span>.<span class="hljs-number">4</span>.tar.gz <span class="hljs-comment">#下载nginx压缩包</span><br><br>$ tar -zxvf nginx-<span class="hljs-number">1.15</span>.<span class="hljs-number">4</span>.tar.gz <span class="hljs-comment">#解压</span><br><br>$ cd nginx-<span class="hljs-number">1.15</span>.<span class="hljs-number">4</span>/<br><br><span class="hljs-comment">#添加fastdfs-nginx-module模块</span><br>$ .<span class="hljs-regexp">/configure --add-module=/</span>data<span class="hljs-regexp">/fdfs/</span>fastdfs-nginx-module<span class="hljs-regexp">/src/</span> <br><br>$ make &amp;&amp; make install <span class="hljs-comment">#编译安装</span><br><br>$ cd <span class="hljs-regexp">/usr/</span>local 查看nginx是否安装成功，成功则显示nginx目录<br></code></pre></td></tr></table></figure><p>7.创建FastDFS存储目录</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haskell">$ mkdir -p /<span class="hljs-class"><span class="hljs-keyword">data</span>/fdfs/&#123;<span class="hljs-title">tracker_data</span>,<span class="hljs-title">storage_data</span>,<span class="hljs-title">store_path</span>,<span class="hljs-title">fdfs_conf</span>&#125;</span><br></code></pre></td></tr></table></figure><p>8.启动一个临时的tracker 拷贝storage.conf tracker.conf 至&#x2F;var&#x2F;fdfs&#x2F;fdfs_conf</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker run  -d --name tracker  --net=host season/fastdfs tracker<br>docker ps <br><br><span class="hljs-regexp">//</span>查询到容器id<br>docker cp 容器ID:<span class="hljs-regexp">/fdfs_conf/</span>tracker.conf <span class="hljs-regexp">/data/</span>fdfs<span class="hljs-regexp">/fdfs_conf/</span><br>docker cp 容器ID:<span class="hljs-regexp">/fdfs_conf/</span>storage.conf <span class="hljs-regexp">/data/</span>fdfs<span class="hljs-regexp">/fdfs_conf/</span><br></code></pre></td></tr></table></figure><p>9.单机配置</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">tracker配置<br><br>$ vim <span class="hljs-regexp">/etc/</span>fdfs/tracker.conf<br><span class="hljs-comment">#需要修改的内容如下</span><br>port=<span class="hljs-number">22122</span>                  <span class="hljs-comment"># tracker服务器端口（默认22122,一般不修改）</span><br>base_path=<span class="hljs-regexp">/data/</span>fdfs/storage  <span class="hljs-comment"># 存储日志和数据的根目录</span><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">storage配置<br><br>$ vim <span class="hljs-regexp">/etc/</span>fdfs/storage.conf<br><span class="hljs-comment">#需要修改的内容如下</span><br>port=<span class="hljs-number">23000</span>  <span class="hljs-comment"># storage服务端口（默认23000,一般不修改）</span><br>base_path=<span class="hljs-regexp">/data/</span>fdfs/storage  <span class="hljs-comment"># 数据和日志文件存储根目录</span><br>store_path0=<span class="hljs-regexp">/data/</span>fdfs/store_path <span class="hljs-comment"># 第一个存储目录</span><br>tracker_server=<span class="hljs-number">192.168</span>.<span class="hljs-number">199.120</span>:<span class="hljs-number">22122</span>  <span class="hljs-comment"># tracker服务器IP和端口</span><br>http.server_port=<span class="hljs-number">80</span>  <span class="hljs-comment"># http访问文件的端口(默认8888,看情况修改,和nginx中保持一致)</span><br></code></pre></td></tr></table></figure><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gradle">client测试<br><br>vim <span class="hljs-regexp">/etc/</span>fdfs/client.conf<br>#需要修改的内容如下<br>base_path=<span class="hljs-regexp">/fastdfs/</span>storage<br>tracker_server=<span class="hljs-number">192.168</span>.<span class="hljs-number">199.120</span>:<span class="hljs-number">22122</span>    #tracker服务器IP和端口<br>#保存后测试,返回ID表示成功 如：group1<span class="hljs-regexp">/M00/</span><span class="hljs-number">00</span><span class="hljs-regexp">/00/</span>xx.tar.gz<br>fdfs_upload_file <span class="hljs-regexp">/etc/</span>fdfs<span class="hljs-regexp">/client.conf /u</span>sr<span class="hljs-regexp">/local/</span>src/nginx-<span class="hljs-number">1.15</span>.<span class="hljs-number">4</span>.tar.gz<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs awk">配置nginx访问<br><br>vim <span class="hljs-regexp">/etc/</span>fdfs/mod_fastdfs.conf<br><span class="hljs-comment">#需要修改的内容如下</span><br>tracker_server=<span class="hljs-number">192.168</span>.<span class="hljs-number">199.120</span>:<span class="hljs-number">22122</span>  <span class="hljs-comment">#tracker服务器IP和端口</span><br>url_have_group_name=true <span class="hljs-comment">#是否使用group_name为前缀</span><br>store_path0=<span class="hljs-regexp">/data/</span>fdfs/store_path<br><br><span class="hljs-comment">#配置nginx.config</span><br>vim <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>conf/nginx.conf<br><span class="hljs-comment">#添加如下配置</span><br>user root;              <span class="hljs-comment">##配置访问权限</span><br><br>server &#123;<br>    listen       <span class="hljs-number">80</span>;    <span class="hljs-comment">## 该端口为storage.conf中的http.server_port相同</span><br>    server_name  <span class="hljs-number">192.168</span>.<span class="hljs-number">199.120</span>;<br>    <span class="hljs-comment"># location ~/group[0-9]/ &#123;</span><br>      location ~<span class="hljs-regexp">/kongqi/</span>&#123;<br>        root <span class="hljs-regexp">/data/</span>fdfs<span class="hljs-regexp">/storage_path/</span>data;<br>        ngx_fastdfs_module;<br>    &#125;<br>    error_page   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /<span class="hljs-number">50</span>x.html;<br>    location = /<span class="hljs-number">50</span>x.html &#123;<br>    root   html;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>10.分布式部署</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">tracker配置<br><br>vim <span class="hljs-regexp">/etc/</span>fdfs/tracker.conf<br><span class="hljs-comment">#需要修改的内容如下</span><br>port=<span class="hljs-number">22122</span>                  <span class="hljs-comment"># tracker服务器端口（默认22122,一般不修改）</span><br>base_path=<span class="hljs-regexp">/data/</span>fdfs/storage  <span class="hljs-comment"># 存储日志和数据的根目录</span><br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs routeros">storage配置<br><br>vim /etc/fdfs/storage.conf<br><span class="hljs-comment">#需要修改的内容如下</span><br><span class="hljs-attribute">port</span>=23000  # storage服务端口（默认23000,一般不修改）<br><span class="hljs-attribute">base_path</span>=/data/fdfs/storage  # 数据和日志文件存储根目录<br><span class="hljs-attribute">store_path0</span>=/data/fdfs/store_path # 第一个存储目录<br><span class="hljs-attribute">tracker_server</span>=192.168.199.120:22122  # 服务器1<br><span class="hljs-attribute">tracker_server</span>=192.168.199.121:22122  # 服务器2<br><span class="hljs-attribute">tracker_server</span>=192.168.199.122:22122  # 服务器3<br>http.<span class="hljs-attribute">server_port</span>=80  # http访问文件的端口(默认8888,看情况修改,和nginx中保持一致)<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk">client测试<br><br>vim <span class="hljs-regexp">/etc/</span>fdfs/client.conf<br><span class="hljs-comment">#需要修改的内容如下</span><br>base_path=<span class="hljs-regexp">/data/</span>fdfs/store_path  <span class="hljs-comment"># 数据和日志文件存储根目录</span><br>tracker_server=<span class="hljs-number">192.168</span>.<span class="hljs-number">199.120</span>:<span class="hljs-number">22122</span>  <span class="hljs-comment"># 服务器1</span><br>tracker_server=<span class="hljs-number">192.168</span>.<span class="hljs-number">199.121</span>:<span class="hljs-number">22122</span>  <span class="hljs-comment"># 服务器2</span><br>tracker_server=<span class="hljs-number">192.168</span>.<span class="hljs-number">199.122</span>:<span class="hljs-number">22122</span>  <span class="hljs-comment"># 服务器3</span><br><span class="hljs-comment">#保存后测试,返回ID表示成功 如：group1/M00/00/00/xx.tar.gz</span><br>fdfs_upload_file <span class="hljs-regexp">/etc/</span>fdfs<span class="hljs-regexp">/client.conf /u</span>sr<span class="hljs-regexp">/local/</span>src/nginx-<span class="hljs-number">1.15</span>.<span class="hljs-number">4</span>.tar.gz<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs awk">配置nginx访问<br><br>vim <span class="hljs-regexp">/etc/</span>fdfs/mod_fastdfs.conf<br><span class="hljs-comment">#需要修改的内容如下</span><br>tracker_server=<span class="hljs-number">192.168</span>.<span class="hljs-number">199.120</span>:<span class="hljs-number">22122</span>  <span class="hljs-comment"># 服务器1</span><br>tracker_server=<span class="hljs-number">192.168</span>.<span class="hljs-number">199.121</span>:<span class="hljs-number">22122</span>  <span class="hljs-comment"># 服务器2</span><br>tracker_server=<span class="hljs-number">192.168</span>.<span class="hljs-number">199.122</span>:<span class="hljs-number">22122</span>  <span class="hljs-comment"># 服务器3</span><br>url_have_group_name=true<br>store_path0=<span class="hljs-regexp">/data/</span>fdfs/store_path <span class="hljs-comment"># 第一个存储目录</span><br><br><span class="hljs-comment">#配置nginx.config</span><br>vim <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>conf/nginx.conf<br><span class="hljs-comment">#添加如下配置</span><br>user root;              <span class="hljs-comment">##配置访问权限</span><br><br>server &#123;<br>    listen       <span class="hljs-number">80</span>;    <span class="hljs-comment">## 该端口为storage.conf中的http.server_port相同</span><br>    server_name  <span class="hljs-number">192.168</span>.<span class="hljs-number">199.120</span>;<br>    <span class="hljs-comment"># location ~/group[0-9]/ &#123;</span><br>      location ~<span class="hljs-regexp">/kongqi/</span>&#123;<br>        root <span class="hljs-regexp">/data/</span>fdfs<span class="hljs-regexp">/storage_path/</span>data;<br>        ngx_fastdfs_module;<br>    &#125;<br>    error_page   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /<span class="hljs-number">50</span>x.html;<br>    location = /<span class="hljs-number">50</span>x.html &#123;<br>    root   html;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>11.编写配置文件脚本(&#x2F;etc&#x2F;fdfs目录中的所有文件是nginx 整合fastdfs-nginx-module所用到的配置文件)</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#! /bin/bash</span><br><br>cp <span class="hljs-regexp">/data/</span>fdfs<span class="hljs-regexp">/fastdfs-nginx-module/</span>src<span class="hljs-regexp">/mod_fastdfs.conf /</span>etc/fdfs<br><br>cp -r <span class="hljs-regexp">/data/</span>fdfs<span class="hljs-regexp">/fastdfs/</span>conf<span class="hljs-regexp">/* /</span>etc<span class="hljs-regexp">/fdfs/</span><br><br>cp -r <span class="hljs-regexp">/data/</span>fdfs<span class="hljs-regexp">/fdfs_conf/</span>* <span class="hljs-regexp">/etc/</span>fdfs/<br></code></pre></td></tr></table></figure><p>12.docker部署tracker和storage容器</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">运行tracker镜像<br><br>$ docker run -d --name trakcer \<br>  --restart=always \<br>  -v <span class="hljs-regexp">/data/</span>fdfs<span class="hljs-regexp">/fdfs_conf/</span>tracker.conf:<span class="hljs-regexp">/fdfs_conf/</span>tracker.conf \<br>  -v <span class="hljs-regexp">/data/</span>fdfs<span class="hljs-regexp">/tracker_data:/</span>fastdfs<span class="hljs-regexp">/tracker/</span>data \<br>  --net=host season/fastdfs tracker<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">运行storage镜像<br><br>$ docker run -d --name storage \<br>  --restart=always \<br>  -v <span class="hljs-regexp">/data/</span>fdfs<span class="hljs-regexp">/fdfs_conf/</span>storage.conf:<span class="hljs-regexp">/fdfs_conf/</span>storage.conf \<br>  -v <span class="hljs-regexp">/data/</span>fdfs<span class="hljs-regexp">/storage_data:/</span>fastdfs<span class="hljs-regexp">/storage/</span>data \<br>  -v <span class="hljs-regexp">/data/</span>fdfs<span class="hljs-regexp">/store_path:/</span>fastdfs/store_path \<br>  --net=host season/fastdfs storage<br></code></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c">Tracker服务器的端口默认是<span class="hljs-number">22122</span>，你可以查看是否启用端口<br><br>$ netstat -aon <span class="hljs-string">| grep 22122</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">查看tracker容器和storage容器的关联<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker <span class="hljs-built_in">exec</span> -it storage /bin/bash</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> fdfs_conf</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">fdfs_monitor storage.conf</span><br></code></pre></td></tr></table></figure><p>13.运行nginx进行端口监听</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> <span class="hljs-string">/usr/local/nginx/sbin</span><br><br><span class="hljs-string">./nginx</span> <span class="hljs-comment">#启动Nginx</span><br><br><span class="hljs-string">./nginx</span> -s <span class="hljs-keyword">reload</span> <span class="hljs-comment">#重新加载 </span><br><br><span class="hljs-string">./nginx</span> -s stop <span class="hljs-comment">#停止</span><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs awk">设置nginx开机自启动<br><br>新增shell脚本 vi <span class="hljs-regexp">/etc/</span>rc.d<span class="hljs-regexp">/init.d/</span>nginx<br><br><span class="hljs-comment">#!/bin/sh</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#nginx - this script starts and stops the nginx daemin</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># chkconfig: - 85 15</span><br><span class="hljs-comment"># description: Nginx is an HTTP(S) server, HTTP(S) reverse \</span><br><span class="hljs-comment"># proxy and IMAP/POP3 proxy server</span><br><span class="hljs-comment"># processname: nginx</span><br><span class="hljs-comment"># config: /usr/local/nginx/conf/nginx.conf</span><br><span class="hljs-comment"># pidfile: /usr/local/nginx/logs/nginx.pid</span><br><span class="hljs-comment"># Source function library.</span><br>. <span class="hljs-regexp">/etc/</span>rc.d<span class="hljs-regexp">/init.d/</span>functions<br><span class="hljs-comment"># Source networking configuration.</span><br>. <span class="hljs-regexp">/etc/</span>sysconfig/network<br><span class="hljs-comment"># Check that networking is up.</span><br>[ <span class="hljs-string">&quot;$NETWORKING&quot;</span> = <span class="hljs-string">&quot;no&quot;</span> ] &amp;&amp; <span class="hljs-keyword">exit</span> <span class="hljs-number">0</span><br>nginx=<span class="hljs-string">&quot;/usr/local/nginx/sbin/nginx&quot;</span><br>prog=$(basename <span class="hljs-variable">$nginx</span>)<br>NGINX_CONF_FILE=<span class="hljs-string">&quot;/usr/local/nginx/conf/nginx.conf&quot;</span><br>lockfile=<span class="hljs-regexp">/var/</span>lock<span class="hljs-regexp">/subsys/</span>nginx<br>start() &#123;<br>[ -x <span class="hljs-variable">$nginx</span> ] || <span class="hljs-keyword">exit</span> <span class="hljs-number">5</span><br>[ -f <span class="hljs-variable">$NGINX_CONF_FILE</span> ] || <span class="hljs-keyword">exit</span> <span class="hljs-number">6</span><br>echo -n $<span class="hljs-string">&quot;Starting $prog: &quot;</span><br>daemon <span class="hljs-variable">$nginx</span> -c <span class="hljs-variable">$NGINX_CONF_FILE</span><br>retval=$?<br>echo<br>[ <span class="hljs-variable">$retval</span> -eq <span class="hljs-number">0</span> ] &amp;&amp; touch <span class="hljs-variable">$lockfile</span><br>return <span class="hljs-variable">$retval</span><br>&#125;<br>stop() &#123;<br>echo -n $<span class="hljs-string">&quot;Stopping $prog: &quot;</span><br>killproc <span class="hljs-variable">$prog</span> -QUIT<br>retval=$?<br>echo<br>[ <span class="hljs-variable">$retval</span> -eq <span class="hljs-number">0</span> ] &amp;&amp; rm -f <span class="hljs-variable">$lockfile</span><br>return <span class="hljs-variable">$retval</span><br>&#125;<br>restart() &#123;<br>configtest || return $?<br>stop<br>start<br>&#125;<br>reload() &#123;<br>configtest || return $?<br>echo -n $<span class="hljs-string">&quot;Reloading $prog: &quot;</span><br>killproc <span class="hljs-variable">$nginx</span> -HUP<br>RETVAL=$?<br>echo<br>&#125;<br>force_reload() &#123;<br>restart<br>&#125;<br>configtest() &#123;<br><span class="hljs-variable">$nginx</span> -t -c <span class="hljs-variable">$NGINX_CONF_FILE</span><br>&#125;<br>rh_status() &#123;<br>status <span class="hljs-variable">$prog</span><br>&#125;<br>rh_status_q() &#123;<br>rh_status &gt;<span class="hljs-regexp">/dev/</span>null <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span><br>&#125;<br>case <span class="hljs-string">&quot;$1&quot;</span> <span class="hljs-keyword">in</span><br>start)<br>rh_status_q &amp;&amp; <span class="hljs-keyword">exit</span> <span class="hljs-number">0</span><br><span class="hljs-variable">$1</span><br>;;<br>stop)<br>rh_status_q || <span class="hljs-keyword">exit</span> <span class="hljs-number">0</span><br><span class="hljs-variable">$1</span><br>;;<br>restart|configtest)<br><span class="hljs-variable">$1</span><br>;;<br>reload)<br>rh_status_q || <span class="hljs-keyword">exit</span> <span class="hljs-number">7</span><br><span class="hljs-variable">$1</span><br>;;<br>force-reload)<br>force_reload<br>;;<br>status)<br>rh_status<br>;;<br>condrestart|try-restart)<br>rh_status_q || <span class="hljs-keyword">exit</span> <span class="hljs-number">0</span><br>;;<br>*)<br>echo $<span class="hljs-string">&quot;Usage: $0 &#123;start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest&#125;&quot;</span><br><span class="hljs-keyword">exit</span> <span class="hljs-number">2</span><br>esac<br><br>加入系统服务并开机自启动<br><br>chmod +x <span class="hljs-regexp">/etc/</span>rc.d<span class="hljs-regexp">/init.d/</span>nginx （设置可执行权限）<br><br>chkconfig --add nginx （添加系统服务）<br><br>chkconfig --level <span class="hljs-number">35</span> nginx on （开机自启动）<br></code></pre></td></tr></table></figure><p>14.测试是否成功部署</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">199.120</span><span class="hljs-regexp">/kongqi/</span>M00<span class="hljs-regexp">/00/</span><span class="hljs-number">00</span>/wKjHeF27C5KAZdUSAAXmEY7V_qc038.jpg<br></code></pre></td></tr></table></figure><p>15.多级存储目录配置</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk">同时修改此三处的配置<br><br>$ vim <span class="hljs-regexp">/data/</span>fdfs<span class="hljs-regexp">/fdfs_conf/</span>storage.conf<br><br>$ vim vim <span class="hljs-regexp">/etc/</span>fdfs/storage.conf<br><br>$ vim <span class="hljs-regexp">/etc/</span>fdfs/mod_fastdfs.conf<br><br>  store_path_count=<span class="hljs-number">2</span>                 <span class="hljs-comment">#store_path存储路径个数</span><br>  <br>  store_path0=<span class="hljs-regexp">/data/</span>fdfs/store_path  <span class="hljs-comment">#第一个存储目录</span><br>  <br>  store_path1=<span class="hljs-regexp">/data/</span>fdfs/store_path1 <span class="hljs-comment">#第二个存储目录</span><br></code></pre></td></tr></table></figure><p><img src="https://image.focusprogram.top/20191101153906.png"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk">Nginx配置如下：<br><br>        location ~/M00 &#123;<br>           root <span class="hljs-regexp">/data/</span>fdfs<span class="hljs-regexp">/store_path/</span>data;<br>           ngx_fastdfs_module;<br>        &#125;<br><br>        location ~/M01 &#123;<br>           root <span class="hljs-regexp">/data/</span>fdfs<span class="hljs-regexp">/store_path1/</span>data;<br>           ngx_fastdfs_module;<br>        &#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://image.focusprogram.top/20191101154417.png"></p><p>16.批量迁移数据出现问题解决问题</p><p><img src="https://image.focusprogram.top/20191106094507.png"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ vim <span class="hljs-regexp">/data/</span>fdfs<span class="hljs-regexp">/fdfs_conf/</span>storage.conf<br><br>  <span class="hljs-comment"># 修改最大连接数</span><br>  <span class="hljs-comment"># max concurrent connections the server supported</span><br>  <span class="hljs-comment"># default value is 256</span><br>  <span class="hljs-comment"># more max_connections means more memory will be used</span><br>  max_connections=<span class="hljs-number">10000</span><br></code></pre></td></tr></table></figure><p>17.配置防盗链</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">$ vim /etc/fdfs/<span class="hljs-keyword">http</span>.conf<br><br>  <span class="hljs-keyword">http</span>.anti_steal.check_token=<span class="hljs-literal">true</span> <span class="hljs-comment">#是否开启防盗链</span><br>  <br>  <span class="hljs-keyword">http</span>.anti_steal.token_ttl=<span class="hljs-number">86400</span> <span class="hljs-comment">#防盗链失效时间（单位/秒）</span><br>  <br>  <span class="hljs-keyword">http</span>.anti_steal.secret_key=FastDFS1234567890 <span class="hljs-comment">#防盗链秘钥</span><br>  <br>  <span class="hljs-keyword">http</span>.anti_steal.token_check_fail=/etc/fdfs/<span class="hljs-number">404.</span>jpg <span class="hljs-comment">#防盗链检查失败时重定向图片</span><br></code></pre></td></tr></table></figure><p><img src="https://image.focusprogram.top/20191107104236.png"></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">java客户端生成token<br><br>    <span class="hljs-comment">//unix时间戳 以秒为单位</span><br>    <span class="hljs-built_in">int</span> ts = (<span class="hljs-built_in">int</span>) (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>current<span class="hljs-constructor">TimeMillis()</span><span class="hljs-operator"> / </span><span class="hljs-number">1000</span>);<br>    String secret_key = <span class="hljs-string">&quot;FastDFS1234567890&quot;</span>;<br>    String token = <span class="hljs-keyword">new</span> <span class="hljs-constructor">String()</span>;<br>    token = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ProtoCommon</span>.</span></span>get<span class="hljs-constructor">Token(<span class="hljs-params">url</span>, <span class="hljs-params">ts</span>, <span class="hljs-params">secret_key</span>)</span>;<br>    StringBuilder sb = <span class="hljs-keyword">new</span> <span class="hljs-constructor">StringBuilder()</span>;<br>    sb.append(<span class="hljs-string">&quot;http://192.168.199.120/&quot;</span>);<br>    sb.append(url);<br>    sb.append(<span class="hljs-string">&quot;?token=&quot;</span>).append(token);<br>    sb.append(<span class="hljs-string">&quot;&amp;ts=&quot;</span>).append(ts);<br></code></pre></td></tr></table></figure><p><img src="https://image.focusprogram.top/20191107104303.png"></p>]]></content>
    
    
    <categories>
      
      <category>Devops</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>FastDFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分布式锁-基于Zookeeper实现</title>
    <link href="/2020/07/11/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81-%E5%9F%BA%E4%BA%8EZookeeper%E5%AE%9E%E7%8E%B0/"/>
    <url>/2020/07/11/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81-%E5%9F%BA%E4%BA%8EZookeeper%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p><strong>分布式锁-基于Zookeeper实现</strong></p><hr><h1 id="1-Zookeeper安装部署"><a href="#1-Zookeeper安装部署" class="headerlink" title="1. Zookeeper安装部署"></a>1. Zookeeper安装部署</h1><h2 id="1-1-安装部署参考文档"><a href="#1-1-安装部署参考文档" class="headerlink" title="1.1 安装部署参考文档"></a>1.1 安装部署参考文档</h2><p>分布式注册中心-Zookeeper： <a href="https://github.com/FocusProgram/person-improve/tree/main/springcloud-zookeeper">https://github.com/FocusProgram/person-improve/tree/main/springcloud-zookeeper</a></p><h2 id="1-2-Zookeeper客户端工具"><a href="#1-2-Zookeeper客户端工具" class="headerlink" title="1.2 Zookeeper客户端工具"></a>1.2 Zookeeper客户端工具</h2><p>下载地址：<a href="https://issues.apache.org/jira/secure/attachment/12436620/ZooInspector.zip">https://issues.apache.org/jira/secure/attachment/12436620/ZooInspector.zip</a></p><h1 id="2-实现原理"><a href="#2-实现原理" class="headerlink" title="2. 实现原理"></a>2. 实现原理</h1><ul><li>多个JVM同时在根节点下创建临时节点（&#x2F;lock）</li><li>创建临时节点（&#x2F;lock）成功,则获取锁成功，执行响应的逻辑代码</li><li>创建临时节点（&#x2F;lock）失败,则获取锁失败，通过订阅节点删除通知事件，如果节点删除则重新获取锁，否则就一直等待</li><li>执行响应业务逻辑完成后关闭连接，临时节点删除，锁释放</li></ul><h1 id="3-具体实现"><a href="#3-具体实现" class="headerlink" title="3. 具体实现"></a>3. 具体实现</h1><h2 id="3-1-引入Gradle依赖"><a href="#3-1-引入Gradle依赖" class="headerlink" title="3.1 引入Gradle依赖"></a>3.1 引入Gradle依赖</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">dependencies</span> &#123;<br>    <span class="hljs-keyword">compile</span> <span class="hljs-keyword">group</span>: <span class="hljs-string">&#x27;com.101tec&#x27;</span>, name: <span class="hljs-string">&#x27;zkclient&#x27;</span>, version: <span class="hljs-string">&#x27;0.11&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-2-具体业务实现"><a href="#3-2-具体业务实现" class="headerlink" title="3.2 具体业务实现"></a>3.2 具体业务实现</h2><h3 id="3-2-1-创建CustomLock接口"><a href="#3-2-1-创建CustomLock接口" class="headerlink" title="3.2.1 创建CustomLock接口"></a>3.2.1 创建CustomLock接口</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">CustomLock</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取锁</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getLock</span>()</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 释放锁</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">unLock</span>()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-2-创建ZookeeperAbstractLock抽象类"><a href="#3-2-2-创建ZookeeperAbstractLock抽象类" class="headerlink" title="3.2.2 创建ZookeeperAbstractLock抽象类"></a>3.2.2 创建ZookeeperAbstractLock抽象类</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ZookeeperAbstractLock</span> <span class="hljs-title">implements</span> <span class="hljs-title">CustomLock</span> &#123;<br><br>    <span class="hljs-comment">// zk连接地址</span><br>    <span class="hljs-keyword">private</span> String CONNECTSTRING = <span class="hljs-string">&quot;114.55.34.44:2181&quot;</span>;<br><br>    <span class="hljs-comment">// 创建zk连接</span><br>    <span class="hljs-keyword">protected</span> ZkClient zkClient = <span class="hljs-keyword">new</span> ZkClient(CONNECTSTRING);<br><br>    <span class="hljs-comment">// zk节点创建路径目录</span><br>    <span class="hljs-keyword">protected</span> String PATH = <span class="hljs-string">&quot;/lock&quot;</span>;<br><br>    <span class="hljs-comment">// 通过定义计数器标识创建临时节点状态</span><br>    <span class="hljs-keyword">protected</span> CountDownLatch countDownLatch = <span class="hljs-keyword">new</span> CountDownLatch(<span class="hljs-number">1</span>);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取锁</span><br><span class="hljs-comment">     */</span><br>    @Override<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getLock</span>()</span> &#123;<br>        <span class="hljs-keyword">if</span> (tryLock()) &#123;<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;获取lock锁的资源&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 等待</span><br>            waitLock();<br>            <span class="hljs-comment">// 重新获取锁资源</span><br>            getLock();<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 释放锁</span><br><span class="hljs-comment">     */</span><br>    @Override<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">unLock</span>()</span> &#123;<br>        <span class="hljs-keyword">if</span> (zkClient != <span class="hljs-literal">null</span>) &#123;<br>            zkClient.close();<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;释放lock锁资源&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">waitLock</span>()</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> boolean <span class="hljs-title">tryLock</span>()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-3-创建ZookeeperDistrbuteLock抽象类"><a href="#3-2-3-创建ZookeeperDistrbuteLock抽象类" class="headerlink" title="3.2.3 创建ZookeeperDistrbuteLock抽象类"></a>3.2.3 创建ZookeeperDistrbuteLock抽象类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ZookeeperDistrbuteLock</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ZookeeperAbstractLock</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">waitLock</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-type">IZkDataListener</span> <span class="hljs-variable">iZkDataListener</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IZkDataListener</span>() &#123;<br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * 节点发生改变时事件通知</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> dataPath</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> data</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleDataChange</span><span class="hljs-params">(String dataPath, Object data)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>            &#125;<br><br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * 节点删除是事件通知</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> dataPath</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleDataDeleted</span><span class="hljs-params">(String dataPath)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                System.out.println(<span class="hljs-string">&quot;删除的节点路径为&quot;</span> + dataPath);<br>                <span class="hljs-comment">// 唤醒等待的线程</span><br>                <span class="hljs-keyword">if</span> (countDownLatch != <span class="hljs-literal">null</span>) &#123;<br>                    countDownLatch.countDown();<br>                &#125;<br>            &#125;<br>        &#125;;<br><br>        <span class="hljs-comment">//注册监听事件</span><br>        zkClient.subscribeDataChanges(PATH, iZkDataListener);<br><br>        <span class="hljs-keyword">if</span> (zkClient.exists(PATH)) &#123;<br>            countDownLatch = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CountDownLatch</span>(<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">try</span> &#123;<br>                countDownLatch.await();<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//删除监听事件</span><br>        zkClient.unsubscribeDataChanges(PATH, iZkDataListener);<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            zkClient.createEphemeral(PATH);<br>            System.out.println(<span class="hljs-string">&quot;获取lock锁成功&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;获取lock锁失败&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-4-使用Zookeeper实现分布式锁"><a href="#3-2-4-使用Zookeeper实现分布式锁" class="headerlink" title="3.2.4 使用Zookeeper实现分布式锁"></a>3.2.4 使用Zookeeper实现分布式锁</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NumberGenerator</span> &#123;<br><br>    <span class="hljs-comment">// 生成订单号规则</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> <span class="hljs-keyword">count</span> = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">public</span> String getNumber() &#123;<br><span class="hljs-comment">//        try &#123;</span><br><span class="hljs-comment">//            Thread.sleep(200);</span><br><span class="hljs-comment">//        &#125; catch (Exception e) &#123;</span><br><span class="hljs-comment">//            e.printStackTrace();</span><br><span class="hljs-comment">//        &#125;</span><br>        SimpleDateFormat simpleDateFormat = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd-HH-mm-ss&quot;</span>);<br>        <span class="hljs-keyword">return</span> simpleDateFormat.format(<span class="hljs-keyword">new</span> Date()) + <span class="hljs-string">&quot;-&quot;</span> + ++<span class="hljs-keyword">count</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">NumberGenerator</span> numberGenerator = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NumberGenerator</span>();<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">CustomLock</span> customLock = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZookeeperDistrbuteLock</span>();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">run</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title function_">getNumber</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">getNumber</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            customLock.<span class="hljs-title function_">getLock</span>();<br>            <span class="hljs-title class_">String</span> <span class="hljs-built_in">number</span> = numberGenerator.<span class="hljs-title function_">getNumber</span>();<br>            <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-title class_">Thread</span>.<span class="hljs-title function_">currentThread</span>().<span class="hljs-title function_">getName</span>() + <span class="hljs-string">&quot;生成订单号：&quot;</span> + <span class="hljs-built_in">number</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">Exception</span> e) &#123;<br>            e.<span class="hljs-title function_">printStackTrace</span>();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            customLock.<span class="hljs-title function_">unLock</span>();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LockTest</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据cpu的数量动态的配置核心线程数和最大线程数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> CPU_COUNT = Runtime.<span class="hljs-built_in">getRuntime</span>().<span class="hljs-built_in">availableProcessors</span>();<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 核心线程数 = CPU核心数 + 1</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> CORE_POOL_SIZE = CPU_COUNT + <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 线程池最大线程数 = CPU核心数 * 2 + 1</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> MAXIMUM_POOL_SIZE = CPU_COUNT * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 非核心线程闲置时超时1s</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> KEEP_ALIVE = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">String</span>[] args)</span> </span>&#123;<br><br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;开始生成订单号......&quot;</span>);<br>        <span class="hljs-type">long</span> begin = System.<span class="hljs-built_in">currentTimeMillis</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-built_in">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">OrderService</span>()).<span class="hljs-built_in">start</span>();<br>        &#125;<br>        <span class="hljs-type">long</span> end = System.<span class="hljs-built_in">currentTimeMillis</span>();<br>        <span class="hljs-type">long</span> result = end - begin;<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;执行消耗时长：&quot;</span> + result / <span class="hljs-number">1000</span> + <span class="hljs-string">&quot;s&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-5-源码参考地址"><a href="#3-2-5-源码参考地址" class="headerlink" title="3.2.5 源码参考地址"></a>3.2.5 源码参考地址</h3><p><a href="https://github.com/FocusProgram/person-improve/tree/main/springcloud-zookeeper-lock">https://github.com/FocusProgram/person-improve/tree/main/springcloud-zookeeper-lock</a></p>]]></content>
    
    
    <categories>
      
      <category>微服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
      <tag>微服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分布式锁-基于Redis实现</title>
    <link href="/2020/07/11/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81-%E5%9F%BA%E4%BA%8ERedis%E5%AE%9E%E7%8E%B0/"/>
    <url>/2020/07/11/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81-%E5%9F%BA%E4%BA%8ERedis%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p><strong>分布式锁-基于Redis实现</strong></p><hr><h1 id="1-高可用分布式锁特性"><a href="#1-高可用分布式锁特性" class="headerlink" title="1. 高可用分布式锁特性"></a>1. 高可用分布式锁特性</h1><blockquote><ul><li><p>互斥性：作为锁，需要保证任何时刻只能有一个客户端(用户)持有锁</p></li><li><p>可重入： 同一个客户端在获得锁后，可以再次进行加锁</p></li><li><p>高可用：获取锁和释放锁的效率较高，不会出现单点故障</p></li><li><p>自动重试机制：当客户端加锁失败时，能够提供一种机制让客户端自动重试</p></li></ul></blockquote><h1 id="2-实现原理"><a href="#2-实现原理" class="headerlink" title="2. 实现原理"></a>2. 实现原理</h1><h2 id="2-1-常用命令解析"><a href="#2-1-常用命令解析" class="headerlink" title="2.1 常用命令解析"></a>2.1 常用命令解析</h2><blockquote><ul><li><p>setnx 是『SET if Not eXists』(如果不存在，则 SET)的简写。 命令格式：SETNX key value；使用：只在键 key 不存在的情况下，将键 key 的值设置为 value 。若键 key 已经存在， 则 SETNX 命令不做任何动作。返回值：命令在设置成功时返回 1 ，设置失败时返回 0 。</p></li><li><p>getset 命令格式：GETSET key value，将键 key 的值设为 value ，并返回键 key 在被设置之前的旧的value。返回值：如果键 key 没有旧值， 也即是说， 键 key 在被设置之前并不存在， 那么命令返回 nil 。当键 key 存在但不是字符串类型时，命令返回一个错误。</p></li><li><p>expire 命令格式：EXPIRE key seconds，使用：为给定 key 设置生存时间，当 key 过期时(生存时间为 0 )，它会被自动删除。返回值：设置成功返回 1 。 当 key 不存在或者不能为 key 设置生存时间时(比如在低于 2.1.3 版本的 Redis 中你尝试更新 key 的生存时间)，返回 0 。</p></li><li><p>del 命令格式：DEL key [key …]，使用：删除给定的一个或多个 key ，不存在的 key 会被忽略。返回值：被删除 key 的数量。</p></li></ul></blockquote><h2 id="2-2-原理解析"><a href="#2-2-原理解析" class="headerlink" title="2.2 原理解析"></a>2.2 原理解析</h2><p><strong>实现原理一：</strong></p><p><img src="https://image.focusprogram.top/redis-lock.png"></p><p><strong>过程分析</strong>：</p><ul><li>1.客户端获取锁，通过setnx(lockkey,currenttime+timeout)命令，将key为lockkey的value设置为当前时间+锁超时时间</li><li>2.如果setnx(lockkey,currenttime+timeout)设置后返回值为1时，获取锁成功，说明redis中不存在lockkey，也不存在别的客户端拥有这个锁</li><li>3.获取锁后首先使用expire(lockkey)命令设置lockkey的过期时间，目的是为了防止死锁的发生，因为不设置lockKey的过期时间，lockkey就会一直存在于redis中，当别的客户端使用setnx(lockkey,currenttime+timeout)命令时返回的结果一直未0，造成死锁</li><li>4.执行相关业务逻辑</li><li>5.释放锁，执行业务逻辑完成后，使用del(lockkey)命令删除lockKey，为了别的客户端可以及时获取到锁，减少等待时间</li></ul><p><strong>缺陷：</strong></p><blockquote><p>如果客户端A，在获取锁以后，也就是在执行setnx(lockkey,currenttime+timeout)命令成功以后，redis宕机或者程序异常终止，未执行expire(lockkey)命令，那么锁就一直存在，别的客户端就一直获取不到锁，造成阻塞。</p></blockquote><p><strong>解决方法：</strong></p><blockquote><p>关闭Tomcat有两种方式，一种通过温柔的执行shutdown关闭，一种通过kill杀死进程关闭</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//通过温柔的执行shutdown关闭时，以下的方法会在关闭前执行，即可以释放锁，而对于通过kill杀死进程关闭时，以下方法不会执行，即不会释放锁</span><br><span class="hljs-comment">//这种方式释放锁的缺点在于，如果关闭的锁过多，将造成关闭服务器耗时过长</span><br><span class="hljs-meta">@PreDestroy</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">delLock</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">RedisShardedPoolUtil</span>.<span class="hljs-title function_">del</span>(<span class="hljs-title class_">Const</span>.<span class="hljs-property">REDIS_LOCK</span>.<span class="hljs-property">CLOSE_ORDER_TASK_LOCK</span>);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>为解决以上设计存在的弊端，优化设计，采用双重防死锁解决死锁问题</p></blockquote><p><strong>实现原理二：</strong></p><p><img src="https://image.focusprogram.top/redis-lock-2.png"></p><p><strong>过程分析：</strong></p><ul><li>1.当A通过setnx(lockkey,currenttime+timeout)命令能成功设置lockkey时，即返回值为1，过程与原理1一致；</li><li>2.当A通过setnx(lockkey,currenttime+timeout)命令不能成功设置lockkey时，这是不能直接断定获取锁失败；因为我们在设置锁时，设置了锁的超时时间timeout，当当前时间大于redis中存储键值为lockkey的value值时，可以认为上一任的拥有者对锁的使用权已经失效了，A就可以强行拥有该锁；具体判定过程如下；</li><li>3.A通过get(lockkey)，获取redis中的存储键值为lockkey的value值，即获取锁的相对时间lockvalueA</li><li>4.lockvalueA!&#x3D;null &amp;&amp; currenttime&gt;lockvalue，A通过当前的时间与锁设置的时间做比较，如果当前时间已经大于锁设置的时间临界，即可以进一步判断是否可以获取锁，否则说明该锁还在被占用，A就还不能获取该锁，结束，获取锁失败；</li><li>5.步骤4返回结果为true后，通过getSet设置新的超时时间，并返回旧值lockvalueB，以作判断，因为在分布式环境，在进入这里时可能另外的进程获取到锁并对值进行了修改，只有旧值与返回的值一致才能说明中间未被其他进程获取到这个锁；</li><li>6.lockvalueB &#x3D;&#x3D; null || lockvalueA&#x3D;&#x3D;lockvalueB，判断：若果lockvalueB为null，说明该锁已经被释放了，此时该进程可以获取锁；旧值与返回的lockvalueB一致说明中间未被其他进程获取该锁，可以获取锁；否则不能获取锁，结束，获取锁失败。</li></ul><p><strong>优化点：</strong></p><blockquote><p>加入了超时时间判断锁是否超时了，及时A在成功设置了锁之后，服务器就立即出现宕机或是重启，也不会出现死锁问题；因为B在尝试获取锁的时候，如果不能setnx成功，会去获取redis中锁的超时时间与当前的系统时间做比较，如果当前的系统时间已经大于锁超时时间，说明A已经对锁的使用权失效，B能继续判断能否获取锁，解决了redis分布式锁的死锁问题。</p></blockquote><h2 id="2-3-问题总结"><a href="#2-3-问题总结" class="headerlink" title="2.3 问题总结"></a>2.3 问题总结</h2><ul><li><strong>问题一：时间戳的问题</strong></li></ul><blockquote><p>我们看到lockkey的value值为时间戳，所以要在多客户端情况下，保证锁有效，一定要同步各服务器的时间，如果各服务器间，时间有差异。时间不一致的客户端，在判断锁超时，就会出现偏差，从而产生竞争条件。<br>锁的超时与否，严格依赖时间戳，时间戳本身也是有精度限制，假如我们的时间精度为秒，从加锁到执行操作再到解锁，一般操作肯定都能在一秒内完成。这样的话，我们上面的CASE，就很容易出现。所以，最好把时间精度提升到毫秒级。这样的话，可以保证毫秒级别的锁是安全的。</p><p>分布式锁，多客户端的时间戳不能保证严格意义的一致性，所以在某些特定因素下，有可能存在锁串的情况。要适度的机制，可以承受小概率的事件产生。</p></blockquote><ul><li><strong>问题二：死锁</strong></li></ul><blockquote><p>必要的超时机制：获取锁的客户端一旦崩溃，一定要有过期机制，否则其他客户端都降无法获取锁，造成死锁问题。</p></blockquote><ul><li><strong>问题三：阻塞</strong></li></ul><blockquote><p>只对关键处理节点加锁，良好的习惯是，把相关的资源准备好，比如连接数据库后，调用加锁机制获取锁，直接进行操作，然后释放，尽量减少持有锁的时间。</p><p>在持有锁期间要不要CHECK锁，如果需要严格依赖锁的状态，最好在关键步骤中做锁的CHECK检查机制，但是根据我们的测试发现，在大并发时，每一次CHECK锁操作，都要消耗掉几个毫秒，而我们的整个持锁处理逻辑才不到10毫秒，玩客没有选择做锁的检查。</p><p>为了减少对Redis的压力，获取锁尝试时，循环之间一定要做sleep操作。但是sleep时间是多少是门学问。需要根据自己的Redis的QPS，加上持锁处理时间等进行合理计算。</p></blockquote><h1 id="3-具体实现"><a href="#3-具体实现" class="headerlink" title="3. 具体实现"></a>3. 具体实现</h1><h2 id="3-1-引入依赖"><a href="#3-1-引入依赖" class="headerlink" title="3.1 引入依赖"></a>3.1 引入依赖</h2><blockquote><p>pom.xml</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>redis.clients<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jedis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3-2-编辑配置文件"><a href="#3-2-编辑配置文件" class="headerlink" title="3.2 编辑配置文件"></a>3.2 编辑配置文件</h2><blockquote><p>application.yml</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8000</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">database:</span> <span class="hljs-number">5</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">114.55</span><span class="hljs-number">.34</span><span class="hljs-number">.44</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>    <span class="hljs-attr">timeout:</span> <span class="hljs-string">3000ms</span><br>    <span class="hljs-attr">jedis:</span><br>      <span class="hljs-attr">pool:</span><br>        <span class="hljs-attr">max-active:</span> <span class="hljs-number">2000</span><br>        <span class="hljs-attr">max-idle:</span> <span class="hljs-number">500</span><br>        <span class="hljs-attr">max-wait:</span> <span class="hljs-string">1000ms</span><br>        <span class="hljs-attr">min-idle:</span> <span class="hljs-number">50</span><br></code></pre></td></tr></table></figure><blockquote><p>lock.lua 获得分布式锁lua脚本</p></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">-- 获取参数</span><br><span class="hljs-keyword">local</span> requestIDKey = KEYS[<span class="hljs-number">1</span>]<br><span class="hljs-keyword">local</span> currentRequestID = ARGV[<span class="hljs-number">1</span>]<br><span class="hljs-keyword">local</span> expireTimeTTL = ARGV[<span class="hljs-number">2</span>]<br><br><span class="hljs-comment">-- setnx 尝试加锁</span><br><span class="hljs-keyword">local</span> lockSet = redis.<span class="hljs-keyword">call</span>(<span class="hljs-string">&#x27;hsetnx&#x27;</span>,KEYS[<span class="hljs-number">1</span>],<span class="hljs-string">&#x27;lockKey&#x27;</span>,currentRequestID)<br><br><span class="hljs-keyword">if</span> lockSet == <span class="hljs-number">1</span><br><span class="hljs-keyword">then</span><br>    <span class="hljs-comment">-- 加锁成功 设置过期时间和重入次数=1</span><br>redis.<span class="hljs-keyword">call</span>(<span class="hljs-string">&#x27;expire&#x27;</span>,KEYS[<span class="hljs-number">1</span>],expireTimeTTL)<br>redis.<span class="hljs-keyword">call</span>(<span class="hljs-string">&#x27;hset&#x27;</span>,KEYS[<span class="hljs-number">1</span>],<span class="hljs-string">&#x27;lockCount&#x27;</span>,<span class="hljs-number">1</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-comment">-- 判断是否是重入加锁</span><br><span class="hljs-keyword">local</span> oldRequestID = redis.<span class="hljs-keyword">call</span>(<span class="hljs-string">&#x27;hget&#x27;</span>,KEYS[<span class="hljs-number">1</span>],<span class="hljs-string">&#x27;lockKey&#x27;</span>)<br><span class="hljs-keyword">if</span> currentRequestID == oldRequestID<br><span class="hljs-keyword">then</span><br>    <span class="hljs-comment">-- 是重入加锁</span><br>redis.<span class="hljs-keyword">call</span>(<span class="hljs-string">&#x27;hincrby&#x27;</span>,KEYS[<span class="hljs-number">1</span>],<span class="hljs-string">&#x27;lockCount&#x27;</span>,<span class="hljs-number">1</span>)<br><span class="hljs-comment">-- 重置过期时间</span><br>redis.<span class="hljs-keyword">call</span>(<span class="hljs-string">&#x27;expire&#x27;</span>,KEYS[<span class="hljs-number">1</span>],expireTimeTTL)<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-comment">-- requestID不一致，加锁失败</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><blockquote><p>unlock.lua 释放分布式锁lua脚本</p></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">-- 获取参数</span><br><span class="hljs-keyword">local</span> requestIDKey = KEYS[<span class="hljs-number">1</span>]<br><span class="hljs-keyword">local</span> currentRequestID = ARGV[<span class="hljs-number">1</span>]<br><br><span class="hljs-comment">-- 判断requestID一致性</span><br><span class="hljs-keyword">if</span> redis.<span class="hljs-keyword">call</span>(<span class="hljs-string">&#x27;hget&#x27;</span>,KEYS[<span class="hljs-number">1</span>],<span class="hljs-string">&#x27;lockKey&#x27;</span>) == currentRequestID<br><span class="hljs-keyword">then</span><br>    <span class="hljs-comment">-- requestID相同，重入次数自减</span><br><span class="hljs-keyword">local</span> currentCount = redis.<span class="hljs-keyword">call</span>(<span class="hljs-string">&#x27;hincrby&#x27;</span>,KEYS[<span class="hljs-number">1</span>],<span class="hljs-string">&#x27;lockCount&#x27;</span>,<span class="hljs-number">-1</span>)<br><span class="hljs-keyword">if</span> currentCount == <span class="hljs-number">0</span><br><span class="hljs-keyword">then</span><br>    <span class="hljs-comment">-- 重入次数为0，删除锁</span><br>    redis.<span class="hljs-keyword">call</span>(<span class="hljs-string">&#x27;del&#x27;</span>,KEYS[<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span> <span class="hljs-keyword">end</span><br><span class="hljs-keyword">else</span> <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span> <span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h2 id="3-3-初始化lua脚本"><a href="#3-3-初始化lua脚本" class="headerlink" title="3.3 初始化lua脚本"></a>3.3 初始化lua脚本</h2><blockquote><p>LuaScript</p><p>使用redis实现分布式锁时，加锁操作必须是原子操作，否则多客户端并发操作时会导致各种各样的问题</p><p>由于我们实现的是可重入锁，加锁过程中需要判断客户端ID的正确与否。而redis原生的简单接口没法保证一系列逻辑的原子性执行，因此采用了lua脚本来实现加锁操作。lua脚本可以让redis在执行时将一连串的操作以原子化的方式执行。</p></blockquote><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LuaScript</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 加锁脚本 lock.lua</span><br><span class="hljs-comment">     * 1. 判断key是否存在</span><br><span class="hljs-comment">     * 2. 如果存在，判断requestID是否相等</span><br><span class="hljs-comment">     * 相等，则删除掉key重新创建新的key值，重置过期时间</span><br><span class="hljs-comment">     * 不相等，说明已经被抢占，加锁失败，返回null</span><br><span class="hljs-comment">     * 3. 如果不存在，说明恰好已经过期，重新生成key</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">String</span> LOCK_SCRIPT;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 解锁脚本 unlock.lua</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">String</span> UN_LOCK_SCRIPT;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">initLockScript</span><span class="hljs-params">()</span> throws IOException </span>&#123;<br>        <span class="hljs-keyword">if</span> (StringUtils.<span class="hljs-built_in">isEmpty</span>(LOCK_SCRIPT)) &#123;<br>            InputStream inputStream = Objects.<span class="hljs-built_in">requireNonNull</span>(<br>                    LuaScript.<span class="hljs-keyword">class</span>.<span class="hljs-built_in">getClassLoader</span>().<span class="hljs-built_in">getResourceAsStream</span>(<span class="hljs-string">&quot;lock.lua&quot;</span>));<br>            LOCK_SCRIPT = <span class="hljs-built_in">readFile</span>(inputStream);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">initUnLockScript</span><span class="hljs-params">()</span> throws IOException </span>&#123;<br>        <span class="hljs-keyword">if</span> (StringUtils.<span class="hljs-built_in">isEmpty</span>(UN_LOCK_SCRIPT)) &#123;<br>            InputStream inputStream = Objects.<span class="hljs-built_in">requireNonNull</span>(<br>                    LuaScript.<span class="hljs-keyword">class</span>.<span class="hljs-built_in">getClassLoader</span>().<span class="hljs-built_in">getResourceAsStream</span>(<span class="hljs-string">&quot;unlock.lua&quot;</span>));<br>            UN_LOCK_SCRIPT = <span class="hljs-built_in">readFile</span>(inputStream);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-type">static</span> <span class="hljs-type">String</span> <span class="hljs-title">readFile</span><span class="hljs-params">(InputStream inputStream)</span> throws IOException </span>&#123;<br>        <span class="hljs-built_in">try</span> (<br>                BufferedReader br = <span class="hljs-keyword">new</span> <span class="hljs-built_in">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">InputStreamReader</span>(inputStream))<br>        ) &#123;<br>            <span class="hljs-type">String</span> line;<br>            StringBuilder stringBuilder = <span class="hljs-keyword">new</span> <span class="hljs-built_in">StringBuilder</span>();<br>            <span class="hljs-keyword">while</span> ((line = br.<span class="hljs-built_in">readLine</span>()) != null) &#123;<br>                stringBuilder.<span class="hljs-built_in">append</span>(line)<br>                        .<span class="hljs-built_in">append</span>(System.<span class="hljs-built_in">lineSeparator</span>());<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> stringBuilder.<span class="hljs-built_in">toString</span>();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-4-定义分布式锁接口"><a href="#3-4-定义分布式锁接口" class="headerlink" title="3.4 定义分布式锁接口"></a>3.4 定义分布式锁接口</h2><blockquote><p>DistributeLock</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 分布式锁 api接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">DistributeLock</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 尝试加锁</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> lockKey 锁的key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 加锁成功 返回uuid</span><br><span class="hljs-comment">     * 加锁失败 返回null</span><br><span class="hljs-comment">     */</span><br>    String <span class="hljs-title function_ invoke__">lock</span>(String lockKey);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 尝试加锁 (requestID相等 可重入)</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> lockKey    锁的key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> expireTime 过期时间 单位：秒</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 加锁成功 返回uuid</span><br><span class="hljs-comment">     * 加锁失败 返回null</span><br><span class="hljs-comment">     */</span><br>    String <span class="hljs-title function_ invoke__">lock</span>(String lockKey, <span class="hljs-keyword">int</span> expireTime);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 尝试加锁 (requestID相等 可重入)</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> lockKey   锁的key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> requestID 用户ID</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 加锁成功 返回uuid</span><br><span class="hljs-comment">     * 加锁失败 返回null</span><br><span class="hljs-comment">     */</span><br>    String <span class="hljs-title function_ invoke__">lock</span>(String lockKey, String requestID);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 尝试加锁 (requestID相等 可重入)</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> lockKey    锁的key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> requestID  用户ID</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> expireTime 过期时间 单位：秒</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 加锁成功 返回uuid</span><br><span class="hljs-comment">     * 加锁失败 返回null</span><br><span class="hljs-comment">     */</span><br>    String <span class="hljs-title function_ invoke__">lock</span>(String lockKey, String requestID, <span class="hljs-keyword">int</span> expireTime);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 尝试加锁，失败自动重试 会阻塞当前线程</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> lockKey 锁的key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 加锁成功 返回uuid</span><br><span class="hljs-comment">     * 加锁失败 返回null</span><br><span class="hljs-comment">     */</span><br>    String <span class="hljs-title function_ invoke__">lockAndRetry</span>(String lockKey);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 尝试加锁，失败自动重试 会阻塞当前线程 (requestID相等 可重入)</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> lockKey   锁的key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> requestID 用户ID</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 加锁成功 返回uuid</span><br><span class="hljs-comment">     * 加锁失败 返回null</span><br><span class="hljs-comment">     */</span><br>    String <span class="hljs-title function_ invoke__">lockAndRetry</span>(String lockKey, String requestID);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 尝试加锁 (requestID相等 可重入)</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> lockKey    锁的key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> expireTime 过期时间 单位：秒</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 加锁成功 返回uuid</span><br><span class="hljs-comment">     * 加锁失败 返回null</span><br><span class="hljs-comment">     */</span><br>    String <span class="hljs-title function_ invoke__">lockAndRetry</span>(String lockKey, <span class="hljs-keyword">int</span> expireTime);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 尝试加锁 (requestID相等 可重入)</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> lockKey    锁的key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> expireTime 过期时间 单位：秒</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> retryCount 重试次数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 加锁成功 返回uuid</span><br><span class="hljs-comment">     * 加锁失败 返回null</span><br><span class="hljs-comment">     */</span><br>    String <span class="hljs-title function_ invoke__">lockAndRetry</span>(String lockKey, <span class="hljs-keyword">int</span> expireTime, <span class="hljs-keyword">int</span> retryCount);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 尝试加锁 (requestID相等 可重入)</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> lockKey    锁的key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> requestID  用户ID</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> expireTime 过期时间 单位：秒</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 加锁成功 返回uuid</span><br><span class="hljs-comment">     * 加锁失败 返回null</span><br><span class="hljs-comment">     */</span><br>    String <span class="hljs-title function_ invoke__">lockAndRetry</span>(String lockKey, String requestID, <span class="hljs-keyword">int</span> expireTime);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 尝试加锁 (requestID相等 可重入)</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> lockKey    锁的key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> expireTime 过期时间 单位：秒</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> requestID  用户ID</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> retryCount 重试次数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 加锁成功 返回uuid</span><br><span class="hljs-comment">     * 加锁失败 返回null</span><br><span class="hljs-comment">     */</span><br>    String <span class="hljs-title function_ invoke__">lockAndRetry</span>(String lockKey, String requestID, <span class="hljs-keyword">int</span> expireTime, <span class="hljs-keyword">int</span> retryCount);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 释放锁</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> lockKey   锁的key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> requestID 用户ID</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true     释放自己所持有的锁 成功</span><br><span class="hljs-comment">     * false    释放自己所持有的锁 失败</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">boolean</span> <span class="hljs-title function_ invoke__">unLock</span>(String lockKey, String requestID);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>RedisDistributeLock</p><p>调用lockAndRetry方法进行加锁时，如果加锁失败，则当前客户端线程会短暂的休眠一段时间，并进行重试。在重试了一定的次数后，会终止重试加锁操作，从而加锁失败。</p><p>需要注意的是，加锁失败之后的线程休眠时长是”固定值 + 随机值”，引入随机值的主要目的是防止高并发时大量的客户端在几乎同一时间被唤醒并进行加锁重试，给redis服务器带来周期性的、不必要的瞬时压力。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component(&quot;distributeLock&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisDistributeLock</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DistributeLock</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">LOGGER</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(RedisDistributeLock.class);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 无限重试</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">UN_LIMIT_RETRY_COUNT</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">RedisDistributeLock</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            LuaScript.initLockScript();<br>            LuaScript.initUnLockScript();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;LuaScript init error!&quot;</span>, e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 持有锁 成功标识</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Long</span> <span class="hljs-variable">ADD_LOCK_SUCCESS</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 释放锁 失败标识</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Long</span> <span class="hljs-variable">RELEASE_LOCK_SUCCESS</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 默认过期时间 单位：秒</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">DEFAULT_EXPIRE_TIME_SECOND</span> <span class="hljs-operator">=</span> <span class="hljs-number">300</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 默认加锁重试时间 单位：毫秒</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">DEFAULT_RETRY_FIXED_TIME</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 默认的加锁浮动时间区间 单位：毫秒</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">DEFAULT_RETRY_TIME_RANGE</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 默认的加锁重试次数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">DEFAULT_RETRY_COUNT</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RedisClient redisClient;<br><br>    <span class="hljs-comment">//===========================================api=======================================</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">lock</span><span class="hljs-params">(String lockKey)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">uuid</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString();<br><br>        <span class="hljs-keyword">return</span> lock(lockKey, uuid);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">lock</span><span class="hljs-params">(String lockKey, <span class="hljs-type">int</span> expireTime)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">uuid</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString();<br><br>        <span class="hljs-keyword">return</span> lock(lockKey, uuid, expireTime);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">lock</span><span class="hljs-params">(String lockKey, String requestID)</span> &#123;<br>        <span class="hljs-keyword">return</span> lock(lockKey, requestID, DEFAULT_EXPIRE_TIME_SECOND);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">lock</span><span class="hljs-params">(String lockKey, String requestID, <span class="hljs-type">int</span> expireTime)</span> &#123;<br>        List&lt;String&gt; keyList = Collections.singletonList(lockKey);<br><br>        List&lt;String&gt; argsList = Arrays.asList(<br>                requestID,<br>                expireTime + <span class="hljs-string">&quot;&quot;</span><br>        );<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> (Long) redisClient.eval(LuaScript.LOCK_SCRIPT, keyList, argsList);<br><br>        <span class="hljs-keyword">if</span> (result.equals(ADD_LOCK_SUCCESS)) &#123;<br>            <span class="hljs-keyword">return</span> requestID;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">lockAndRetry</span><span class="hljs-params">(String lockKey)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">uuid</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString();<br><br>        <span class="hljs-keyword">return</span> lockAndRetry(lockKey, uuid);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">lockAndRetry</span><span class="hljs-params">(String lockKey, String requestID)</span> &#123;<br>        <span class="hljs-keyword">return</span> lockAndRetry(lockKey, requestID, DEFAULT_EXPIRE_TIME_SECOND);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">lockAndRetry</span><span class="hljs-params">(String lockKey, <span class="hljs-type">int</span> expireTime)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">uuid</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString();<br><br>        <span class="hljs-keyword">return</span> lockAndRetry(lockKey, uuid, expireTime);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">lockAndRetry</span><span class="hljs-params">(String lockKey, <span class="hljs-type">int</span> expireTime, <span class="hljs-type">int</span> retryCount)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">uuid</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString();<br><br>        <span class="hljs-keyword">return</span> lockAndRetry(lockKey, uuid, expireTime, retryCount);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">lockAndRetry</span><span class="hljs-params">(String lockKey, String requestID, <span class="hljs-type">int</span> expireTime)</span> &#123;<br>        <span class="hljs-keyword">return</span> lockAndRetry(lockKey, requestID, expireTime, DEFAULT_RETRY_COUNT);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">lockAndRetry</span><span class="hljs-params">(String lockKey, String requestID, <span class="hljs-type">int</span> expireTime, <span class="hljs-type">int</span> retryCount)</span> &#123;<br>        <span class="hljs-keyword">if</span> (retryCount &lt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// retryCount小于等于0 无限循环，一直尝试加锁</span><br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> lock(lockKey, requestID, expireTime);<br>                <span class="hljs-keyword">if</span> (result != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-keyword">return</span> result;<br>                &#125;<br><br>                LOGGER.info(<span class="hljs-string">&quot;加锁失败，稍后重试：lockKey=&#123;&#125;,requestID=&#123;&#125;&quot;</span>, lockKey, requestID);<br>                redisClient.increment(<span class="hljs-string">&quot;retryCount&quot;</span>, <span class="hljs-number">1</span>);<br>                <span class="hljs-comment">// 休眠一会</span><br>                sleepSomeTime();<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// retryCount大于0 尝试指定次数后，退出</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; retryCount; i++) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> lock(lockKey, requestID, expireTime);<br>                <span class="hljs-keyword">if</span> (result != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-keyword">return</span> result;<br>                &#125;<br>                <span class="hljs-comment">// 休眠一会</span><br>                sleepSomeTime();<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">unLock</span><span class="hljs-params">(String lockKey, String requestID)</span> &#123;<br>        List&lt;String&gt; keyList = Collections.singletonList(lockKey);<br><br>        List&lt;String&gt; argsList = Collections.singletonList(requestID);<br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> redisClient.eval(LuaScript.UN_LOCK_SCRIPT, keyList, argsList);<br><br>        <span class="hljs-comment">// 释放锁成功</span><br>        <span class="hljs-keyword">return</span> RELEASE_LOCK_SUCCESS.equals(result);<br>    &#125;<br><br>    <span class="hljs-comment">//==============================================私有方法========================================</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获得最终的获得锁的重试时间</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getFinallyGetLockRetryTime</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">ra</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br><br>        <span class="hljs-comment">// 最终重试时间 = 固定时间 + 浮动时间</span><br>        <span class="hljs-keyword">return</span> DEFAULT_RETRY_FIXED_TIME + ra.nextInt(DEFAULT_RETRY_TIME_RANGE);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 当前线程 休眠一段时间</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sleepSomeTime</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 重试时间 单位：毫秒</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">retryTime</span> <span class="hljs-operator">=</span> getFinallyGetLockRetryTime();<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(retryTime);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;redis锁重试时，出现异常&quot;</span>, e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-5-redisclient工具类"><a href="#3-5-redisclient工具类" class="headerlink" title="3.5 redisclient工具类"></a>3.5 redisclient工具类</h2><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">public</span> interface RedisClient &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 执行脚本</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-built_in">Object</span> <span class="hljs-title function_">eval</span>(<span class="hljs-built_in">String</span> script, List&lt;<span class="hljs-built_in">String</span>&gt; keys, List&lt;<span class="hljs-built_in">String</span>&gt; args);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * get</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-built_in">Object</span> <span class="hljs-built_in">get</span>(<span class="hljs-built_in">String</span> <span class="hljs-built_in">key</span>);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * set</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-built_in">set</span>(<span class="hljs-built_in">String</span> <span class="hljs-built_in">key</span>, <span class="hljs-built_in">Object</span> value);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * set</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-built_in">set</span>(<span class="hljs-built_in">String</span> <span class="hljs-built_in">key</span>, <span class="hljs-built_in">Object</span> value, <span class="hljs-type">long</span> expireTime, TimeUnit timeUnit);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * setNX</span><br><span class="hljs-comment">     */</span><br>    Boolean <span class="hljs-title function_">setNX</span>(<span class="hljs-built_in">String</span> <span class="hljs-built_in">key</span>, <span class="hljs-built_in">Object</span> value);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置过期时间</span><br><span class="hljs-comment">     */</span><br>    Boolean <span class="hljs-title function_">expire</span>(<span class="hljs-built_in">String</span> <span class="hljs-built_in">key</span>, <span class="hljs-type">long</span> time, TimeUnit type);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 移除过期时间</span><br><span class="hljs-comment">     */</span><br>    Boolean <span class="hljs-title function_">persist</span>(<span class="hljs-built_in">String</span> <span class="hljs-built_in">key</span>);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 增加</span><br><span class="hljs-comment">     */</span><br>    Long <span class="hljs-title function_">increment</span>(<span class="hljs-built_in">String</span> <span class="hljs-built_in">key</span>, <span class="hljs-type">long</span> number);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 增加</span><br><span class="hljs-comment">     */</span><br>    Double <span class="hljs-title function_">increment</span>(<span class="hljs-built_in">String</span> <span class="hljs-built_in">key</span>, <span class="hljs-type">double</span> number);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除</span><br><span class="hljs-comment">     */</span><br>    Boolean <span class="hljs-title function_">delete</span>(<span class="hljs-built_in">String</span> <span class="hljs-built_in">key</span>);<br><br>    <span class="hljs-comment">// ==========================hash========================</span><br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">hset</span>(<span class="hljs-built_in">String</span> <span class="hljs-built_in">key</span>, <span class="hljs-built_in">String</span> hashKey, <span class="hljs-built_in">Object</span> value);<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">hsetAll</span>(<span class="hljs-built_in">String</span> <span class="hljs-built_in">key</span>, Map&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">Object</span>&gt; <span class="hljs-built_in">map</span>);<br><br>    Boolean <span class="hljs-title function_">hsetNX</span>(<span class="hljs-built_in">String</span> <span class="hljs-built_in">key</span>, <span class="hljs-built_in">String</span> hashKey, <span class="hljs-built_in">Object</span> value);<br><br>    <span class="hljs-built_in">Object</span> <span class="hljs-title function_">hget</span>(<span class="hljs-built_in">String</span> <span class="hljs-built_in">key</span>, <span class="hljs-built_in">String</span> hashKey);<br><br>    Map <span class="hljs-title function_">hgetAll</span>(<span class="hljs-built_in">String</span> <span class="hljs-built_in">key</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Component</span>(<span class="hljs-string">&quot;redisClient&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisClientImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RedisClient</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">RedisTemplate</span>&lt;<span class="hljs-title class_">String</span>, <span class="hljs-title class_">Object</span>&gt; redisTemplate;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Object</span> <span class="hljs-title function_">eval</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> script, List&lt;<span class="hljs-built_in">String</span>&gt; keys, List&lt;<span class="hljs-built_in">String</span>&gt; args</span>) &#123;<br>        <span class="hljs-title class_">DefaultRedisScript</span>&lt;<span class="hljs-title class_">Integer</span>&gt; redisScript = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultRedisScript</span>&lt;&gt;();<br>        redisScript.<span class="hljs-title function_">setScriptText</span>(script);<br>        redisScript.<span class="hljs-title function_">setResultType</span>(<span class="hljs-title class_">Integer</span>.<span class="hljs-property">class</span>);<br><br>        <span class="hljs-title class_">Object</span> result = redisTemplate.<span class="hljs-title function_">execute</span>((<span class="hljs-title class_">RedisCallback</span>&lt;<span class="hljs-title class_">Object</span>&gt;) redisConnection -&gt; &#123;<br>            <span class="hljs-title class_">Object</span> nativeConnection = redisConnection.<span class="hljs-title function_">getNativeConnection</span>();<br>            <span class="hljs-comment">// 集群模式和单机模式虽然执行脚本的方法一样，但是没有共同的接口，所以只能分开执行</span><br>            <span class="hljs-comment">// 集群模式</span><br>            <span class="hljs-keyword">if</span> (nativeConnection <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">JedisCluster</span>) &#123;<br>                <span class="hljs-keyword">return</span> (<span class="hljs-title class_">Long</span>) ((<span class="hljs-title class_">JedisCluster</span>) nativeConnection).<span class="hljs-built_in">eval</span>(script, keys, args);<br>            &#125;<br><br>            <span class="hljs-comment">// 单机模式</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nativeConnection <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Jedis</span>) &#123;<br>                <span class="hljs-keyword">return</span> (<span class="hljs-title class_">Long</span>) ((<span class="hljs-title class_">Jedis</span>) nativeConnection).<span class="hljs-built_in">eval</span>(script, keys, args);<br>            &#125;<br>            <span class="hljs-keyword">return</span> -1L;<br>        &#125;);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Object</span> <span class="hljs-title function_">get</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> key</span>) &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.<span class="hljs-title function_">opsForValue</span>().<span class="hljs-title function_">get</span>(key);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">set</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> key, <span class="hljs-built_in">Object</span> value</span>) &#123;<br>        redisTemplate.<span class="hljs-title function_">opsForValue</span>().<span class="hljs-title function_">set</span>(key, value);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">set</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> key, <span class="hljs-built_in">Object</span> value, long expireTime, TimeUnit timeUnit</span>) &#123;<br>        redisTemplate.<span class="hljs-title function_">opsForValue</span>().<span class="hljs-title function_">set</span>(key, value, expireTime, timeUnit);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Boolean</span> <span class="hljs-title function_">setNX</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> key, <span class="hljs-built_in">Object</span> value</span>) &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.<span class="hljs-title function_">opsForValue</span>().<span class="hljs-title function_">setIfAbsent</span>(key, value);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Boolean</span> <span class="hljs-title function_">expire</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> key, long time, TimeUnit timeUnit</span>) &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.<span class="hljs-title function_">boundValueOps</span>(key).<span class="hljs-title function_">expire</span>(time, timeUnit);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Boolean</span> <span class="hljs-title function_">persist</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> key</span>) &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.<span class="hljs-title function_">boundValueOps</span>(key).<span class="hljs-title function_">persist</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Long</span> <span class="hljs-title function_">increment</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> key, long <span class="hljs-built_in">number</span></span>) &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.<span class="hljs-title function_">opsForValue</span>().<span class="hljs-title function_">increment</span>(key, <span class="hljs-built_in">number</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Double</span> <span class="hljs-title function_">increment</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> key, double <span class="hljs-built_in">number</span></span>) &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.<span class="hljs-title function_">opsForValue</span>().<span class="hljs-title function_">increment</span>(key, <span class="hljs-built_in">number</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Boolean</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> key</span>) &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.<span class="hljs-title function_">delete</span>(key);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">hset</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> key, <span class="hljs-built_in">String</span> hashKey, <span class="hljs-built_in">Object</span> value</span>) &#123;<br>        redisTemplate.<span class="hljs-title function_">opsForHash</span>().<span class="hljs-title function_">put</span>(key, hashKey, value);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">hsetAll</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> key, <span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">Object</span>&gt; map</span>) &#123;<br>        redisTemplate.<span class="hljs-title function_">opsForHash</span>().<span class="hljs-title function_">putAll</span>(key, map);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Boolean</span> <span class="hljs-title function_">hsetNX</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> key, <span class="hljs-built_in">String</span> hashKey, <span class="hljs-built_in">Object</span> value</span>) &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.<span class="hljs-title function_">opsForHash</span>().<span class="hljs-title function_">putIfAbsent</span>(key, hashKey, value);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Object</span> <span class="hljs-title function_">hget</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> key, <span class="hljs-built_in">String</span> hashKey</span>) &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.<span class="hljs-title function_">opsForHash</span>().<span class="hljs-title function_">get</span>(key, hashKey);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Map</span> <span class="hljs-title function_">hgetAll</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> key</span>) &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.<span class="hljs-title function_">opsForHash</span>().<span class="hljs-title function_">entries</span>(key);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-6-测试分布式锁"><a href="#3-6-测试分布式锁" class="headerlink" title="3.6 测试分布式锁"></a>3.6 测试分布式锁</h2><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs livescript">@RestController<br>@RequestMapping(<span class="hljs-string">&quot;distributelock&quot;</span>)<br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">DistributeLockController</span> &#123;<br><br>    private <span class="hljs-keyword">static</span> final <span class="hljs-built_in">String</span> TEST_REDIS_LOCK_KEY = <span class="hljs-string">&quot;lock_key&quot;</span>;<br><br>    private <span class="hljs-keyword">static</span> final int EXPIRE_TIME = <span class="hljs-number">100</span>;<br><br>    @Autowired<br>    private RedisDistributeLock redisDistributeLock;<br><br>    @RequestMapping(<span class="hljs-string">&quot;/getlock&quot;</span>)<br>    public <span class="hljs-built_in">String</span> test() throws ExecutionException, InterruptedException &#123;<br>        int threadNum = <span class="hljs-number">100</span>;<br>        ThreadFactory namedThreadFactory = <span class="hljs-keyword">new</span> ThreadFactoryBuilder()<br>                .setNameFormat(<span class="hljs-string">&quot;demo-pool-%d&quot;</span>).build();<br>        ExecutorService executorService = <span class="hljs-keyword">new</span> ThreadPoolExecutor(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>,<br>                <span class="hljs-number">0</span>L, TimeUnit.MILLISECONDS,<br>                <span class="hljs-keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;(<span class="hljs-number">1024</span>), namedThreadFactory, <span class="hljs-keyword">new</span> ThreadPoolExecutor.AbortPolicy());<br>        List&lt;Future&gt; futureList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (int i = <span class="hljs-number">0</span>; i &lt;= threadNum; i++) &#123;<br>            int currentThreadNum = i;<br>            Future future = executorService.submit<span class="hljs-function"><span class="hljs-params">(() -&gt; &#123;</span></span><br><span class="hljs-params"><span class="hljs-function">                System.out.println(<span class="hljs-string">&quot;线程尝试获得锁 i=&quot;</span> + currentThreadNum);</span></span><br><span class="hljs-params"><span class="hljs-function">                <span class="hljs-built_in">String</span> requestID = redisDistributeLock.lockAndRetry(TEST_REDIS_LOCK_KEY, EXPIRE_TIME);</span></span><br><span class="hljs-params"><span class="hljs-function"></span></span><br><span class="hljs-params"><span class="hljs-function">                <span class="hljs-keyword">if</span> (!StringUtils.isEmpty(requestID)) &#123;</span></span><br><span class="hljs-params"><span class="hljs-function">                    System.out.println(<span class="hljs-string">&quot;获得锁，开始执行任务 requestID=&quot;</span> + requestID + <span class="hljs-string">&quot;i=&quot;</span> + currentThreadNum);</span></span><br><span class="hljs-params"><span class="hljs-function">                &#125;</span></span><br><span class="hljs-params"><span class="hljs-function"></span></span><br><span class="hljs-params"><span class="hljs-function">                <span class="hljs-regexp">// 模拟 宕机事件 不释放锁</span></span></span><br><span class="hljs-regexp"><span class="hljs-params"><span class="hljs-function">               /* if (currentThreadNum == 1) &#123;</span></span></span><br><span class="hljs-regexp"><span class="hljs-params"><span class="hljs-function">                    System.out.println(&quot;模拟 宕机事件 不释放锁，直接返回 currentThreadNum=&quot; + currentThreadNum);</span></span></span><br><span class="hljs-regexp"><span class="hljs-params"><span class="hljs-function">                    return;</span></span></span><br><span class="hljs-regexp"><span class="hljs-params"><span class="hljs-function">                &#125;*/</span></span></span><br><span class="hljs-regexp"><span class="hljs-params"><span class="hljs-function"></span></span></span><br><span class="hljs-regexp"><span class="hljs-params"><span class="hljs-function">                try &#123;</span></span></span><br><span class="hljs-regexp"><span class="hljs-params"><span class="hljs-function">                    //</span> 休眠完毕</span></span><br><span class="hljs-params"><span class="hljs-function">                    Thread.sleep(<span class="hljs-number">3000</span>);</span></span><br><span class="hljs-params"><span class="hljs-function">                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;</span></span><br><span class="hljs-params"><span class="hljs-function">                    e.printStackTrace();</span></span><br><span class="hljs-params"><span class="hljs-function">                &#125;</span></span><br><span class="hljs-params"><span class="hljs-function"></span></span><br><span class="hljs-params"><span class="hljs-function">                System.out.println(<span class="hljs-string">&quot;任务执行完毕&quot;</span> + <span class="hljs-string">&quot;i=&quot;</span> + currentThreadNum);</span></span><br><span class="hljs-params"><span class="hljs-function">                redisDistributeLock.unLock(TEST_REDIS_LOCK_KEY, requestID);</span></span><br><span class="hljs-params"><span class="hljs-function">                System.out.println(<span class="hljs-string">&quot;释放锁完毕&quot;</span>);</span></span><br><span class="hljs-params"><span class="hljs-function">                redisDistributeLock.lockAndRetry(TEST_REDIS_LOCK_KEY, requestID, EXPIRE_TIME);</span></span><br><span class="hljs-params"><span class="hljs-function">                System.out.println(<span class="hljs-string">&quot;重入获得锁，开始执行任务 requestID=&quot;</span> + requestID + <span class="hljs-string">&quot;i=&quot;</span> + currentThreadNum);</span></span><br><span class="hljs-params"><span class="hljs-function">                redisDistributeLock.unLock(TEST_REDIS_LOCK_KEY, requestID);</span></span><br><span class="hljs-params"><span class="hljs-function">                System.out.println(<span class="hljs-string">&quot;释放重入锁完毕&quot;</span>);</span></span><br><span class="hljs-params"><span class="hljs-function">            &#125;)</span>;</span><br><span class="hljs-function">            <span class="hljs-title">futureList</span>.<span class="hljs-title">add</span><span class="hljs-params">(future)</span>;</span><br><span class="hljs-function">        &#125;</span><br><span class="hljs-function">        <span class="hljs-title">for</span> <span class="hljs-params">(Future future : futureList)</span> &#123;</span><br><span class="hljs-function">            <span class="hljs-title">future</span>.<span class="hljs-title">get</span><span class="hljs-params">()</span>;</span><br><span class="hljs-function">        &#125;</span><br><span class="hljs-function">        <span class="hljs-title">return</span> &quot;<span class="hljs-title">ok</span>&quot;;</span><br><span class="hljs-function">    &#125;</span><br><span class="hljs-function">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="3-7-基于注解切面简化实现分布式锁"><a href="#3-7-基于注解切面简化实现分布式锁" class="headerlink" title="3.7 基于注解切面简化实现分布式锁"></a>3.7 基于注解切面简化实现分布式锁</h2><blockquote><p>RedisLock</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.METHOD)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> RedisLock &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * redis锁，重试次数-1代表无限重试</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">unLimitRetryCount</span> <span class="hljs-operator">=</span> RedisDistributeLock.UN_LIMIT_RETRY_COUNT;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * redis锁对应的key 会拼接此参数，用于进一步区分，避免redis的key被覆盖</span><br><span class="hljs-comment">     */</span><br>    String <span class="hljs-title function_">lockKey</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * redis锁过期时间（单位：秒）</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">expireTime</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-number">10</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * redis锁，加锁失败重试次数 默认30次，大约3s</span><br><span class="hljs-comment">     * 超过指定次数后，抛出加锁失败异常，可以由调用方自己补偿</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@see</span> RedisLockFailException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">retryCount</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-number">30</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>RedisLockAspect</p></blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Component<br>@Aspect<br>public <span class="hljs-keyword">class</span> RedisLockAspect &#123;<br><br>    <span class="hljs-keyword">private</span> static final Logger logger = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LoggerFactory</span>.</span></span>get<span class="hljs-constructor">Logger(RedisLockAspect.<span class="hljs-params">class</span>)</span>;<br><br>    <span class="hljs-keyword">private</span> final RequestIDMap REQUEST_ID_MAP = <span class="hljs-keyword">new</span> <span class="hljs-constructor">RequestIDMap()</span>;<br><br>    @Autowired<br>    <span class="hljs-keyword">private</span> Environment environment;<br><br>    @Autowired<br>    <span class="hljs-keyword">private</span> DistributeLock distributeLock;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将ThreadLocal包装成一个对象方便使用</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> RequestIDMap &#123;<br>        <span class="hljs-keyword">private</span> ThreadLocal&lt;Map&lt;String, String&gt;&gt; innerThreadLocal = <span class="hljs-keyword">new</span> ThreadLocal&lt;&gt;<span class="hljs-literal">()</span>;<br><br>        <span class="hljs-keyword">private</span> void set<span class="hljs-constructor">RequestID(String <span class="hljs-params">redisLockKey</span>, String <span class="hljs-params">requestID</span>)</span> &#123;<br>            Map&lt;String, String&gt; requestIDMap = innerThreadLocal.get<span class="hljs-literal">()</span>;<br>            <span class="hljs-keyword">if</span> (requestIDMap<span class="hljs-operator"> == </span>null) &#123;<br>                Map&lt;String, String&gt; newMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;<span class="hljs-literal">()</span>;<br>                newMap.put(redisLockKey, requestID);<br>                innerThreadLocal.set(newMap);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                requestIDMap.put(redisLockKey, requestID);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">private</span> String get<span class="hljs-constructor">RequestID(String <span class="hljs-params">redisLockKey</span>)</span> &#123;<br>            Map&lt;String, String&gt; requestIDMap = innerThreadLocal.get<span class="hljs-literal">()</span>;<br>            <span class="hljs-keyword">if</span> (requestIDMap<span class="hljs-operator"> == </span>null) &#123;<br>                return null;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                return requestIDMap.get(redisLockKey);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">private</span> void remove<span class="hljs-constructor">RequestID(String <span class="hljs-params">redisLockKey</span>)</span> &#123;<br>            Map&lt;String, String&gt; requestIDMap = innerThreadLocal.get<span class="hljs-literal">()</span>;<br>            <span class="hljs-keyword">if</span> (requestIDMap != null) &#123;<br>                requestIDMap.remove(redisLockKey);<br>                <span class="hljs-comment">// 如果requestIDMap为空，说明当前重入锁 最外层已经解锁</span><br>                <span class="hljs-keyword">if</span> (requestIDMap.is<span class="hljs-constructor">Empty()</span>) &#123;<br>                    <span class="hljs-comment">// 清空threadLocal避免内存泄露</span><br>                    innerThreadLocal.remove<span class="hljs-literal">()</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    @<span class="hljs-constructor">Pointcut(<span class="hljs-string">&quot;@annotation(com.redis.annotation.RedisLock)&quot;</span>)</span><br>    public void annotation<span class="hljs-constructor">Pointcut()</span> &#123;<br>    &#125;<br><br>    @<span class="hljs-constructor">Around(<span class="hljs-string">&quot;annotationPointcut()&quot;</span>)</span><br>    public Object around(ProceedingJoinPoint joinPoint) throws Throwable &#123;<br>        MethodSignature methodSignature = (MethodSignature) joinPoint.get<span class="hljs-constructor">Signature()</span>;<br>        Method <span class="hljs-keyword">method</span> = methodSignature.get<span class="hljs-constructor">Method()</span>;<br>        RedisLock annotation = <span class="hljs-keyword">method</span>.get<span class="hljs-constructor">Annotation(RedisLock.<span class="hljs-params">class</span>)</span>;<br><br>        <span class="hljs-comment">// 方法执行前，先尝试加锁</span><br>        boolean lockSuccess = lock(annotation, joinPoint);<br>        <span class="hljs-comment">// 如果加锁成功</span><br>        <span class="hljs-keyword">if</span> (lockSuccess) &#123;<br>            <span class="hljs-comment">// 执行方法</span><br>            Object result = joinPoint.proceed<span class="hljs-literal">()</span>;<br>            <span class="hljs-comment">// 方法执行后，进行解锁</span><br>            unlock(annotation, joinPoint);<br>            return result;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">RedisLockFailException(<span class="hljs-string">&quot;redis分布式锁加锁失败，method= &quot;</span> + <span class="hljs-params">method</span>.<span class="hljs-params">getName</span>()</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 加锁</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> boolean lock(RedisLock annotation, ProceedingJoinPoint joinPoint) &#123;<br>        <span class="hljs-built_in">int</span> retryCount = annotation.retry<span class="hljs-constructor">Count()</span>;<br><br>        <span class="hljs-comment">// 拼接redisLock的key</span><br>        String redisLockKey = get<span class="hljs-constructor">FinallyKeyLock(<span class="hljs-params">annotation</span>, <span class="hljs-params">joinPoint</span>)</span>;<br>        String requestID = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">REQUEST_ID_MAP</span>.</span></span>get<span class="hljs-constructor">RequestID(<span class="hljs-params">redisLockKey</span>)</span>;<br>        <span class="hljs-keyword">if</span> (requestID != null) &#123;<br>            <span class="hljs-comment">// 当前线程 已经存在requestID</span><br>            distributeLock.lock<span class="hljs-constructor">AndRetry(<span class="hljs-params">redisLockKey</span>, <span class="hljs-params">requestID</span>, <span class="hljs-params">annotation</span>.<span class="hljs-params">expireTime</span>()</span>, retryCount);<br>            logger.info(<span class="hljs-string">&quot;重入加锁成功 redisLockKey= &quot;</span> + redisLockKey);<br><br>            return <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 当前线程 不存在requestID</span><br>            String newRequestID = distributeLock.lock<span class="hljs-constructor">AndRetry(<span class="hljs-params">redisLockKey</span>, <span class="hljs-params">annotation</span>.<span class="hljs-params">expireTime</span>()</span>, retryCount);<br><br>            <span class="hljs-keyword">if</span> (newRequestID != null) &#123;<br>                <span class="hljs-comment">// 加锁成功，设置新的requestID</span><br>                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">REQUEST_ID_MAP</span>.</span></span>set<span class="hljs-constructor">RequestID(<span class="hljs-params">redisLockKey</span>, <span class="hljs-params">newRequestID</span>)</span>;<br>                logger.info(<span class="hljs-string">&quot;加锁成功 redisLockKey= &quot;</span> + redisLockKey);<br>                return <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                logger.info(<span class="hljs-string">&quot;加锁失败，超过重试次数，直接返回 retryCount= &#123;&#125;&quot;</span>, retryCount);<br>                return <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 解锁</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> void unlock(RedisLock annotation, ProceedingJoinPoint joinPoint) &#123;<br>        <span class="hljs-comment">// 拼接redisLock的key</span><br>        String redisLockKey = get<span class="hljs-constructor">FinallyKeyLock(<span class="hljs-params">annotation</span>, <span class="hljs-params">joinPoint</span>)</span>;<br>        String requestID = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">REQUEST_ID_MAP</span>.</span></span>get<span class="hljs-constructor">RequestID(<span class="hljs-params">redisLockKey</span>)</span>;<br>        <span class="hljs-keyword">if</span> (requestID != null) &#123;<br>            <span class="hljs-comment">// 解锁成功</span><br>            boolean unLockSuccess = distributeLock.un<span class="hljs-constructor">Lock(<span class="hljs-params">redisLockKey</span>, <span class="hljs-params">requestID</span>)</span>;<br>            <span class="hljs-keyword">if</span> (unLockSuccess) &#123;<br>                <span class="hljs-comment">// 移除 ThreadLocal中的数据，防止内存泄漏</span><br>                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">REQUEST_ID_MAP</span>.</span></span>remove<span class="hljs-constructor">RequestID(<span class="hljs-params">redisLockKey</span>)</span>;<br>                logger.info(<span class="hljs-string">&quot;解锁成功 redisLockKey= &quot;</span> + redisLockKey);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            logger.info(<span class="hljs-string">&quot;解锁失败 redisLockKey= &quot;</span> + redisLockKey);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 拼接redisLock的key</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String get<span class="hljs-constructor">FinallyKeyLock(RedisLock <span class="hljs-params">annotation</span>, ProceedingJoinPoint <span class="hljs-params">joinPoint</span>)</span> &#123;<br>        String applicationName = environment.get<span class="hljs-constructor">Property(<span class="hljs-string">&quot;spring.application.name&quot;</span>)</span>;<br>        <span class="hljs-keyword">if</span> (applicationName<span class="hljs-operator"> == </span>null) &#123;<br>            applicationName = <span class="hljs-string">&quot;&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// applicationName在前</span><br>        String finallyKey = applicationName + RedisConstants.KEY_SEPARATOR + <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">RedisLockKeyUtil</span>.</span></span>get<span class="hljs-constructor">FinallyLockKey(<span class="hljs-params">annotation</span>, <span class="hljs-params">joinPoint</span>)</span>;<br><br>        <span class="hljs-keyword">if</span> (finallyKey.length<span class="hljs-literal">()</span> &gt; RedisConstants.FINALLY_KEY_LIMIT) &#123;<br>            throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">RuntimeException(<span class="hljs-string">&quot;finallyLockKey is too long finallyKey=&quot;</span> + <span class="hljs-params">finallyKey</span>)</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            return finallyKey;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-8-源码参考地址"><a href="#3-8-源码参考地址" class="headerlink" title="3.8 源码参考地址"></a>3.8 源码参考地址</h2><p><a href="https://github.com/FocusProgram/person-improve/tree/main/springcloud-redis-lock">https://github.com/FocusProgram/person-improve/tree/main/springcloud-redis-lock</a></p><h2 id="3-9-总结"><a href="#3-9-总结" class="headerlink" title="3.9 总结"></a>3.9 总结</h2><p><strong>主从同步可能导致锁的互斥性失效</strong></p><ul><li><p>在redis主从结构下，出于性能的考虑，redis采用的是主从异步复制的策略，这会导致短时间内主库和从库数据短暂的不一致。</p></li><li><p>试想，当某一客户端刚刚加锁完毕，redis主库还没有来得及和从库同步就挂了，之后从库中新选拔出的主库是没有对应锁记录的，这就可能导致多个客户端加锁成功，破坏了锁的互斥性。</p></li></ul><p><strong>休眠并反复尝试加锁效率较低</strong></p><ul><li><p>lockAndRetry方法在客户端线程加锁失败后，会休眠一段时间之后再进行重试。当锁的持有者持有锁的时间很长时，其它客户端会有大量无效的重试操作，造成系统资源的浪费。</p></li><li><p>进一步优化时，可以使用发布订阅的方式。这时加锁失败的客户端会监听锁被释放的信号，在锁真正被释放时才会进行新的加锁操作，从而避免不必要的轮询操作，以提高效率。</p></li></ul><p><strong>不是一个公平的锁</strong></p><ul><li><p>当前实现版本中，多个客户端同时对锁进行抢占时，是完全随机的，既不遵循先来后到的顺序，客户端之间也没有加锁的优先级区别。</p></li><li><p>后续优化时可以提供一个创建公平锁的接口，能指定加锁的优先级，内部使用一个优先级队列维护加锁客户端的顺序。公平锁虽然效率稍低，但在一些场景能更好的控制并发行为。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>微服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
      <tag>微服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tx-Lcn</title>
    <link href="/2020/07/11/Tx-Lcn/"/>
    <url>/2020/07/11/Tx-Lcn/</url>
    
    <content type="html"><![CDATA[<p><strong>Tx-lcn</strong></p><hr><h1 id="1-TX-LCN是什么？"><a href="#1-TX-LCN是什么？" class="headerlink" title="1. TX-LCN是什么？"></a>1. TX-LCN是什么？</h1><blockquote><p><a href="https://github.com/codingapi/tx-lcn">TX-LCN</a> 框架在2017年6月份发布第一个版本，从开始的1.0，已经发展到了5.0版本。<br>LCN名称是由早期版本的LCN框架命名，在设计框架之初的1.0 ~ 2.0的版本时框架设计的步骤是如下,各取其首字母得来的LCN命名。</p><p>锁定事务单元（lock）<br>确认事务模块状态(confirm)<br>通知事务(notify)</p><p>5.0以后由于框架兼容了LCN、TCC、TXC三种事务模式，为了避免区分LCN模式，特此将LCN分布式事务改名为TX-LCN分布式事务框架。</p></blockquote><h1 id="2-框架定位"><a href="#2-框架定位" class="headerlink" title="2. 框架定位"></a>2. 框架定位</h1><blockquote><p>LCN并不生产事务，LCN只是本地事务的协调工</p><p>TX-LCN定位于一款事务协调性框架，框架其本身并不操作事务，而是基于对事务的协调从而达到事务一致性的效果。</p></blockquote><h1 id="3-解决方案"><a href="#3-解决方案" class="headerlink" title="3. 解决方案"></a>3. 解决方案</h1><blockquote><p>在一个分布式系统下存在多个模块协调来完成一次业务。那么就存在一次业务事务下可能横跨多种数据源节点的可能。TX-LCN将可以解决这样的问题。</p><p>例如存在服务模块A 、B、 C。A模块是mysql作为数据源的服务，B模块是基于redis作为数据源的服务，C模块是基于mongo作为数据源的服务。若需要解决他们的事务一致性就需要针对不同的节点采用不同的方案，并且统一协调完成分布式事务的处理。</p></blockquote><p><img src="https://image.focusprogram.top/lcn.png"></p><blockquote><p>方案：</p><p>   若采用TX-LCN分布式事务框架，则可以将A模块采用LCN模式、B&#x2F;C采用TCC模式就能完美解决。</p></blockquote><h1 id="4-SpringCloud集成TX-LCN"><a href="#4-SpringCloud集成TX-LCN" class="headerlink" title="4. SpringCloud集成TX-LCN"></a>4. SpringCloud集成TX-LCN</h1><h2 id="4-1-TX-LCN模块说明"><a href="#4-1-TX-LCN模块说明" class="headerlink" title="4.1 TX-LCN模块说明"></a>4.1 TX-LCN模块说明</h2><blockquote><p>Tx-Client(TC) Tx-Manager(TM). TC作为微服务下的依赖，TM是独立的服务</p></blockquote><h2 id="4-2-TM-配置与启动"><a href="#4-2-TM-配置与启动" class="headerlink" title="4.2 TM 配置与启动"></a>4.2 TM 配置与启动</h2><h3 id="4-2-1-所需配置"><a href="#4-2-1-所需配置" class="headerlink" title="4.2.1 所需配置"></a>4.2.1 所需配置</h3><blockquote><p>jdk1.8+</p><p>mysql5.6+</p><p>redis3.2+</p></blockquote><h3 id="4-2-2-导入数据库脚本"><a href="#4-2-2-导入数据库脚本" class="headerlink" title="4.2.2 导入数据库脚本"></a>4.2.2 导入数据库脚本</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> Navicat Premium Data Transfer</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> Source Server         : local</span><br><span class="hljs-comment"> Source Server Type    : MySQL</span><br><span class="hljs-comment"> Source Server Version : 100309</span><br><span class="hljs-comment"> Source Host           : localhost:3306</span><br><span class="hljs-comment"> Source Schema         : tx-manager</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> Target Server Type    : MySQL</span><br><span class="hljs-comment"> Target Server Version : 100309</span><br><span class="hljs-comment"> File Encoding         : 65001</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> Date: 29/12/2018 18:35:59</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span>  `tx-manager` <span class="hljs-keyword">DEFAULT</span> CHARSET utf8 <span class="hljs-keyword">COLLATE</span> utf8_general_ci;<br>USE `tx-manager`;<br><br><span class="hljs-keyword">SET NAMES</span> utf8mb4;<br><span class="hljs-keyword">SET</span> FOREIGN_KEY_CHECKS = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Table structure for t_tx_exception</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> `t_tx_exception`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `t_tx_exception`  (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `group_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_general_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `unit_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_general_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `mod_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_general_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `transaction_state` tinyint(<span class="hljs-number">4</span>) <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `registrar` tinyint(<span class="hljs-number">4</span>) <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `ex_state` tinyint(<span class="hljs-number">4</span>) <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;0 待处理 1已处理&#x27;</span>,<br>  `remark` <span class="hljs-type">varchar</span>(<span class="hljs-number">10240</span>) <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;备注&#x27;</span>,<br>  `create_time` datetime(<span class="hljs-number">0</span>) <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY KEY</span> (`id`) <span class="hljs-keyword">USING</span> BTREE<br>) ENGINE = InnoDB AUTO_INCREMENT = <span class="hljs-number">967</span> <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> = utf8mb4 <span class="hljs-keyword">COLLATE</span> = utf8mb4_general_ci ROW_FORMAT = Dynamic;<br><br><span class="hljs-keyword">SET</span> FOREIGN_KEY_CHECKS = <span class="hljs-number">1</span>;<br><br></code></pre></td></tr></table></figure><h3 id="4-2-3-TM版本下载"><a href="#4-2-3-TM版本下载" class="headerlink" title="4.2.3 TM版本下载"></a>4.2.3 TM版本下载</h3><p><a href="https://github.com/codingapi/tx-lcn/releases">https://github.com/codingapi/tx-lcn/releases</a></p><h3 id="4-2-4-源码编译"><a href="#4-2-4-源码编译" class="headerlink" title="4.2.4 源码编译"></a>4.2.4 源码编译</h3><p>编辑配置文件&#x2F;tx-lcn&#x2F;txlcn-tm&#x2F;src&#x2F;main&#x2F;resources&#x2F;application.properties如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">spring.application.name</span>=TransactionManager<br><span class="hljs-attr">server.port</span>=<span class="hljs-number">7970</span><br><span class="hljs-attr">spring.datasource.driver-class-name</span>=com.mysql.jdbc.Driver<br><span class="hljs-attr">spring.datasource.url</span>=jdbc:mysql://<span class="hljs-number">114.55</span>.<span class="hljs-number">34.44</span>:<span class="hljs-number">3306</span>/tx-manager?characterEncoding=UTF-<span class="hljs-number">8</span><br><span class="hljs-attr">spring.datasource.username</span>=root<br><span class="hljs-attr">spring.datasource.password</span>=root<br><br><span class="hljs-comment">#spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect</span><br><span class="hljs-comment">#spring.jpa.hibernate.ddl-auto=update</span><br><br><br><span class="hljs-attr">mybatis.configuration.map-underscore-to-camel-case</span>=<span class="hljs-literal">true</span><br><span class="hljs-attr">mybatis.configuration.use-generated-keys</span>=<span class="hljs-literal">true</span><br><br><span class="hljs-comment">#tx-lcn.logger.enabled=true</span><br><span class="hljs-comment"># TxManager Host Ip</span><br><span class="hljs-comment">#tx-lcn.manager.host=127.0.0.1</span><br><span class="hljs-comment"># TxClient连接请求端口</span><br><span class="hljs-comment">#tx-lcn.manager.port=8070</span><br><span class="hljs-comment"># 心跳检测时间(ms)</span><br><span class="hljs-comment">#tx-lcn.manager.heart-time=15000</span><br><span class="hljs-comment"># 分布式事务执行总时间</span><br><span class="hljs-comment">#tx-lcn.manager.dtx-time=30000</span><br><span class="hljs-comment">#参数延迟删除时间单位ms</span><br><span class="hljs-comment">#tx-lcn.message.netty.attr-delay-time=10000</span><br><span class="hljs-comment">#tx-lcn.manager.concurrent-level=128</span><br><span class="hljs-comment"># 开启日志</span><br><span class="hljs-comment">#tx-lcn.logger.enabled=true</span><br><span class="hljs-comment">#logging.level.com.codingapi=debug</span><br><span class="hljs-comment">#redis 主机</span><br><span class="hljs-attr">spring.redis.host</span>=<span class="hljs-number">114.55</span>.<span class="hljs-number">34.44</span><br><span class="hljs-comment">#redis 端口</span><br><span class="hljs-attr">spring.redis.port</span>=<span class="hljs-number">6379</span><br><span class="hljs-comment">#redis 密码</span><br><span class="hljs-attr">spring.redis.password</span>=root<br></code></pre></td></tr></table></figure><p>注意：pom.xml文件中添加如下配置，否则无法正常运行</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p>编译：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">mvn clean  <span class="hljs-keyword">package</span> -Dmaven.test.skip=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>编译成功显示如下：</p><p><img src="https://image.focusprogram.top/20200313201811.png"></p><h3 id="4-2-4-启动"><a href="#4-2-4-启动" class="headerlink" title="4.2.4 启动"></a>4.2.4 启动</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">java</span> -jar txlcn-tm-<span class="hljs-number">5</span>.<span class="hljs-number">0</span>.<span class="hljs-number">2</span>.RELEASE.jar<br></code></pre></td></tr></table></figure><p>成功启动，访问 <a href="http://127.0.0.1:7970/admin/index.html#/login">http://127.0.0.1:7970/admin/index.html#/login</a> 默认密码 codingapi</p><p><img src="https://image.focusprogram.top/20200313212742.jpg"></p><h2 id="4-3-TC-微服务模块"><a href="#4-3-TC-微服务模块" class="headerlink" title="4.3 TC 微服务模块"></a>4.3 TC 微服务模块</h2><h3 id="4-3-1-微服务模块"><a href="#4-3-1-微服务模块" class="headerlink" title="4.3.1 微服务模块"></a>4.3.1 微服务模块</h3><p><img src="https://image.focusprogram.top/quick_arch.png"></p><blockquote><p>服务A作为DTX发起方，远程调用服务B</p></blockquote><h3 id="4-3-2-引入maven依赖"><a href="#4-3-2-引入maven依赖" class="headerlink" title="4.3.2 引入maven依赖"></a>4.3.2 引入maven依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.codingapi.txlcn<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>txlcn-tc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.0.2.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.codingapi.txlcn<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>txlcn-txmsg-netty<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.0.2.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-3-3-TC开启分布式事务注解"><a href="#4-3-3-TC开启分布式事务注解" class="headerlink" title="4.3.3 TC开启分布式事务注解"></a>4.3.3 TC开启分布式事务注解</h3><p>在主类上使用@EnableDistributedTransaction</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@SpringBootApplication</span><br><span class="hljs-variable">@EnableDistributedTransaction</span><br>public class DemoAApplication &#123;<br><br>    <span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">static</span> <span class="hljs-selector-tag">void</span> <span class="hljs-selector-tag">main</span>(String[] args) &#123;<br>        <span class="hljs-selector-tag">SpringApplication</span><span class="hljs-selector-class">.run</span>(DemoDubboClientApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>TC微服务A业务方法配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServiceA</span> &#123;<br>    <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ValueDao valueDao; <span class="hljs-comment">//本地db操作</span><br>    <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ServiceB serviceB;<span class="hljs-comment">//远程B模块业务</span><br>    <br>    <span class="hljs-meta">@LcnTransaction</span> <span class="hljs-comment">//分布式事务注解</span><br>    <span class="hljs-meta">@Transactional</span> <span class="hljs-comment">//本地事务注解</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">execute</span><span class="hljs-params">(String value)</span> <span class="hljs-keyword">throws</span> BusinessException &#123;<br>        <span class="hljs-comment">// step1. call remote service B</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> serviceB.rpc(value);  <span class="hljs-comment">// (1)</span><br>        <span class="hljs-comment">// step2. local store operate. DTX commit if save success, rollback if not.</span><br>        valueDao.save(value);  <span class="hljs-comment">// (2)</span><br>        valueDao.saveBackup(value);  <span class="hljs-comment">// (3)</span><br>        <span class="hljs-keyword">return</span> result + <span class="hljs-string">&quot; &gt; &quot;</span> + <span class="hljs-string">&quot;ok-A&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>TC微服务B业务方法配置</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServiceB</span> </span>&#123;<br>    <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ValueDao valueDao; <span class="hljs-comment">//本地db操作</span><br>    <br>    <span class="hljs-meta">@LcnTransaction</span> <span class="hljs-comment">//分布式事务注解</span><br>    <span class="hljs-meta">@Transactional</span>  <span class="hljs-comment">//本地事务注解</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function">String <span class="hljs-title">rpc</span><span class="hljs-params">(String value)</span> <span class="hljs-keyword">throws</span> BusinessException </span>&#123;<br>        valueDao.save(value);  <span class="hljs-comment">// (4)</span><br>        valueDao.saveBackup(value);  <span class="hljs-comment">// (5)</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok-B&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>TC配置信息说明<br>默认之配置为TM的本机默认端口</p><blockquote><p>tx-lcn.client.manager-address&#x3D;127.0.0.1:8070 </p></blockquote><h2 id="4-4-springcloud集成tx-lcn源码"><a href="#4-4-springcloud集成tx-lcn源码" class="headerlink" title="4.4 springcloud集成tx-lcn源码"></a>4.4 <a href="https://github.com/FocusProgram/person-improve/tree/main/springcloud-txlcn">springcloud集成tx-lcn源码</a></h2>]]></content>
    
    
    <categories>
      
      <category>微服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
      <tag>微服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Seata</title>
    <link href="/2020/07/11/Seata/"/>
    <url>/2020/07/11/Seata/</url>
    
    <content type="html"><![CDATA[<p><strong>Seata</strong></p><hr><h2 id="1-什么是Seata"><a href="#1-什么是Seata" class="headerlink" title="1. 什么是Seata?"></a>1. 什么是Seata?</h2><blockquote><p><a href="https://github.com/seata/seata">Seata</a> 是一款开源的分布式事务解决方案，致力于提供高性能和简单易用的分布式事务服务。Seata 将为用户提供了 AT、TCC、SAGA 和 XA<br>事务模式，为用户打造一站式的分布式解决方案。微服务体系结构具有高性能和易于使用的分布式事务解决方案</p></blockquote><h2 id="2-发展历史"><a href="#2-发展历史" class="headerlink" title="2. 发展历史"></a>2. 发展历史</h2><p><strong>蚂蚁金服：</strong></p><ul><li><p>Xts：扩展事务服务。 蚂蚁金服中间件团队从2007年开始开发分布式事务中间件，该中间件广泛应用于蚂蚁金服服务，解决了数据库和服务之间的数据一致性问题。</p></li><li><p>Dtx：分布式事务扩展。 自2013年以来，XTS 已经以 DTX 的名字发布在蚂蚁金服云上。</p></li></ul><p><strong>阿里巴巴：</strong></p><ul><li><p>TXC：阿里巴巴中间件团队从2014年开始启动这个项目，以解决由于应用程序体系结构从单一向微型服务转变而导致的分布式事务问题</p></li><li><p>GTS：全球交易服务。 Txc 作为一个新名字 GTS 的阿里云中间件产品于2016年发布</p></li><li><p>Fescar：我们从2019年开始启动基于 txc &#x2F; gts 的开源项目 Fescar，以便在未来与社区密切合作</p></li><li><p>Seata：简单可扩展的自治事务架构。 蚂蚁金服加入了 Fescar，使它成为一个更加中立和开放的分布式交易社区，而 Fescar 被重命名为 Seata</p></li></ul><h2 id="3-微服务中的分布式事务问题"><a href="#3-微服务中的分布式事务问题" class="headerlink" title="3. 微服务中的分布式事务问题"></a>3. 微服务中的分布式事务问题</h2><p>传统的单体应用的场景——电商购物。 其业务由3个模块构成（库存、订单和账户），这三个模块使用各自的本地数据源。</p><p>在业务发生过程中，本地事务将保证数据的一致性。</p><p><img src="https://image.focusprogram.top/68747470733a2f2f63646e2e6e6c61726b2e636f6d2f6c61726b2f302f323031382f706e672f31383836322f313534353239363737303234342d34636564663337652d396463362d346663302d613937662d6634323430623964383634302e706e67.png"></p><p>微服务体系结构发生了变化。 上面提到的3个模块被设计成在3个不同数据源之上的3个服务(模式: 每个服务的数据库)。 本地事务自然而然地保证了每个服务中的数据一致性。</p><p><img src="https://image.focusprogram.top/68747470733a2f2f63646e2e6e6c61726b2e636f6d2f6c61726b2f302f323031382f706e672f31383836322f313534353239363738313233312d34303239646139632d383830332d343361342d616332662d3663386231653265613434382e706e67.png"></p><h2 id="4-Seata如何解决分布式事务？"><a href="#4-Seata如何解决分布式事务？" class="headerlink" title="4. Seata如何解决分布式事务？"></a>4. Seata如何解决分布式事务？</h2><h3 id="4-1-Seata解决分布式事务设计原理："><a href="#4-1-Seata解决分布式事务设计原理：" class="headerlink" title="4.1 Seata解决分布式事务设计原理："></a>4.1 Seata解决分布式事务设计原理：</h3><p><img src="https://image.focusprogram.top/68747470733a2f2f63646e2e6e6c61726b2e636f6d2f6c61726b2f302f323031382f706e672f31383836322f313534353239363739313037342d33626365376263652d303235652d343563332d393338362d3762393531333564616465382e706e67.png"></p><h3 id="4-2-如何定义分布式事务："><a href="#4-2-如何定义分布式事务：" class="headerlink" title="4.2 如何定义分布式事务："></a>4.2 如何定义分布式事务：</h3><blockquote><p>分布式事务是由一批分支事务组成的全局事务，通常分支事务就是本地事务。</p></blockquote><p><img src="https://image.focusprogram.top/68747470733a2f2f63646e2e6e6c61726b2e636f6d2f6c61726b2f302f323031382f706e672f31383836322f313534353031353435343937392d61313865313666362d656434312d343466312d396337612d6264383263346435666639392e706e67.png"></p><h3 id="4-3-Seata有3个基本组件："><a href="#4-3-Seata有3个基本组件：" class="headerlink" title="4.3 Seata有3个基本组件："></a>4.3 Seata有3个基本组件：</h3><ul><li>事务协调器（TC）：维护全局和分支事务的状态，驱动全局提交或回滚。</li><li>事务管理器（TM）：定义全局事务的范围：开始全局事务，提交或回滚全局事务。</li><li>资源管理器（RM）：管理分支事务的资源，与TC通信以注册分支事务和报告分支事务的状态，</li></ul><p><img src="https://image.focusprogram.top/68747470733a2f2f63646e2e6e6c61726b2e636f6d2f6c61726b2f302f323031382f706e672f31383836322f313534353031333931353238362d34613930663064662d356664612d343165312d393165302d3261613364333331633033352e706e67.png"></p><h3 id="4-4-Seata管理分布式事务的典型生命周期："><a href="#4-4-Seata管理分布式事务的典型生命周期：" class="headerlink" title="4.4 Seata管理分布式事务的典型生命周期："></a>4.4 Seata管理分布式事务的典型生命周期：</h3><ul><li><p>TM要求TC开始新的全局事务。 TC生成表示全局事务的XID。</p></li><li><p>XID通过微服务的调用链传播。</p></li><li><p>RM将本地事务注册为XID到TC的相应全局事务的分支。</p></li><li><p>TM要求TC提交或回滚XID的相应全局事务。</p></li><li><p>TC在XID的相应全局事务下驱动所有分支事务，以完成分支提交或回滚。</p></li></ul><p><img src="https://image.focusprogram.top/68747470733a2f2f63646e2e6e6c61726b2e636f6d2f6c61726b2f302f323031382f706e672f31383836322f313534353239363931373838312d32366661626562392d373166612d346633652d386137612d6663333137643333383966342e706e67.png"></p><h2 id="5-SpringCloud集成Seata"><a href="#5-SpringCloud集成Seata" class="headerlink" title="5. SpringCloud集成Seata"></a>5. SpringCloud集成Seata</h2><blockquote><p><a href="https://github.com/FocusProgram/person-improve/tree/main/springcloud-seata/springcloud-jpa-seata">github源码参考地址</a></p></blockquote><h3 id="5-1-运行Seata"><a href="#5-1-运行Seata" class="headerlink" title="5.1 运行Seata"></a>5.1 运行Seata</h3><h4 id="5-1-1-Seata下载地址-https-github-com-seata-seata-releases"><a href="#5-1-1-Seata下载地址-https-github-com-seata-seata-releases" class="headerlink" title="5.1.1 Seata下载地址 https://github.com/seata/seata/releases"></a>5.1.1 Seata下载地址 <a href="https://github.com/seata/seata/releases">https://github.com/seata/seata/releases</a></h4><h4 id="5-1-2-Seata配置文件"><a href="#5-1-2-Seata配置文件" class="headerlink" title="5.1.2 Seata配置文件"></a>5.1.2 Seata配置文件</h4><blockquote><p>seata server所有的配置都在conf文件夹内，该文件夹内有两个文件我们必须要详细介绍下。</p><p>seata server默认使用file（文件方式）进行存储事务日志、事务运行信息，我们可以通过-m db脚本参数的形式来指定，目前仅支持file、db这两种方式。</p></blockquote><p><strong>file.conf</strong></p><p>该文件用于配置存储方式、透传事务信息的NIO等信息，默认对应registry.conf文件内的file方式配置。</p><p><strong>registry.conf</strong></p><p>seata server核心配置文件，可以通过该文件配置服务注册方式、配置读取方式。</p><p>注册方式目前支持file 、nacos 、eureka、redis、zk、consul、etcd3、sofa等方式，默认为file，对应读取file.conf内的注册方式信息。</p><p>读取配置信息的方式支持file、nacos 、apollo、zk、consul、etcd3等方式，默认为file，对应读取file.conf文件内的配置。</p><h4 id="5-1-3-运行Seata"><a href="#5-1-3-运行Seata" class="headerlink" title="5.1.3 运行Seata"></a>5.1.3 运行Seata</h4><p><strong>windows环境下</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">seata-server<span class="hljs-selector-class">.bat</span> -<span class="hljs-selector-tag">p</span> <span class="hljs-number">8091</span> -m file<br></code></pre></td></tr></table></figure><p><strong>Linux环境下</strong></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">sh</span> seata-server.<span class="hljs-keyword">sh</span> -p 8091 -<span class="hljs-keyword">m</span> <span class="hljs-keyword">file</span>                       #以前台运行方式运行seata<br><br>nohup <span class="hljs-keyword">sh</span> seata-server.<span class="hljs-keyword">sh</span> -p 8091 -<span class="hljs-keyword">h</span> 127.0.0.1 -<span class="hljs-keyword">m</span> <span class="hljs-keyword">file</span> &amp;&gt; seata.<span class="hljs-keyword">log</span> &amp;            #以后台方运行式启动seata<br></code></pre></td></tr></table></figure><blockquote><p>–host -h 指定绑定主机号，默认0.0.0.0</p><p>–port -p 指定监听端口号，默认8091</p><p>–storeMOde -m 日志存储方式（file、db）,默认file</p></blockquote><h3 id="5-2-初始化sql脚本"><a href="#5-2-初始化sql脚本" class="headerlink" title="5.2 初始化sql脚本"></a>5.2 初始化sql脚本</h3><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"># Account<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">SCHEMA</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> db_account;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">SCHEMA</span> db_account;<br>USE db_account;<br><br><span class="hljs-keyword">CREATE</span> TABLE <span class="hljs-symbol">`account_tbl`</span><br>(<br>    <span class="hljs-symbol">`id`</span>      INT(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT,<br>    <span class="hljs-symbol">`user_id`</span> VARCHAR(<span class="hljs-number">255</span>) DEFAULT <span class="hljs-literal">NULL</span>,<br>    <span class="hljs-symbol">`money`</span>   INT(<span class="hljs-number">11</span>)      DEFAULT <span class="hljs-number">0</span>,<br>    <span class="hljs-keyword">PRIMARY</span> <span class="hljs-keyword">KEY</span> (<span class="hljs-symbol">`id`</span>)<br>) ENGINE = InnoDB<br>  DEFAULT CHARSET = utf8;<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> account_tbl (id, user_id, money)<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;1001&#x27;</span>, <span class="hljs-number">10000</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> account_tbl (id, user_id, money)<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;1002&#x27;</span>, <span class="hljs-number">10000</span>);<br><br><span class="hljs-keyword">CREATE</span> TABLE <span class="hljs-symbol">`undo_log`</span> (<br>  <span class="hljs-symbol">`id`</span> bigint(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT,<br>  <span class="hljs-symbol">`branch_id`</span> bigint(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>  <span class="hljs-symbol">`xid`</span> varchar(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>  <span class="hljs-symbol">`context`</span> varchar(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>  <span class="hljs-symbol">`rollback_info`</span> longblob <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>  <span class="hljs-symbol">`log_status`</span> int(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>  <span class="hljs-symbol">`log_created`</span> datetime <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>  <span class="hljs-symbol">`log_modified`</span> datetime <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> <span class="hljs-keyword">KEY</span> (<span class="hljs-symbol">`id`</span>),<br>  <span class="hljs-keyword">UNIQUE</span> <span class="hljs-keyword">KEY</span> <span class="hljs-symbol">`ux_undo_log`</span> (<span class="hljs-symbol">`xid`</span>,<span class="hljs-symbol">`branch_id`</span>)<br>) ENGINE=InnoDB AUTO_INCREMENT=<span class="hljs-number">1</span> DEFAULT CHARSET=utf8;<br><br># Order<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">SCHEMA</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> db_order;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">SCHEMA</span> db_order;<br>USE db_order;<br><br><span class="hljs-keyword">CREATE</span> TABLE <span class="hljs-symbol">`order_tbl`</span><br>(<br>    <span class="hljs-symbol">`id`</span>             INT(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT,<br>    <span class="hljs-symbol">`user_id`</span>        VARCHAR(<span class="hljs-number">255</span>) DEFAULT <span class="hljs-literal">NULL</span>,<br>    <span class="hljs-symbol">`commodity_code`</span> VARCHAR(<span class="hljs-number">255</span>) DEFAULT <span class="hljs-literal">NULL</span>,<br>    <span class="hljs-symbol">`count`</span>          INT(<span class="hljs-number">11</span>)      DEFAULT <span class="hljs-string">&#x27;0&#x27;</span>,<br>    <span class="hljs-symbol">`money`</span>          INT(<span class="hljs-number">11</span>)      DEFAULT <span class="hljs-string">&#x27;0&#x27;</span>,<br>    <span class="hljs-keyword">PRIMARY</span> <span class="hljs-keyword">KEY</span> (<span class="hljs-symbol">`id`</span>)<br>) ENGINE = InnoDB<br>  DEFAULT CHARSET = utf8;<br><br><span class="hljs-keyword">CREATE</span> TABLE <span class="hljs-symbol">`undo_log`</span> (<br>  <span class="hljs-symbol">`id`</span> bigint(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT,<br>  <span class="hljs-symbol">`branch_id`</span> bigint(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>  <span class="hljs-symbol">`xid`</span> varchar(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>  <span class="hljs-symbol">`context`</span> varchar(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>  <span class="hljs-symbol">`rollback_info`</span> longblob <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>  <span class="hljs-symbol">`log_status`</span> int(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>  <span class="hljs-symbol">`log_created`</span> datetime <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>  <span class="hljs-symbol">`log_modified`</span> datetime <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> <span class="hljs-keyword">KEY</span> (<span class="hljs-symbol">`id`</span>),<br>  <span class="hljs-keyword">UNIQUE</span> <span class="hljs-keyword">KEY</span> <span class="hljs-symbol">`ux_undo_log`</span> (<span class="hljs-symbol">`xid`</span>,<span class="hljs-symbol">`branch_id`</span>)<br>) ENGINE=InnoDB AUTO_INCREMENT=<span class="hljs-number">1</span> DEFAULT CHARSET=utf8;<br><br># Storage<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">SCHEMA</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> db_storage;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">SCHEMA</span> db_storage;<br>USE db_storage;<br><br><span class="hljs-keyword">CREATE</span> TABLE <span class="hljs-symbol">`storage_tbl`</span><br>(<br>    <span class="hljs-symbol">`id`</span>             INT(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT,<br>    <span class="hljs-symbol">`commodity_code`</span> VARCHAR(<span class="hljs-number">255</span>) DEFAULT <span class="hljs-literal">NULL</span>,<br>    <span class="hljs-symbol">`count`</span>          INT(<span class="hljs-number">11</span>)      DEFAULT <span class="hljs-string">&#x27;0&#x27;</span>,<br>    <span class="hljs-keyword">PRIMARY</span> <span class="hljs-keyword">KEY</span> (<span class="hljs-symbol">`id`</span>),<br>    <span class="hljs-keyword">UNIQUE</span> <span class="hljs-keyword">KEY</span> <span class="hljs-symbol">`commodity_code`</span> (<span class="hljs-symbol">`commodity_code`</span>)<br>) ENGINE = InnoDB<br>  DEFAULT CHARSET = utf8;<br><br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> storage_tbl (id, commodity_code, <span class="hljs-built_in">count</span>)<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;2001&#x27;</span>, <span class="hljs-number">1000</span>);<br><br><span class="hljs-keyword">CREATE</span> TABLE <span class="hljs-symbol">`undo_log`</span> (<br>  <span class="hljs-symbol">`id`</span> bigint(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT,<br>  <span class="hljs-symbol">`branch_id`</span> bigint(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>  <span class="hljs-symbol">`xid`</span> varchar(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>  <span class="hljs-symbol">`context`</span> varchar(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>  <span class="hljs-symbol">`rollback_info`</span> longblob <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>  <span class="hljs-symbol">`log_status`</span> int(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>  <span class="hljs-symbol">`log_created`</span> datetime <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>  <span class="hljs-symbol">`log_modified`</span> datetime <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> <span class="hljs-keyword">KEY</span> (<span class="hljs-symbol">`id`</span>),<br>  <span class="hljs-keyword">UNIQUE</span> <span class="hljs-keyword">KEY</span> <span class="hljs-symbol">`ux_undo_log`</span> (<span class="hljs-symbol">`xid`</span>,<span class="hljs-symbol">`branch_id`</span>)<br>) ENGINE=InnoDB AUTO_INCREMENT=<span class="hljs-number">1</span> DEFAULT CHARSET=utf8;<br></code></pre></td></tr></table></figure><h3 id="5-3-项目结构"><a href="#5-3-项目结构" class="headerlink" title="5.3 项目结构"></a>5.3 项目结构</h3><ul><li>order-servie 订单服务</li><li>business-service 商户服务</li><li>order-service 订单服务</li><li>storage-service 仓储服务</li></ul><p><img src="https://image.focusprogram.top/20200311152423.png"></p><h3 id="5-4-引入maven依赖"><a href="#5-4-引入maven依赖" class="headerlink" title="5.4 引入maven依赖"></a>5.4 引入maven依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.seata<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>seata-all<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.0.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.11<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.0.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.0.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-5-配置文件"><a href="#5-5-配置文件" class="headerlink" title="5.5 配置文件"></a>5.5 配置文件</h3><blockquote><p>file.conf 的 service.vgroup_mapping 配置必须和spring.application.name一致<br>在 org.springframework.cloud:spring-cloud-starter-alibaba-seata的org.springframework.cloud.alibaba.seata.GlobalTransactionAutoConfiguration类中，默认会使用 ${spring.application.name}-fescar-service-group作为服务名注册到 Seata Server上，如果和file.conf中的配置不一致，会提示 no available server to connect错误</p><p>也可以通过配置 spring.cloud.alibaba.seata.tx-service-group修改后缀，但是必须和file.conf中的配置保持一致</p></blockquote><p><img src="https://image.focusprogram.top/20200311154141.png"></p><p><img src="https://image.focusprogram.top/20200311154205.png"></p><p><strong>application.properties</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">spring.application.name</span>=account-service<br><span class="hljs-attr">server.port</span>=<span class="hljs-number">8083</span><br><span class="hljs-attr">spring.datasource.url</span>=jdbc:mysql://localhost:<span class="hljs-number">3306</span>/db_account?useSSL=<span class="hljs-literal">false</span>&amp;serverTimezone=UTC<br><span class="hljs-attr">spring.datasource.username</span>=root<br><span class="hljs-attr">spring.datasource.password</span>=root<br><span class="hljs-attr">spring.jpa.show-sql</span>=<span class="hljs-literal">true</span><br><span class="hljs-attr">spring.cloud.alibaba.seata.tx-service-group</span>=my_group<br></code></pre></td></tr></table></figure><p><strong>file.conf</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs abnf">service &#123;<br>  vgroupMapping.my_group <span class="hljs-operator">=</span> <span class="hljs-string">&quot;account-service&quot;</span><br>  account-service.grouplist <span class="hljs-operator">=</span> <span class="hljs-string">&quot;127.0.0.1:8091&quot;</span><br>  enableDegrade <span class="hljs-operator">=</span> false<br>  disableGlobalTransaction <span class="hljs-operator">=</span> false<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-6-启动项目，显示如下证明启动成功："><a href="#5-6-启动项目，显示如下证明启动成功：" class="headerlink" title="5.6 启动项目，显示如下证明启动成功："></a>5.6 启动项目，显示如下证明启动成功：</h3><p><img src="https://image.focusprogram.top/20200311154701.png"></p><p><img src="https://image.focusprogram.top/20200311154722.png"></p><p><img src="https://image.focusprogram.top/20200311154807.png"></p><p><img src="https://image.focusprogram.top/20200311154749.png"></p><h3 id="5-7-测试："><a href="#5-7-测试：" class="headerlink" title="5.7 测试："></a>5.7 测试：</h3><p>无错误成功提交：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8084</span><span class="hljs-regexp">/purchase/</span>commit<br></code></pre></td></tr></table></figure><blockquote><p>完成后可以看到数据库中 account_tbl的id为1的money会减少 5，order_tbl中会新增一条记录，storage_tbl的id为1的count字段减少 1</p></blockquote><p>发生异常事务回滚:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8084</span><span class="hljs-regexp">/purchase/</span>rollback<br></code></pre></td></tr></table></figure><blockquote><p>此时 account-service 会抛出异常，发生回滚，待完成后数据库中的数据没有发生变化，回滚成功</p></blockquote><h2 id="6-SpringCloud集成Seata-Nacos"><a href="#6-SpringCloud集成Seata-Nacos" class="headerlink" title="6. SpringCloud集成Seata+Nacos"></a>6. SpringCloud集成Seata+Nacos</h2><blockquote><p><a href="https://github.com/FocusProgram/person-improve/tree/main/springcloud-seata/springcloud-nacos-seata">github源码参考地址</a></p></blockquote><h3 id="6-1-运行Seata"><a href="#6-1-运行Seata" class="headerlink" title="6.1 运行Seata"></a>6.1 运行Seata</h3><h4 id="6-1-1-编辑配置文件conf-x2F-registry-conf"><a href="#6-1-1-编辑配置文件conf-x2F-registry-conf" class="headerlink" title="6.1.1 编辑配置文件conf&#x2F;registry.conf"></a>6.1.1 编辑配置文件conf&#x2F;registry.conf</h4><blockquote><p>注：serverAddr不能带‘http:&#x2F;&#x2F;’前缀</p></blockquote><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs fsharp"><span class="hljs-keyword">registry</span> &#123;<br>  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa<br>  <span class="hljs-keyword">type</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;nacos&quot;</span><br><br>  <span class="hljs-keyword">nacos</span> &#123;<br>    serverAddr <span class="hljs-operator">=</span> <span class="hljs-string">&quot;114.55.34.44&quot;</span><br>    <span class="hljs-keyword">namespace</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span><br>    cluster <span class="hljs-operator">=</span> <span class="hljs-string">&quot;default&quot;</span><br>  &#125;<br>&#125;<br><span class="hljs-keyword">config</span> &#123;<br>  # file、nacos 、apollo、zk、consul、etcd3<br>  <span class="hljs-keyword">type</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;nacos&quot;</span><br>  <span class="hljs-keyword">nacos</span> &#123;<br>    serverAddr <span class="hljs-operator">=</span> <span class="hljs-string">&quot;114.55.34.44&quot;</span><br>    <span class="hljs-keyword">namespace</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span><br>    cluster <span class="hljs-operator">=</span> <span class="hljs-string">&quot;default&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-1-2-编辑配置文件conf-x2F-nacos-config-txt-仅限seata-service-1-1-0版本以下"><a href="#6-1-2-编辑配置文件conf-x2F-nacos-config-txt-仅限seata-service-1-1-0版本以下" class="headerlink" title="6.1.2 编辑配置文件conf&#x2F;nacos-config.txt(仅限seata-service-1.1.0版本以下)"></a>6.1.2 编辑配置文件conf&#x2F;nacos-config.txt(仅限seata-service-1.1.0版本以下)</h4><p>service.vgroup_mapping.${your-service-gruop}&#x3D;default，中间的${your-service-gruop}为自己定义的服务组名称，服务中的application.properties文件里配置服务组名称。</p><p>demo中有两个服务，分别是storage-service和order-service，所以配置如下:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">service.vgroup_mapping.<span class="hljs-keyword">storage</span>-service-<span class="hljs-keyword">group</span>=<span class="hljs-keyword">default</span><br>service.vgroup_mapping.<span class="hljs-keyword">order</span>-service-<span class="hljs-keyword">group</span>=<span class="hljs-keyword">default</span><br></code></pre></td></tr></table></figure><p>初始化seata的nacos配置：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">cd conf<br><span class="hljs-keyword">sh </span>nacos-<span class="hljs-built_in">config</span>.<span class="hljs-keyword">sh </span><span class="hljs-number">114</span>.<span class="hljs-number">55</span>.<span class="hljs-number">34</span>.<span class="hljs-number">44</span>  <span class="hljs-comment">#114.55.34.44为nacos的服务器地址</span><br></code></pre></td></tr></table></figure><p>seata-service-1.1.0版本在Nacos手动添加配置:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">service.vgroupMapping.<span class="hljs-keyword">storage</span>-service-<span class="hljs-keyword">group</span>=<span class="hljs-keyword">default</span><br>service.vgroupMapping.<span class="hljs-keyword">order</span>-service-<span class="hljs-keyword">group</span>=<span class="hljs-keyword">default</span><br></code></pre></td></tr></table></figure><p>启动seata-service:</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">cd</span> bin<br><span class="hljs-keyword">sh</span> seata-server.<span class="hljs-keyword">sh</span> -p 8091 -<span class="hljs-keyword">m</span> <span class="hljs-keyword">file</span><br></code></pre></td></tr></table></figure><p>成功启动后显示如下：</p><p><img src="https://image.focusprogram.top/20200311205043.png"></p><p><img src="https://image.focusprogram.top/20200311205111.png"></p><h4 id="6-1-3-初始化sql脚本"><a href="#6-1-3-初始化sql脚本" class="headerlink" title="6.1.3 初始化sql脚本"></a>6.1.3 初始化sql脚本</h4><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">-- 创建 order库、业务表、undo_log表<br>create database seat<span class="hljs-built_in">a_order</span><span class="hljs-comment">;</span><br>use seat<span class="hljs-built_in">a_order</span><span class="hljs-comment">;</span><br><br>DROP TABLE IF EXISTS `order_tbl`;<br>CREATE TABLE `order_tbl` (<br>  `id` int(<span class="hljs-number">11</span>) <span class="hljs-literal">NOT</span> NULL AUTO_INCREMENT,<br>  `user_id` varchar(<span class="hljs-number">255</span>) DEFAULT NULL,<br>  `commodity_code` varchar(<span class="hljs-number">255</span>) DEFAULT NULL,<br>  `count` int(<span class="hljs-number">11</span>) DEFAULT <span class="hljs-number">0</span>,<br>  `money` int(<span class="hljs-number">11</span>) DEFAULT <span class="hljs-number">0</span>,<br>  PRIMARY KEY (`id`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8<span class="hljs-comment">;</span><br><br>CREATE TABLE `undo_log`<br>(<br>  `id`            BIGINT(<span class="hljs-number">20</span>)   <span class="hljs-literal">NOT</span> NULL AUTO_INCREMENT,<br>  `branch_id`     BIGINT(<span class="hljs-number">20</span>)   <span class="hljs-literal">NOT</span> NULL,<br>  `xid`           VARCHAR(<span class="hljs-number">100</span>) <span class="hljs-literal">NOT</span> NULL,<br>  `context`       VARCHAR(<span class="hljs-number">128</span>) <span class="hljs-literal">NOT</span> NULL,<br>  `rollback_info` LONGBLOB     <span class="hljs-literal">NOT</span> NULL,<br>  `log_status`    INT(<span class="hljs-number">11</span>)      <span class="hljs-literal">NOT</span> NULL,<br>  `log_created`   DATETIME     <span class="hljs-literal">NOT</span> NULL,<br>  `log_modified`  DATETIME     <span class="hljs-literal">NOT</span> NULL,<br>  `ext`           VARCHAR(<span class="hljs-number">100</span>) DEFAULT NULL,<br>  PRIMARY KEY (`id`),<br>  UNIQUE KEY `ux_undo_log` (`xid`, `branch_id`)<br>) ENGINE = InnoDB<br>  AUTO_INCREMENT = <span class="hljs-number">1</span><br>  DEFAULT CHARSET = utf8<span class="hljs-comment">;</span><br><br><br>-- 创建 storage库、业务表、undo_log表<br>create database seat<span class="hljs-built_in">a_storage</span><span class="hljs-comment">;</span><br>use seat<span class="hljs-built_in">a_storage</span><span class="hljs-comment">;</span><br><br>DROP TABLE IF EXISTS `storage_tbl`;<br>CREATE TABLE `storage_tbl` (<br>  `id` int(<span class="hljs-number">11</span>) <span class="hljs-literal">NOT</span> NULL AUTO_INCREMENT,<br>  `commodity_code` varchar(<span class="hljs-number">255</span>) DEFAULT NULL,<br>  `count` int(<span class="hljs-number">11</span>) DEFAULT <span class="hljs-number">0</span>,<br>  PRIMARY KEY (`id`),<br>  UNIQUE KEY (`commodity_code`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8<span class="hljs-comment">;</span><br><br>CREATE TABLE `undo_log`<br>(<br>  `id`            BIGINT(<span class="hljs-number">20</span>)   <span class="hljs-literal">NOT</span> NULL AUTO_INCREMENT,<br>  `branch_id`     BIGINT(<span class="hljs-number">20</span>)   <span class="hljs-literal">NOT</span> NULL,<br>  `xid`           VARCHAR(<span class="hljs-number">100</span>) <span class="hljs-literal">NOT</span> NULL,<br>  `context`       VARCHAR(<span class="hljs-number">128</span>) <span class="hljs-literal">NOT</span> NULL,<br>  `rollback_info` LONGBLOB     <span class="hljs-literal">NOT</span> NULL,<br>  `log_status`    INT(<span class="hljs-number">11</span>)      <span class="hljs-literal">NOT</span> NULL,<br>  `log_created`   DATETIME     <span class="hljs-literal">NOT</span> NULL,<br>  `log_modified`  DATETIME     <span class="hljs-literal">NOT</span> NULL,<br>  `ext`           VARCHAR(<span class="hljs-number">100</span>) DEFAULT NULL,<br>  PRIMARY KEY (`id`),<br>  UNIQUE KEY `ux_undo_log` (`xid`, `branch_id`)<br>) ENGINE = InnoDB<br>  AUTO_INCREMENT = <span class="hljs-number">1</span><br>  DEFAULT CHARSET = utf8<span class="hljs-comment">;</span><br><br>-- 初始化库存模拟数据<br>INSERT INTO seat<span class="hljs-built_in">a_storage</span>.storage_tbl (id, commodity_code, count) VALUES (<span class="hljs-number">1</span>, &#x27;product-<span class="hljs-number">1</span>&#x27;, <span class="hljs-number">9999999</span>)<span class="hljs-comment">;</span><br>INSERT INTO seat<span class="hljs-built_in">a_storage</span>.storage_tbl (id, commodity_code, count) VALUES (<span class="hljs-number">2</span>, &#x27;product-<span class="hljs-number">2</span>&#x27;, <span class="hljs-number">0</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h4 id="6-1-4-引入maven依赖"><a href="#6-1-4-引入maven依赖" class="headerlink" title="6.1.4 引入maven依赖"></a>6.1.4 引入maven依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- nacos --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.2.1.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- seata--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-alibaba-seata<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.0.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.seata<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>seata-all<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- mysql --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.work<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>base-framework-mysql-support<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="6-1-5-配置文件registy-conf"><a href="#6-1-5-配置文件registy-conf" class="headerlink" title="6.1.5 配置文件registy.conf"></a>6.1.5 配置文件registy.conf</h4><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs fsharp"><span class="hljs-keyword">registry</span> &#123;<br>  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa<br>  <span class="hljs-keyword">type</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;nacos&quot;</span><br><br>  <span class="hljs-keyword">nacos</span> &#123;<br>    serverAddr <span class="hljs-operator">=</span> <span class="hljs-string">&quot;114.55.34.44&quot;</span><br>    <span class="hljs-keyword">namespace</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span><br>    cluster <span class="hljs-operator">=</span> <span class="hljs-string">&quot;default&quot;</span><br>  &#125;<br>&#125;<br><span class="hljs-keyword">config</span> &#123;<br>  # file、nacos 、apollo、zk、consul、etcd3<br>  <span class="hljs-keyword">type</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;nacos&quot;</span><br>  <span class="hljs-keyword">nacos</span> &#123;<br>    serverAddr <span class="hljs-operator">=</span> <span class="hljs-string">&quot;114.55.34.44&quot;</span><br>    <span class="hljs-keyword">namespace</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span><br>    cluster <span class="hljs-operator">=</span> <span class="hljs-string">&quot;default&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-1-6-配置文件application-properties"><a href="#6-1-6-配置文件application-properties" class="headerlink" title="6.1.6 配置文件application.properties"></a>6.1.6 配置文件application.properties</h4><p><strong>order-service</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">spring.application.name</span>=order-service<br><span class="hljs-attr">server.port</span>=<span class="hljs-number">9091</span><br><br><span class="hljs-comment"># Nacos 注册中心地址</span><br><span class="hljs-attr">spring.cloud.nacos.discovery.server-addr</span> = <span class="hljs-number">114.55</span>.<span class="hljs-number">34.44</span>:<span class="hljs-number">8848</span><br><br><span class="hljs-comment"># seata 服务分组，要与服务端nacos-config.txt中service.vgroup_mapping的后缀对应</span><br><span class="hljs-attr">spring.cloud.alibaba.seata.tx-service-group</span>=order-service-group<br><span class="hljs-attr">logging.level.io.seata</span> = debug<br><br><span class="hljs-comment"># 数据源配置</span><br><span class="hljs-attr">spring.datasource.druid.url</span>=jdbc:mysql://<span class="hljs-number">114.55</span>.<span class="hljs-number">34.44</span>:<span class="hljs-number">3306</span>/seata_order?allowMultiQueries=<span class="hljs-literal">true</span><br><span class="hljs-attr">spring.datasource.druid.driverClassName</span>=com.mysql.jdbc.Driver<br><span class="hljs-attr">spring.datasource.druid.username</span>=root<br><span class="hljs-attr">spring.datasource.druid.password</span>=root<br></code></pre></td></tr></table></figure><p><strong>storage-service</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">spring.application.name</span>=storage-service<br><span class="hljs-attr">server.port</span>=<span class="hljs-number">9092</span><br><br><span class="hljs-comment"># Nacos 注册中心地址</span><br><span class="hljs-attr">spring.cloud.nacos.discovery.server-addr</span> = <span class="hljs-number">114.55</span>.<span class="hljs-number">34.44</span>:<span class="hljs-number">8848</span><br><br><span class="hljs-comment"># seata 服务分组，要与服务端nacos-config.txt中service.vgroup_mapping的后缀对应</span><br><span class="hljs-attr">spring.cloud.alibaba.seata.tx-service-group</span>=storage-service-group<br><span class="hljs-attr">logging.level.io.seata</span> = debug<br><br><span class="hljs-comment"># 数据源配置</span><br><span class="hljs-attr">spring.datasource.druid.url</span>=jdbc:mysql://<span class="hljs-number">114.55</span>.<span class="hljs-number">34.44</span>:<span class="hljs-number">3306</span>/seata_storage?allowMultiQueries=<span class="hljs-literal">true</span><br><span class="hljs-attr">spring.datasource.druid.driverClassName</span>=com.mysql.jdbc.Driver<br><span class="hljs-attr">spring.datasource.druid.username</span>=root<br><span class="hljs-attr">spring.datasource.druid.password</span>=root<br></code></pre></td></tr></table></figure><h4 id="6-1-7-启动项目"><a href="#6-1-7-启动项目" class="headerlink" title="6.1.7 启动项目"></a>6.1.7 启动项目</h4><p><img src="https://image.focusprogram.top/20200312000829.png"></p><h4 id="6-1-8-测试"><a href="#6-1-8-测试" class="headerlink" title="6.1.8 测试"></a>6.1.8 测试</h4><p>分布式事务成功，模拟正常下单、扣库存</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl localhost:<span class="hljs-number">9091</span><span class="hljs-regexp">/order/</span>placeOrder/commit<br></code></pre></td></tr></table></figure><p>分布式事务失败，模拟下单成功、扣库存失败，最终同时回滚</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl localhost:<span class="hljs-number">9091</span><span class="hljs-regexp">/order/</span>placeOrder/rollback<br></code></pre></td></tr></table></figure><blockquote><p>更多注册中心以及框架集成，<a href="https://github.com/seata/seata-samples">参考文档</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>微服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
      <tag>微服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ELK-Kafka分布式日志收集</title>
    <link href="/2020/07/11/ELK-Kafka%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/"/>
    <url>/2020/07/11/ELK-Kafka%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<p><strong>ELK-Kafka分布式日志收集</strong></p><hr><h1 id="1-ELK搭建详细教程参考"><a href="#1-ELK搭建详细教程参考" class="headerlink" title="1. ELK搭建详细教程参考"></a>1. ELK搭建详细教程参考</h1><p><a href="https://blog.csdn.net/qq_41112063/article/details/106056681">ELK详细教程-地址一</a></p><p><a href="https://github.com/FocusProgram/person-improve/blob/main/springcloud-elk/docs/ELK%E8%AF%A6%E8%A7%A3.md">ELK详细教程-地址二</a></p><h1 id="2-ELK-Kafka分布式日志收集架构设计"><a href="#2-ELK-Kafka分布式日志收集架构设计" class="headerlink" title="2. ELK-Kafka分布式日志收集架构设计"></a>2. ELK-Kafka分布式日志收集架构设计</h1><blockquote><p>使用SpringAop进行日志收集，然后通过kafka将日志发送给logstash，logstash再将日志写入elasticsearch，这样elasticsearch就有了日志数据了，最后，则使用kibana将存放在elasticsearch中的日志数据显示出来，并且可以做实时的数据图表分析等等。</p></blockquote><p><img src="http://image.focusprogram.top/elk-kafka.png"></p><h1 id="3-环境搭建部署"><a href="#3-环境搭建部署" class="headerlink" title="3. 环境搭建部署"></a>3. 环境搭建部署</h1><h2 id="3-1-环境准备"><a href="#3-1-环境准备" class="headerlink" title="3.1 环境准备"></a>3.1 环境准备</h2><table><thead><tr><th>服务名</th><th>Docker ip地址</th><th>宿主机ip地址</th><th>开放端口</th><th>功能</th></tr></thead><tbody><tr><td>elasticsearch-one</td><td>172.20.0.2</td><td>192.168.80.130</td><td>9200、9300</td><td>搜索</td></tr><tr><td>elasticsearch-two</td><td>172.20.0.3</td><td>192.168.80.130</td><td>9202、9303</td><td>搜索</td></tr><tr><td>logstash</td><td>172.20.0.4</td><td>192.168.80.130</td><td>5044</td><td>日志收集</td></tr><tr><td>kibana</td><td>172.20.0.5</td><td>192.168.80.130</td><td>5061</td><td>展示、监控</td></tr><tr><td>zookeeper</td><td>172.20.0.6</td><td>192.168.80.130</td><td>2181</td><td>注册配置中心</td></tr><tr><td>kafka</td><td>172.20.0.7</td><td>192.168.80.130</td><td>9092</td><td>消息中间件，提供发布订阅功能</td></tr><tr><td>kafka-manage</td><td>172.20.0.8</td><td>192.168.80.130</td><td>9000</td><td>kafka界面化管理</td></tr></tbody></table><p><strong>备注：</strong> 由于需要整合springboot程序，所以elasticsearch必须是集群形式，至少需要两台，否则程序启动会报错</p><h2 id="3-2-创建网络"><a href="#3-2-创建网络" class="headerlink" title="3.2 创建网络"></a>3.2 创建网络</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ docker<span class="hljs-built_in"> network </span>create <span class="hljs-attribute">--driver</span>=bridge <span class="hljs-attribute">--subnet</span>=172.20.0.1/16 elk-kafka-network<br></code></pre></td></tr></table></figure><h2 id="3-3-elasticsearch"><a href="#3-3-elasticsearch" class="headerlink" title="3.3 elasticsearch"></a>3.3 elasticsearch</h2><h3 id="3-3-1-elasticsearch配置文件"><a href="#3-3-1-elasticsearch配置文件" class="headerlink" title="3.3.1 elasticsearch配置文件"></a>3.3.1 elasticsearch配置文件</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs stylus">$ vim es-one<span class="hljs-selector-class">.yml</span><br><br>cluster<span class="hljs-selector-class">.name</span>: elasticsearch-cluster<br>node<span class="hljs-selector-class">.name</span>: es-node-one<br>network<span class="hljs-selector-class">.bind_host</span>: <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><br>network<span class="hljs-selector-class">.publish_host</span>: <span class="hljs-number">172.20</span>.<span class="hljs-number">0.2</span><br>http<span class="hljs-selector-class">.port</span>: <span class="hljs-number">9200</span><br>transport<span class="hljs-selector-class">.tcp</span><span class="hljs-selector-class">.port</span>: <span class="hljs-number">9300</span><br>http<span class="hljs-selector-class">.cors</span><span class="hljs-selector-class">.enabled</span>: true<br>http<span class="hljs-selector-class">.cors</span><span class="hljs-selector-class">.allow-origin</span>: <span class="hljs-string">&quot;*&quot;</span><br>node<span class="hljs-selector-class">.master</span>: true<br>node<span class="hljs-selector-class">.data</span>: true<br>discovery<span class="hljs-selector-class">.zen</span><span class="hljs-selector-class">.ping</span><span class="hljs-selector-class">.unicast</span><span class="hljs-selector-class">.hosts</span>: <span class="hljs-selector-attr">[<span class="hljs-string">&quot;172.20.0.2:9300&quot;</span>,<span class="hljs-string">&quot;172.20.0.3:9303&quot;</span>]</span><br>discovery<span class="hljs-selector-class">.zen</span><span class="hljs-selector-class">.minimum_master_nodes</span>: <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs stylus">$ vim es-two<span class="hljs-selector-class">.yml</span><br><br><br>cluster<span class="hljs-selector-class">.name</span>: elasticsearch-cluster<br>node<span class="hljs-selector-class">.name</span>: es-node-two<br>network<span class="hljs-selector-class">.bind_host</span>: <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><br>network<span class="hljs-selector-class">.publish_host</span>: <span class="hljs-number">172.20</span>.<span class="hljs-number">0.3</span><br>http<span class="hljs-selector-class">.port</span>: <span class="hljs-number">9202</span><br>transport<span class="hljs-selector-class">.tcp</span><span class="hljs-selector-class">.port</span>: <span class="hljs-number">9303</span><br>http<span class="hljs-selector-class">.cors</span><span class="hljs-selector-class">.enabled</span>: true<br>http<span class="hljs-selector-class">.cors</span><span class="hljs-selector-class">.allow-origin</span>: <span class="hljs-string">&quot;*&quot;</span><br>node<span class="hljs-selector-class">.master</span>: true<br>node<span class="hljs-selector-class">.data</span>: true<br>discovery<span class="hljs-selector-class">.zen</span><span class="hljs-selector-class">.ping</span><span class="hljs-selector-class">.unicast</span><span class="hljs-selector-class">.hosts</span>: <span class="hljs-selector-attr">[<span class="hljs-string">&quot;172.20.0.2:9300&quot;</span>,<span class="hljs-string">&quot;172.20.0.3:9303&quot;</span>]</span><br>discovery<span class="hljs-selector-class">.zen</span><span class="hljs-selector-class">.minimum_master_nodes</span>: <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="3-3-2-docker-compose配置文件"><a href="#3-3-2-docker-compose配置文件" class="headerlink" title="3.3.2 docker-compose配置文件"></a>3.3.2 docker-compose配置文件</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs dts">$ vim elasticsearch-one.yml<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-symbol">services:</span><br>  elasticsearch-one:<br><span class="hljs-symbol">    image:</span> elasticsearch<br><span class="hljs-symbol">    container_name:</span> elasticsearch-one<br><span class="hljs-symbol">    restart:</span> always<br><span class="hljs-symbol">    networks:</span><br><span class="hljs-symbol">      default:</span><br><span class="hljs-symbol">        ipv4_address:</span> <span class="hljs-number">172.20</span><span class="hljs-number">.0</span><span class="hljs-number">.2</span><br><span class="hljs-symbol">    ports:</span><br>      - <span class="hljs-number">9200</span>:<span class="hljs-number">9200</span><br>      - <span class="hljs-number">9300</span>:<span class="hljs-number">9300</span><br><span class="hljs-symbol">    volumes:</span><br>      - ./es-one.yml:<span class="hljs-keyword">/usr/</span>share<span class="hljs-keyword">/elasticsearch/</span>config/elasticsearch.yml<br>      - ./plugins-one:<span class="hljs-keyword">/usr/</span>share<span class="hljs-keyword">/elasticsearch/</span>plugins<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">networks:</span><br><span class="hljs-symbol">  default:</span><br><span class="hljs-symbol">    external:</span><br><span class="hljs-symbol">      name:</span> elk-kafka-network<br></code></pre></td></tr></table></figure><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs dts">$ vim elasticsearch-one.yml<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-symbol">services:</span><br>  elasticsearch-two:<br><span class="hljs-symbol">    image:</span> elasticsearch<br><span class="hljs-symbol">    container_name:</span> elasticsearch-two<br><span class="hljs-symbol">    restart:</span> always<br><span class="hljs-symbol">    networks:</span><br><span class="hljs-symbol">      default:</span><br><span class="hljs-symbol">        ipv4_address:</span> <span class="hljs-number">172.20</span><span class="hljs-number">.0</span><span class="hljs-number">.3</span><br><span class="hljs-symbol">    ports:</span><br>      - <span class="hljs-number">9202</span>:<span class="hljs-number">9202</span><br>      - <span class="hljs-number">9303</span>:<span class="hljs-number">9303</span><br><span class="hljs-symbol">    volumes:</span><br>      - ./es-two.yml:<span class="hljs-keyword">/usr/</span>share<span class="hljs-keyword">/elasticsearch/</span>config/elasticsearch.yml<br>      - ./plugins-two:<span class="hljs-keyword">/usr/</span>share<span class="hljs-keyword">/elasticsearch/</span>plugins<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">networks:</span><br><span class="hljs-symbol">  default:</span><br><span class="hljs-symbol">    external:</span><br><span class="hljs-symbol">      name:</span> elk-kafka-network<br></code></pre></td></tr></table></figure><h3 id="3-3-3-构建脚本"><a href="#3-3-3-构建脚本" class="headerlink" title="3.3.3 构建脚本"></a>3.3.3 构建脚本</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> vim <span class="hljs-built_in">build-one</span>.sh<br><br>docker<span class="hljs-literal">-compose</span> <span class="hljs-operator">-f</span> elastic<span class="hljs-built_in">search-one</span>.yml stop<br><br>docker<span class="hljs-literal">-compose</span> <span class="hljs-operator">-f</span> elastic<span class="hljs-built_in">search-one</span>.yml <span class="hljs-built_in">rm</span> <span class="hljs-literal">--force</span><br><br>docker<span class="hljs-literal">-compose</span> <span class="hljs-operator">-f</span> elastic<span class="hljs-built_in">search-one</span>.yml up <span class="hljs-literal">-d</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> vim <span class="hljs-built_in">build-two</span>.sh<br><br>docker<span class="hljs-literal">-compose</span> <span class="hljs-operator">-f</span> elastic<span class="hljs-built_in">search-two</span>.yml stop<br><br>docker<span class="hljs-literal">-compose</span> <span class="hljs-operator">-f</span> elastic<span class="hljs-built_in">search-two</span>.yml <span class="hljs-built_in">rm</span> <span class="hljs-literal">--force</span><br><br>docker<span class="hljs-literal">-compose</span> <span class="hljs-operator">-f</span> elastic<span class="hljs-built_in">search-two</span>.yml up <span class="hljs-literal">-d</span><br></code></pre></td></tr></table></figure><p>执行构建脚本</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">$ chmod +x build-<span class="hljs-keyword">one</span>.<span class="hljs-keyword">sh</span> build-<span class="hljs-keyword">two</span>.<span class="hljs-keyword">sh</span> &amp;&amp; ./build-<span class="hljs-keyword">one</span>.<span class="hljs-keyword">sh</span> &amp;&amp; ./build-<span class="hljs-keyword">two</span>.<span class="hljs-keyword">sh</span><br></code></pre></td></tr></table></figure><h2 id="3-4-logstash"><a href="#3-4-logstash" class="headerlink" title="3.4 logstash"></a>3.4 logstash</h2><h3 id="3-4-1-订阅kafka数据来源配置文件"><a href="#3-4-1-订阅kafka数据来源配置文件" class="headerlink" title="3.4.1 订阅kafka数据来源配置文件"></a>3.4.1 订阅kafka数据来源配置文件</h3><p>编辑logstash_kafka.conf</p><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs puppet"><span class="hljs-keyword">input</span> &#123;<br>  kafka &#123;<br>    <span class="hljs-attr">bootstrap_servers</span> =&gt; <span class="hljs-string">&quot;192.168.80.130:9092&quot;</span><br>    <span class="hljs-comment"># topics为kafka订阅主题名</span><br>    <span class="hljs-attr">topics</span> =&gt; [<span class="hljs-string">&quot;my_log&quot;</span>]<br>  &#125;<br>&#125;<br><span class="hljs-keyword">output</span> &#123;<br>    stdout &#123; <span class="hljs-attr">codec</span> =&gt; rubydebug &#125;<br>    <span class="hljs-keyword">elasticsearch</span> &#123;<br>       <span class="hljs-attr">hosts</span> =&gt; [<span class="hljs-string">&quot;192.168.80.130:9200&quot;</span>,<span class="hljs-string">&quot;192.168.80.130:9202&quot;</span>]<br>       <span class="hljs-attr">index</span> =&gt; <span class="hljs-string">&quot;my_log&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-4-2-docker-compose配置文件"><a href="#3-4-2-docker-compose配置文件" class="headerlink" title="3.4.2 docker-compose配置文件"></a>3.4.2 docker-compose配置文件</h3><p>编辑logstash.yml</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">version</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-attribute">services</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">logstash</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">logstash</span><br>    <span class="hljs-attribute">container_name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">logstash</span><br>    <span class="hljs-attribute">restart</span><span class="hljs-punctuation">:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attribute">networks</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">default</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">ipv4_address</span><span class="hljs-punctuation">:</span> <span class="hljs-string">172.20.0.4</span><br>    <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">5044:5044</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">4560:4560</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">8080:8080</span><br>    <span class="hljs-attribute">volumes</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./data:/data</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./config:/config</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./logs/tomcat.logs:/tomcat.logs</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./patterns:/opt/logstash/patterns</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./mysql/mysql-connector-java-5.1.46.jar:/mysql-connector-java-5.1.46.jar</span><br>    <span class="hljs-attribute">external_links</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">elasticsearch:elasticsearch</span><br>    <span class="hljs-attribute">command</span><span class="hljs-punctuation">:</span> <span class="hljs-string">bash -c &quot;chmod +x /data &amp;&amp; logstash -f logstash_kafka.conf --path.data=/data&quot;</span><br><br><span class="hljs-attribute">networks</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">default</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">external</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">elk-kafka-network</span><br></code></pre></td></tr></table></figure><h3 id="3-4-3-构建脚本"><a href="#3-4-3-构建脚本" class="headerlink" title="3.4.3 构建脚本"></a>3.4.3 构建脚本</h3><p>编辑build.sh</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell">docker<span class="hljs-literal">-compose</span> <span class="hljs-operator">-f</span> logstash.yml stop<br><br>docker<span class="hljs-literal">-compose</span> <span class="hljs-operator">-f</span> logstash.yml <span class="hljs-built_in">rm</span> <span class="hljs-literal">--force</span><br><br>docker<span class="hljs-literal">-compose</span> <span class="hljs-operator">-f</span> logstash.yml up <span class="hljs-literal">-d</span><br></code></pre></td></tr></table></figure><p>执行构建脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">chmod</span> +x build.sh &amp;&amp; ./build.sh</span><br></code></pre></td></tr></table></figure><h2 id="3-5-kibana"><a href="#3-5-kibana" class="headerlink" title="3.5 kibana"></a>3.5 kibana</h2><h3 id="3-5-1-docker-compose配置文件"><a href="#3-5-1-docker-compose配置文件" class="headerlink" title="3.5.1 docker-compose配置文件"></a>3.5.1 docker-compose配置文件</h3><p>编辑kibana.yml</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">version</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-attribute">services</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">kibana</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">kibana</span><br>    <span class="hljs-attribute">container_name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">kibana</span><br>    <span class="hljs-attribute">restart</span><span class="hljs-punctuation">:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attribute">networks</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">default</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">ipv4_address</span><span class="hljs-punctuation">:</span> <span class="hljs-string">172.20.0.5</span><br>    <span class="hljs-attribute">environment</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">ELASTICSEARCH_URL=http://172.20.0.2:9200</span><br>    <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">5601:5601</span><br>    <span class="hljs-attribute">external_links</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">elasticsearch-one:elasticsearch-one</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">elasticsearch-two:elasticsearch-two</span><br><br><span class="hljs-attribute">networks</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">default</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">external</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">elk-kafka-network</span><br></code></pre></td></tr></table></figure><h3 id="3-5-2-构建脚本"><a href="#3-5-2-构建脚本" class="headerlink" title="3.5.2 构建脚本"></a>3.5.2 构建脚本</h3><p>编辑build.sh</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell">docker<span class="hljs-literal">-compose</span> <span class="hljs-operator">-f</span> kibana.yml stop<br><br>docker<span class="hljs-literal">-compose</span> <span class="hljs-operator">-f</span> kibana.yml <span class="hljs-built_in">rm</span> <span class="hljs-literal">--force</span><br><br>docker<span class="hljs-literal">-compose</span> <span class="hljs-operator">-f</span> kibana.yml up <span class="hljs-literal">-d</span><br></code></pre></td></tr></table></figure><p>执行构建脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">chmod</span> +x build.sh &amp;&amp; ./build.sh</span><br></code></pre></td></tr></table></figure><h2 id="3-6-zookeeper"><a href="#3-6-zookeeper" class="headerlink" title="3.6 zookeeper"></a>3.6 zookeeper</h2><h3 id="3-6-1-docker-compose配置文件"><a href="#3-6-1-docker-compose配置文件" class="headerlink" title="3.6.1 docker-compose配置文件"></a>3.6.1 docker-compose配置文件</h3><p>编辑zookeeper.yml</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-symbol">services:</span><br><span class="hljs-symbol">  zookeeper:</span><br><span class="hljs-symbol">    image:</span> wurstmeister/zookeeper<br><span class="hljs-symbol">    container_name:</span> zookeeper<br><span class="hljs-symbol">    restart:</span> always<br><span class="hljs-symbol">    networks:</span><br><span class="hljs-symbol">      default:</span><br><span class="hljs-symbol">        ipv4_address:</span> <span class="hljs-number">172.20</span><span class="hljs-number">.0</span><span class="hljs-number">.6</span><br><span class="hljs-symbol">    ports:</span><br>      - <span class="hljs-number">2181</span>:<span class="hljs-number">2181</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">networks:</span><br><span class="hljs-symbol">  default:</span><br><span class="hljs-symbol">    external:</span><br><span class="hljs-symbol">      name:</span> elk-kafka-network<br></code></pre></td></tr></table></figure><h3 id="3-6-2-构建脚本"><a href="#3-6-2-构建脚本" class="headerlink" title="3.6.2 构建脚本"></a>3.6.2 构建脚本</h3><p>编辑build.sh</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell">docker<span class="hljs-literal">-compose</span> <span class="hljs-operator">-f</span> zookeeper.yml stop<br><br>docker<span class="hljs-literal">-compose</span> <span class="hljs-operator">-f</span> zookeeper.yml <span class="hljs-built_in">rm</span> <span class="hljs-literal">--force</span><br><br>docker<span class="hljs-literal">-compose</span> <span class="hljs-operator">-f</span> zookeeper.yml up <span class="hljs-literal">-d</span><br></code></pre></td></tr></table></figure><p>执行构建脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">chmod</span> +x build.sh &amp;&amp; ./build.sh</span><br></code></pre></td></tr></table></figure><h2 id="3-7-kafka"><a href="#3-7-kafka" class="headerlink" title="3.7 kafka"></a>3.7 kafka</h2><h3 id="3-7-1-docker-compose配置文件"><a href="#3-7-1-docker-compose配置文件" class="headerlink" title="3.7.1 docker-compose配置文件"></a>3.7.1 docker-compose配置文件</h3><p>编辑kafka.yml</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-symbol">services:</span><br><span class="hljs-symbol">  kafka:</span><br><span class="hljs-symbol">    image:</span> wurstmeister/kafka<br><span class="hljs-symbol">    container_name:</span> kafka<br><span class="hljs-symbol">    restart:</span> always<br><span class="hljs-symbol">    environment:</span><br>      <span class="hljs-meta">#- KAFKA_BROKER_ID=0</span><br>      <span class="hljs-meta">#- KAFKA_ZOOKEEPER_CONNECT=192.168.80.130:2181</span><br>      <span class="hljs-meta">#- KAFKA_ADVERTISED_LISTENERS=PLAINTEXT:<span class="hljs-comment">//192.168.80.130:9092</span></span><br>      <span class="hljs-meta">#- KAFKA_LISTENERS=PLAINTEXT:<span class="hljs-comment">//0.0.0.0:9092</span></span><br><span class="hljs-symbol">      KAFKA_ADVERTISED_LISTENERS:</span> PLAINTEXT:<span class="hljs-comment">//192.168.80.130:9092</span><br><span class="hljs-symbol">      KAFKA_ZOOKEEPER_CONNECT:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.80</span><span class="hljs-number">.130</span>:<span class="hljs-number">2181</span><br><span class="hljs-symbol">      KAFKA_LISTENERS:</span> PLAINTEXT:<span class="hljs-comment">//0.0.0.0:9092</span><br><span class="hljs-symbol">      KAFKA_DELETE_TOPIC_ENABLE:</span> <span class="hljs-string">&quot;true&quot;</span><br><span class="hljs-symbol">      KAFKA_BROKER_ID:</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">    networks:</span><br><span class="hljs-symbol">      default:</span><br><span class="hljs-symbol">        ipv4_address:</span> <span class="hljs-number">172.20</span><span class="hljs-number">.0</span><span class="hljs-number">.7</span><br><span class="hljs-symbol">    ports:</span><br>      - <span class="hljs-number">9092</span>:<span class="hljs-number">9092</span><br><span class="hljs-symbol">    external_links:</span><br>      - zookeeper:zookeeper<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">networks:</span><br><span class="hljs-symbol">  default:</span><br><span class="hljs-symbol">    external:</span><br><span class="hljs-symbol">      name:</span> elk-kafka-network<br></code></pre></td></tr></table></figure><h3 id="3-7-2-构建脚本"><a href="#3-7-2-构建脚本" class="headerlink" title="3.7.2 构建脚本"></a>3.7.2 构建脚本</h3><p>编辑build.sh</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell">docker<span class="hljs-literal">-compose</span> <span class="hljs-operator">-f</span> kafka.yml stop<br><br>docker<span class="hljs-literal">-compose</span> <span class="hljs-operator">-f</span> kafka.yml <span class="hljs-built_in">rm</span> <span class="hljs-literal">--force</span><br><br>docker<span class="hljs-literal">-compose</span> <span class="hljs-operator">-f</span> kafka.yml up <span class="hljs-literal">-d</span><br></code></pre></td></tr></table></figure><p>执行构建脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">chmod</span> +x build.sh &amp;&amp; ./build.sh</span><br></code></pre></td></tr></table></figure><h2 id="3-8-kafka-manager"><a href="#3-8-kafka-manager" class="headerlink" title="3.8 kafka-manager"></a>3.8 kafka-manager</h2><h3 id="3-8-1-docker-compose配置文件"><a href="#3-8-1-docker-compose配置文件" class="headerlink" title="3.8.1 docker-compose配置文件"></a>3.8.1 docker-compose配置文件</h3><p>编辑kafka-manager.yml</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">version</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-attribute">services</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">kafka-manager</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">sheepkiller/kafka-manager</span><br>    <span class="hljs-attribute">container_name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">kafka-manager</span><br>    <span class="hljs-attribute">restart</span><span class="hljs-punctuation">:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attribute">environment</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-comment">#- ZK_HOSTS=172.20.0.6:2181</span><br>      <span class="hljs-attribute">ZK_HOSTS</span><span class="hljs-punctuation">:</span> <span class="hljs-string">172.20.0.6:2181</span><br>    <span class="hljs-attribute">networks</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">default</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">ipv4_address</span><span class="hljs-punctuation">:</span> <span class="hljs-string">172.20.0.8</span><br>    <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">9000:9000</span><br><br><span class="hljs-attribute">networks</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">default</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">external</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">elk-kafka-network</span><br><br></code></pre></td></tr></table></figure><h3 id="3-8-2-构建脚本"><a href="#3-8-2-构建脚本" class="headerlink" title="3.8.2 构建脚本"></a>3.8.2 构建脚本</h3><p>编辑build-manager.sh</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell">docker<span class="hljs-literal">-compose</span> <span class="hljs-operator">-f</span> kafka<span class="hljs-literal">-manager</span>.yml stop<br><br>docker<span class="hljs-literal">-compose</span> <span class="hljs-operator">-f</span> kafka<span class="hljs-literal">-manager</span>.yml <span class="hljs-built_in">rm</span> <span class="hljs-literal">--force</span><br><br>docker<span class="hljs-literal">-compose</span> <span class="hljs-operator">-f</span> kafka<span class="hljs-literal">-manager</span>.yml up <span class="hljs-literal">-d</span><br></code></pre></td></tr></table></figure><p>执行构建脚本</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> chmod +x <span class="hljs-built_in">build-manager</span>.sh &amp;&amp; ./<span class="hljs-built_in">build-manager</span>.sh<br></code></pre></td></tr></table></figure><h2 id="3-9-搭建部署完成"><a href="#3-9-搭建部署完成" class="headerlink" title="3.9 搭建部署完成"></a>3.9 搭建部署完成</h2><ol><li>查看docker容器状态是否正常</li></ol><p><img src="http://image.focusprogram.top/20200511143815.png"></p><ol start="2"><li>查看elasticsearch集群状态是否正常</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ curl http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">9200</span> &amp;&amp; curl http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">9202</span><br></code></pre></td></tr></table></figure><p><img src="http://image.focusprogram.top/20200511142251.png"></p><p>测试集群效果：</p><p><a href="http://192.168.80.130:9200/_cat/nodes?pretty">http://192.168.80.130:9200/_cat&#x2F;nodes?pretty</a></p><p><img src="http://image.focusprogram.top/20200511142457.png"></p><ol start="3"><li>kafka需要添加指定主题my_log</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ docker exec -it kafka <span class="hljs-regexp">/bin/</span>bash<br><br><span class="hljs-comment"># 创建my_log topic</span><br><span class="hljs-regexp">/opt/</span>kafka<span class="hljs-regexp">/bin/</span>kafka-topics.sh --create --zookeeper <span class="hljs-number">192.168</span>.<span class="hljs-number">80.130</span>:<span class="hljs-number">2181</span> --replication-factor <span class="hljs-number">1</span> --partitions <span class="hljs-number">1</span> --topic my_log<br><br><span class="hljs-comment"># 查询创建的主题</span><br><span class="hljs-regexp">/opt/</span>kafka<span class="hljs-regexp">/bin/</span>kafka-topics.sh --list --zookeeper <span class="hljs-number">192.168</span>.<span class="hljs-number">80.130</span>:<span class="hljs-number">2181</span><br></code></pre></td></tr></table></figure><h1 id="4-springboot整合elk-kafka"><a href="#4-springboot整合elk-kafka" class="headerlink" title="4. springboot整合elk+kafka"></a>4. springboot整合elk+kafka</h1><h2 id="4-1-elasticsearch查询模块"><a href="#4-1-elasticsearch查询模块" class="headerlink" title="4.1 elasticsearch查询模块"></a>4.1 elasticsearch查询模块</h2><p>引入maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.querydsl<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>querydsl-apt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.querydsl<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>querydsl-jpa<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>添加实体类ProductEntity</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs lasso">@Document(indexName = <span class="hljs-string">&quot;product&quot;</span>, <span class="hljs-keyword">type</span> = <span class="hljs-string">&quot;product&quot;</span>)<br>@<span class="hljs-built_in">Data</span><br><span class="hljs-keyword">public</span> class ProductEntity &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 主键ID</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">Integer</span> id;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 类型ID</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">Integer</span> categoryId;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 名称</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> name;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 小标题</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> subtitle;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 主图像</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> mainImage;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 小标题图像</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> subImages;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 描述</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> detail;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 商品规格</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> attributeList;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 价格</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Double price;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 库存</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">Integer</span> stock;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 状态</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">Integer</span> status;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建人</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> createdBy;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建时间</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">Date</span> createdTime;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 更新时间</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> MappingMetaData.Timestamp updatedTime;<br>&#125;<br></code></pre></td></tr></table></figure><p>添加es查询接口ProductReposiory</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-symbol">ProductReposiory</span> <span class="hljs-symbol">extends</span> <span class="hljs-symbol">ElasticsearchRepository</span>&lt;<span class="hljs-symbol">ProductEntity</span>, <span class="hljs-symbol">Long</span>&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>添加查询接口以及实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ProductSearchService</span> &#123;<br><br>    List&lt;ProductEntity&gt; <span class="hljs-title function_">search</span><span class="hljs-params">(String name, <span class="hljs-meta">@PageableDefault(page = 0, value = 10)</span> Pageable pageable)</span>;<br><br>&#125;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductSearchServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ProductSearchService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ProductReposiory productReposiory;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;ProductEntity&gt; <span class="hljs-title function_">search</span><span class="hljs-params">(String name, <span class="hljs-meta">@PageableDefault(page = 0, value = 10)</span> Pageable pageable)</span> &#123;<br><span class="hljs-comment">//        String user = null;</span><br><span class="hljs-comment">//        System.out.println(user.getBytes());</span><br>        <span class="hljs-comment">// 1.拼接查询条件</span><br>        <span class="hljs-type">BoolQueryBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> QueryBuilders.boolQuery();<br>        <span class="hljs-comment">// 2.模糊查询 name、 subtitle、detail含有 搜索关键字</span><br>        builder.must(QueryBuilders.multiMatchQuery(name, <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;subtitle&quot;</span>, <span class="hljs-string">&quot;detail&quot;</span>));<br>        <span class="hljs-comment">// 3.调用ES接口查询</span><br>        Page&lt;ProductEntity&gt; page = productReposiory.search(builder, pageable);<br>        <span class="hljs-comment">// 4.获取集合数据</span><br>        List&lt;ProductEntity&gt; content = page.getContent();<br>        <span class="hljs-keyword">return</span> content;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>添加访问层ProductController</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(<span class="hljs-string">&quot;elk&quot;</span>)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProductController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ProductSearchService productSearchService;<br><br>    <span class="hljs-meta">@Cache(key = <span class="hljs-string">&quot;product&quot;</span>)</span><br>    <span class="hljs-meta">@PostMapping(<span class="hljs-string">&quot;search&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> List&lt;ProductEntity&gt; search(<span class="hljs-meta">@RequestParam(<span class="hljs-string">&quot;name&quot;</span>)</span> String name) &#123;<br>        Pageable pageable = PageRequest.of(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>);<br>        <span class="hljs-keyword">return</span> productSearchService.search(name, pageable);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>添加配置文件application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9000</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">elk-es</span><br>  <span class="hljs-attr">data:</span><br>    <span class="hljs-attr">elasticsearch:</span><br>      <span class="hljs-comment"># 指定elasticsearch集群地址</span><br>      <span class="hljs-attr">cluster-name:</span> <span class="hljs-string">elasticsearch-cluster</span><br>      <span class="hljs-attr">cluster-nodes:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.80</span><span class="hljs-number">.130</span><span class="hljs-string">:9300</span><br>  <span class="hljs-attr">kafka:</span><br>    <span class="hljs-attr">bootstrap-servers:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.80</span><span class="hljs-number">.130</span><span class="hljs-string">:9092</span><br><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">114.55</span><span class="hljs-number">.34</span><span class="hljs-number">.44</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">timeout:</span> <span class="hljs-number">2000</span><br>    <span class="hljs-attr">jedis:</span><br>      <span class="hljs-attr">pool:</span><br>        <span class="hljs-attr">maxActive:</span> <span class="hljs-number">300</span><br>        <span class="hljs-attr">maxIdle:</span> <span class="hljs-number">100</span><br>        <span class="hljs-attr">maxWait:</span> <span class="hljs-number">1000</span><br>    <span class="hljs-comment"># 服务或应用名</span><br>    <span class="hljs-attr">sysName:</span> <span class="hljs-string">admin</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">database:</span> <span class="hljs-number">0</span><br><br><span class="hljs-attr">kafka:</span><br>  <span class="hljs-attr">topic:</span> <span class="hljs-string">my_log</span><br></code></pre></td></tr></table></figure><h2 id="4-2-kafka日志收集模块"><a href="#4-2-kafka日志收集模块" class="headerlink" title="4.2 kafka日志收集模块"></a>4.2 kafka日志收集模块</h2><p>引入maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.kafka<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-kafka<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjrt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.8.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>添加kafka推送消息类KafkaSender</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">KafkaSender</span>&lt;T&gt; &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">KafkaTemplate</span>&lt;<span class="hljs-title class_">String</span>, <span class="hljs-title class_">Object</span>&gt; kafkaTemplate;<br><br>    <span class="hljs-meta">@Value</span>(<span class="hljs-string">&quot;$&#123;kafka.topic&#125;&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> kafkaTopic;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * kafka 发送消息</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> obj 消息对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">send</span>(<span class="hljs-params">T obj</span>) &#123;<br>        <span class="hljs-title class_">String</span> jsonObj = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">toJSONString</span>(obj);<br>        log.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;------------ message = &#123;&#125;&quot;</span>, jsonObj);<br><br>        <span class="hljs-comment">// 发送消息</span><br>        <span class="hljs-title class_">ListenableFuture</span>&lt;<span class="hljs-title class_">SendResult</span>&lt;<span class="hljs-title class_">String</span>, <span class="hljs-title class_">Object</span>&gt;&gt; future = kafkaTemplate.<span class="hljs-title function_">send</span>(kafkaTopic, jsonObj);<br>        future.<span class="hljs-title function_">addCallback</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ListenableFutureCallback</span>&lt;<span class="hljs-title class_">SendResult</span>&lt;<span class="hljs-title class_">String</span>, <span class="hljs-title class_">Object</span>&gt;&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">onFailure</span>(<span class="hljs-params">Throwable throwable</span>) &#123;<br>                log.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;Produce: The message failed to be sent:&quot;</span> + throwable.<span class="hljs-title function_">getMessage</span>());<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">onSuccess</span>(<span class="hljs-params">SendResult&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">Object</span>&gt; stringObjectSendResult</span>) &#123;<br>                <span class="hljs-comment">// TODO 业务处理</span><br>                log.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;Produce: The message was sent successfully:&quot;</span>);<br>                log.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;Produce: _+_+_+_+_+_+_+ result: &quot;</span> + stringObjectSendResult.<span class="hljs-title function_">toString</span>());<br>            &#125;<br>        &#125;);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>添加AOP拦截方法请求日志收集类AopLogAspect和全局错误日志收集类GlobalExceptionHandler</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Aspect<br>@Slf4j<br>@Component<br>public <span class="hljs-keyword">class</span> AopLogAspect &#123;<br><br>    @Autowired<br>    <span class="hljs-keyword">private</span> KafkaSender&lt;JSONObject&gt; kafkaSender;<br><br>    <span class="hljs-comment">// 申明一个切点 里面是 execution表达式</span><br>    @<span class="hljs-constructor">Pointcut(<span class="hljs-string">&quot;execution(* com.elk.*.controller.*.*(..))&quot;</span>)</span><br>    <span class="hljs-keyword">private</span> void service<span class="hljs-constructor">Aspect()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 基于注解形式拦截API请求</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @param joinPoint</span><br><span class="hljs-comment">     */</span><br>    @<span class="hljs-constructor">Before(<span class="hljs-params">value</span> = <span class="hljs-string">&quot;@annotation(com.elk.elkkafka.annotation.MonitorRequest)&quot;</span>)</span><br>    public void <span class="hljs-keyword">do</span><span class="hljs-constructor">Before(JoinPoint <span class="hljs-params">joinPoint</span>)</span> &#123;<br>        <span class="hljs-comment">//获取到请求的属性</span><br>        ServletRequestAttributes attributes =<br>                (ServletRequestAttributes) <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">RequestContextHolder</span>.</span></span>get<span class="hljs-constructor">RequestAttributes()</span>;<br>        <span class="hljs-comment">//获取到请求对象</span><br>        HttpServletRequest request = attributes.get<span class="hljs-constructor">Request()</span>;<br>        <span class="hljs-comment">//URL：根据请求对象拿到访问的地址</span><br>        log.info(<span class="hljs-string">&quot;url=&quot;</span> + request.get<span class="hljs-constructor">RequestURL()</span>);<br>        <span class="hljs-comment">//获取请求的方法，是Get还是Post请求</span><br>        log.info(<span class="hljs-string">&quot;method=&quot;</span> + request.get<span class="hljs-constructor">Method()</span>);<br>        <span class="hljs-comment">//ip：获取到访问</span><br>        log.info(<span class="hljs-string">&quot;ip=&quot;</span> + request.get<span class="hljs-constructor">RemoteAddr()</span>);<br>        <span class="hljs-comment">//获取被拦截的类名和方法名</span><br>        log.info(<span class="hljs-string">&quot;class=&quot;</span> + joinPoint.get<span class="hljs-constructor">Signature()</span>.get<span class="hljs-constructor">DeclaringTypeName()</span> +<br>                <span class="hljs-string">&quot;and method name=&quot;</span> + joinPoint.get<span class="hljs-constructor">Signature()</span>.get<span class="hljs-constructor">Name()</span>);<br>        <span class="hljs-comment">//参数</span><br>        log.info(<span class="hljs-string">&quot;参数=&quot;</span> + joinPoint.get<span class="hljs-constructor">Args()</span>.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 匹配API拦截</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @param joinPoint</span><br><span class="hljs-comment">     */</span><br>    @<span class="hljs-constructor">Before(<span class="hljs-params">value</span> = <span class="hljs-string">&quot;serviceAspect()&quot;</span>)</span><br>    public void <span class="hljs-keyword">method</span><span class="hljs-constructor">Before(JoinPoint <span class="hljs-params">joinPoint</span>)</span> &#123;<br>        ServletRequestAttributes requestAttributes = (ServletRequestAttributes) RequestContextHolder<br>                .get<span class="hljs-constructor">RequestAttributes()</span>;<br>        HttpServletRequest request = requestAttributes.get<span class="hljs-constructor">Request()</span>;<br><br>        <span class="hljs-comment">// 打印请求内容</span><br>        log.info(<span class="hljs-string">&quot;===============请求内容===============&quot;</span>);<br>        log.info(<span class="hljs-string">&quot;请求地址:&quot;</span> + request.get<span class="hljs-constructor">RequestURL()</span>.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>);<br>        log.info(<span class="hljs-string">&quot;请求方式:&quot;</span> + request.get<span class="hljs-constructor">Method()</span>);<br>        log.info(<span class="hljs-string">&quot;请求类方法:&quot;</span> + joinPoint.get<span class="hljs-constructor">Signature()</span>);<br>        log.info(<span class="hljs-string">&quot;请求类方法参数:&quot;</span> + <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">String(<span class="hljs-params">joinPoint</span>.<span class="hljs-params">getArgs</span>()</span>));<br>        log.info(<span class="hljs-string">&quot;===============请求内容===============&quot;</span>);<br><br>        JSONObject jsonObject = <span class="hljs-keyword">new</span> <span class="hljs-constructor">JSONObject()</span>;<br>        SimpleDateFormat df = <span class="hljs-keyword">new</span> <span class="hljs-constructor">SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)</span>;<span class="hljs-comment">// 设置日期格式</span><br>        jsonObject.put(<span class="hljs-string">&quot;request_time&quot;</span>, df.format(<span class="hljs-keyword">new</span> <span class="hljs-constructor">Date()</span>));<br>        jsonObject.put(<span class="hljs-string">&quot;request_url&quot;</span>, request.get<span class="hljs-constructor">RequestURL()</span>.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>);<br>        jsonObject.put(<span class="hljs-string">&quot;request_method&quot;</span>, request.get<span class="hljs-constructor">Method()</span>);<br>        jsonObject.put(<span class="hljs-string">&quot;signature&quot;</span>, joinPoint.get<span class="hljs-constructor">Signature()</span>);<br>        jsonObject.put(<span class="hljs-string">&quot;request_args&quot;</span>, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">String(<span class="hljs-params">joinPoint</span>.<span class="hljs-params">getArgs</span>()</span>));<br>        <span class="hljs-keyword">try</span> &#123;<br>            jsonObject.put(<span class="hljs-string">&quot;request_ip&quot;</span>, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">WebToolUtils</span>.</span></span>get<span class="hljs-constructor">LocalIP()</span>);<br>        &#125; catch (UnknownHostException e) &#123;<br>            e.print<span class="hljs-constructor">StackTrace()</span>;<br>        &#125; catch (SocketException e) &#123;<br>            e.print<span class="hljs-constructor">StackTrace()</span>;<br>        &#125;<br>        JSONObject requestJsonObject = <span class="hljs-keyword">new</span> <span class="hljs-constructor">JSONObject()</span>;<br>        requestJsonObject.put(<span class="hljs-string">&quot;request&quot;</span>, jsonObject);<br>        kafkaSender.send(requestJsonObject);<br>    &#125;<br><br>    <span class="hljs-comment">// 在方法执行完结后打印返回内容</span><br>    @<span class="hljs-constructor">AfterReturning(<span class="hljs-params">returning</span> = <span class="hljs-string">&quot;o&quot;</span>, <span class="hljs-params">pointcut</span> = <span class="hljs-string">&quot;serviceAspect()&quot;</span>)</span><br>    public void <span class="hljs-keyword">method</span><span class="hljs-constructor">AfterReturing(Object <span class="hljs-params">o</span>)</span> &#123;<br><br>        log.info(<span class="hljs-string">&quot;--------------返回内容----------------&quot;</span>);<br>        log.info(<span class="hljs-string">&quot;Response内容:&quot;</span> + o.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>);<br>        log.info(<span class="hljs-string">&quot;--------------返回内容----------------&quot;</span>);<br>        JSONObject respJSONObject = <span class="hljs-keyword">new</span> <span class="hljs-constructor">JSONObject()</span>;<br>        JSONObject jsonObject = <span class="hljs-keyword">new</span> <span class="hljs-constructor">JSONObject()</span>;<br>        SimpleDateFormat df = <span class="hljs-keyword">new</span> <span class="hljs-constructor">SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)</span>;<span class="hljs-comment">// 设置日期格式</span><br>        jsonObject.put(<span class="hljs-string">&quot;response_time&quot;</span>, df.format(<span class="hljs-keyword">new</span> <span class="hljs-constructor">Date()</span>));<br>        jsonObject.put(<span class="hljs-string">&quot;response_content&quot;</span>, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JSONObject</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">JSONString(<span class="hljs-params">o</span>)</span>);<br>        respJSONObject.put(<span class="hljs-string">&quot;response&quot;</span>, jsonObject);<br>        kafkaSender.send(respJSONObject);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@ControllerAdvice</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalExceptionHandler</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">KafkaSender</span>&lt;<span class="hljs-title class_">JSON</span><span class="hljs-built_in">Object</span>&gt; kafkaSender;<br><br>    <span class="hljs-meta">@ExceptionHandler</span>(<span class="hljs-title class_">RuntimeException</span>.<span class="hljs-property">class</span>)<br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">JSON</span><span class="hljs-built_in">Object</span> <span class="hljs-title function_">exceptionHandler</span>(<span class="hljs-params">Exception e</span>) &#123;<br>        log.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;###全局捕获异常###,error:&#123;&#125;&quot;</span>, e);<br><br>        <span class="hljs-comment">// 1.封装异常日志信息</span><br>        <span class="hljs-title class_">JSON</span><span class="hljs-built_in">Object</span> errorJson = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSON</span><span class="hljs-built_in">Object</span>();<br>        <span class="hljs-title class_">JSON</span><span class="hljs-built_in">Object</span> logJson = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSON</span><span class="hljs-built_in">Object</span>();<br>        <span class="hljs-title class_">SimpleDateFormat</span> df = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<span class="hljs-comment">// 设置日期格式</span><br>        logJson.<span class="hljs-title function_">put</span>(<span class="hljs-string">&quot;request_time&quot;</span>, df.<span class="hljs-title function_">format</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()));<br>        logJson.<span class="hljs-title function_">put</span>(<span class="hljs-string">&quot;error_info&quot;</span>, e);<br><br>        errorJson.<span class="hljs-title function_">put</span>(<span class="hljs-string">&quot;request_error&quot;</span>, logJson);<br>        kafkaSender.<span class="hljs-title function_">send</span>(errorJson);<br>        <span class="hljs-comment">// 2. 返回错误信息</span><br>        <span class="hljs-title class_">JSON</span><span class="hljs-built_in">Object</span> result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSON</span><span class="hljs-built_in">Object</span>();<br>        result.<span class="hljs-title function_">put</span>(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-number">500</span>);<br>        result.<span class="hljs-title function_">put</span>(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;系统错误&quot;</span>);<br><br>        <span class="hljs-comment">// 参数中记录下，IP和端口号</span><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-3-测试日志收集"><a href="#4-3-测试日志收集" class="headerlink" title="4.3 测试日志收集"></a>4.3 测试日志收集</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">$ curl http://localhost:<span class="hljs-number">9000</span>/elk/<span class="hljs-keyword">search</span>?<span class="hljs-type">name</span>=苹果<br><br>[<br>    &#123;<br>        &quot;id&quot;: <span class="hljs-number">1</span>,<br>        &quot;categoryId&quot;: <span class="hljs-keyword">null</span>,<br>        &quot;name&quot;: &quot;Pad平板电脑无线局域网&quot;,<br>        &quot;subtitle&quot;: &quot;Pad平板电脑&quot;,<br>        &quot;mainImage&quot;: <span class="hljs-keyword">null</span>,<br>        &quot;subImages&quot;: <span class="hljs-keyword">null</span>,<br>        &quot;detail&quot;: &quot;官方授权Pad苹果电脑&quot;,<br>        &quot;attributeList&quot;: <span class="hljs-keyword">null</span>,<br>        &quot;price&quot;: <span class="hljs-keyword">null</span>,<br>        &quot;stock&quot;: <span class="hljs-keyword">null</span>,<br>        &quot;status&quot;: <span class="hljs-number">0</span>,<br>        &quot;createdBy&quot;: <span class="hljs-keyword">null</span>,<br>        &quot;createdTime&quot;: <span class="hljs-keyword">null</span>,<br>        &quot;updatedTime&quot;: <span class="hljs-keyword">null</span><br>    &#125;<br>]<br></code></pre></td></tr></table></figure><p>查询kibana，发现数据已经同步：</p><p><img src="http://image.focusprogram.top/20200511154946.png"></p><p><img src="http://image.focusprogram.top/20200511155151.png"></p>]]></content>
    
    
    <categories>
      
      <category>微服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
      <tag>微服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ELK详解</title>
    <link href="/2020/07/11/ELK%E8%AF%A6%E8%A7%A3/"/>
    <url>/2020/07/11/ELK%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p><strong>ELK详解</strong></p><hr><h1 id="1-什么是ELK"><a href="#1-什么是ELK" class="headerlink" title="1. 什么是ELK?"></a>1. 什么是ELK?</h1><blockquote><p>ELK 是elastic公司提供的一套完整的日志收集以及展示的解决方案，是三个产品的首字母缩写，分别是ElasticSearch、Logstash 和 Kibana。</p><p><a href="https://github.com/elastic/elasticsearch">ElasticSearch</a> 简称ES，它是一个实时的分布式搜索和分析引擎，它可以用于全文搜索，结构化搜索以及分析。它是一个建立在全文搜索引擎 Apache Lucene 基础上的搜索引擎，使用 Java 语言编写。</p><p><a href="https://github.com/elastic/logstash">Logstash</a> 是一个具有实时传输能力的数据收集引擎，用来进行数据收集（如：读取文本文件）、解析，并将数据发送给ES。</p><p><a href="https://github.com/elastic/kibana">Kibana</a> 为 Elasticsearch 提供了分析和可视化的 Web 平台。它可以在 Elasticsearch 的索引中查找，交互数据，并生成各种维度表格、图形。</p></blockquote><h1 id="2-ELK用途？"><a href="#2-ELK用途？" class="headerlink" title="2. ELK用途？"></a>2. ELK用途？</h1><blockquote><p>传统意义上，ELK是作为替代Splunk的一个开源解决方案。Splunk 是日志分析领域的领导者。日志分析并不仅仅包括系统产生的错误日志，异常，也包括业务逻辑，或者任何文本类的分析。而基于日志的分析，能够在其上产生非常多的解决方案，譬如：</p><p>1.问题排查。我们常说，运维和开发这一辈子无非就是和问题在战斗，所以这个说起来很朴实的四个字，其实是沉甸甸的。很多公司其实不缺钱，就要稳定，而要稳定，就要运维和开发能够快速的定位问题，甚至防微杜渐，把问题杀死在摇篮里。日志分析技术显然问题排查的基石。基于日志做问题排查，还有一个很帅的技术，叫全链路追踪，比如阿里的eagleeye<br>或者Google的dapper，也算是日志分析技术里的一种。</p><p>2.监控和预警。 日志，监控，预警是相辅相成的。基于日志的监控，预警使得运维有自己的机械战队，大大节省人力以及延长运维的寿命。</p><p>3.关联事件。多个数据源产生的日志进行联动分析，通过某种分析算法，就能够解决生活中各个问题。比如金融里的风险欺诈等。这个可以可以应用到无数领域了，取决于你的想象力。</p><p>4.数据分析。 这个对于数据分析师，还有算法工程师都是有所裨益的。</p></blockquote><h1 id="3-ELK架构设计"><a href="#3-ELK架构设计" class="headerlink" title="3. ELK架构设计"></a>3. ELK架构设计</h1><p><img src="http://image.focusprogram.top/elk.png"></p><h1 id="4-ELK搭建部署"><a href="#4-ELK搭建部署" class="headerlink" title="4. ELK搭建部署"></a>4. ELK搭建部署</h1><h2 id="4-1-环境准备"><a href="#4-1-环境准备" class="headerlink" title="4.1 环境准备"></a>4.1 环境准备</h2><h3 id="4-1-1-所需配置"><a href="#4-1-1-所需配置" class="headerlink" title="4.1.1 所需配置"></a>4.1.1 所需配置</h3><table><thead><tr><th>服务名</th><th>Docker ip地址</th><th>宿主机ip地址</th><th>开放端口</th><th>功能</th></tr></thead><tbody><tr><td>elasticsearch</td><td>172.20.0.2</td><td>192.168.80.130</td><td>9200、9300</td><td>搜索</td></tr><tr><td>elasticsearch-head</td><td>172.20.0.3</td><td>192.168.80.130</td><td>9100</td><td>elasticsearch界面管理</td></tr><tr><td>logstash</td><td>172.20.0.4</td><td>192.168.80.130</td><td>5044</td><td>日志收集</td></tr><tr><td>kibana</td><td>172.20.0.5</td><td>192.168.80.130</td><td>5061</td><td>展示、监控</td></tr></tbody></table><h3 id="4-1-2-创建网络"><a href="#4-1-2-创建网络" class="headerlink" title="4.1.2 创建网络"></a>4.1.2 创建网络</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ docker<span class="hljs-built_in"> network </span>create <span class="hljs-attribute">--driver</span>=bridge <span class="hljs-attribute">--subnet</span>=172.30.0.1/16 elk-network<br></code></pre></td></tr></table></figure><h2 id="4-2-elasticsearch"><a href="#4-2-elasticsearch" class="headerlink" title="4.2 elasticsearch"></a>4.2 elasticsearch</h2><blockquote><p>Elasticsearch 是一个分布式可扩展的实时搜索和分析引擎,一个建立在全文搜索引擎 Apache Lucene(TM) 基础上的搜索引擎.当然 Elasticsearch 并不仅仅是 Lucene 那么简单，它不仅包括了全文搜索功能，还可以进行以下工作:</p><p>分布式实时文件存储，并将每一个字段都编入索引，使其可以被搜索。<br>实时分析的分布式搜索引擎。<br>可以扩展到上百台服务器，处理PB级别的结构化或非结构化数据。</p></blockquote><h3 id="4-2-1-elasticsearch配置文件"><a href="#4-2-1-elasticsearch配置文件" class="headerlink" title="4.2.1 elasticsearch配置文件"></a>4.2.1 elasticsearch配置文件</h3><p>编辑配置文件es.yml</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs stylus">cluster<span class="hljs-selector-class">.name</span>: elasticsearch<br>node<span class="hljs-selector-class">.name</span>: es<br>network<span class="hljs-selector-class">.bind_host</span>: <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><br>network<span class="hljs-selector-class">.publish_host</span>: <span class="hljs-number">172.30</span>.<span class="hljs-number">0.2</span><br>http<span class="hljs-selector-class">.port</span>: <span class="hljs-number">9200</span><br>transport<span class="hljs-selector-class">.tcp</span><span class="hljs-selector-class">.port</span>: <span class="hljs-number">9300</span><br>http<span class="hljs-selector-class">.cors</span><span class="hljs-selector-class">.enabled</span>: true<br>http<span class="hljs-selector-class">.cors</span><span class="hljs-selector-class">.allow-origin</span>: <span class="hljs-string">&quot;*&quot;</span><br>node<span class="hljs-selector-class">.master</span>: true<br>node<span class="hljs-selector-class">.data</span>: true<br>discovery<span class="hljs-selector-class">.zen</span><span class="hljs-selector-class">.ping</span><span class="hljs-selector-class">.unicast</span><span class="hljs-selector-class">.hosts</span>: <span class="hljs-selector-attr">[<span class="hljs-string">&quot;172.30.0.2:9300&quot;</span>]</span><br>discovery<span class="hljs-selector-class">.zen</span><span class="hljs-selector-class">.minimum_master_nodes</span>: <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="4-2-2-docker-compose配置文件"><a href="#4-2-2-docker-compose配置文件" class="headerlink" title="4.2.2 docker-compose配置文件"></a>4.2.2 docker-compose配置文件</h3><p>编辑docker-compose配置文件elasticsearch.yml</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">version</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-attribute">services</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">elasticsearch</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">elasticsearch</span><br>    <span class="hljs-attribute">container_name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">elasticsearch</span><br>    <span class="hljs-attribute">restart</span><span class="hljs-punctuation">:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attribute">networks</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">default</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">ipv4_address</span><span class="hljs-punctuation">:</span> <span class="hljs-string">172.30.0.2</span><br>    <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">9200:9200</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">9300:9300</span><br>    <span class="hljs-attribute">volumes</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./es.yml:/usr/share/elasticsearch/config/elasticsearch.yml</span><br>      <span class="hljs-comment"># 指定Ik分词器和拼音分词器可以支持中文和拼音搜索</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./plugins:/usr/share/elasticsearch/plugins</span><br><br>  <span class="hljs-attribute">elasticsearch-head</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">mobz/elasticsearch-head:5</span><br>    <span class="hljs-attribute">container_name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">elasticsearch-head</span><br>    <span class="hljs-attribute">restart</span><span class="hljs-punctuation">:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attribute">networks</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">default</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">ipv4_address</span><span class="hljs-punctuation">:</span> <span class="hljs-string">172.30.0.3</span><br>    <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">9100:9100</span><br>    <span class="hljs-attribute">links</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">elasticsearch:elasticsearch</span><br><br><span class="hljs-attribute">networks</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">default</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">external</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">elk-network</span><br></code></pre></td></tr></table></figure><h3 id="4-2-3-构建脚本"><a href="#4-2-3-构建脚本" class="headerlink" title="4.2.3 构建脚本"></a>4.2.3 构建脚本</h3><p>编辑构建脚本build.sh</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell">docker<span class="hljs-literal">-compose</span> <span class="hljs-operator">-f</span> elasticsearch.yml stop<br><br>docker<span class="hljs-literal">-compose</span> <span class="hljs-operator">-f</span> elasticsearch.yml <span class="hljs-built_in">rm</span> <span class="hljs-literal">--force</span><br><br>docker<span class="hljs-literal">-compose</span> <span class="hljs-operator">-f</span> elasticsearch.yml up <span class="hljs-literal">-d</span><br></code></pre></td></tr></table></figure><p>执行构建脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">chmod</span> +x build.sh &amp;&amp; ./build.sh</span><br></code></pre></td></tr></table></figure><p>构建成功显示如下：</p><p><img src="http://image.focusprogram.top/20200511112646.png"></p><p>测试是否成功启动</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ curl http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">9200</span><br></code></pre></td></tr></table></figure><p>发现无法访问，查看日志，报错信息如下：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-built_in">max</span> virtual memory areas <span class="hljs-keyword">vm</span>.max_map_count [<span class="hljs-number">65530</span>] <span class="hljs-keyword">is</span> too low, increase <span class="hljs-keyword">to</span> at least [<span class="hljs-number">262144</span>]<br></code></pre></td></tr></table></figure><p>解决方法如下：</p><ol><li>临时生效，重启服务器后实效</li></ol><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vim">执行命令：<br><br>sysctl -<span class="hljs-keyword">w</span> <span class="hljs-keyword">vm</span>.max_map_count=<span class="hljs-number">262144</span><br><br>查看结果：<br><br>sysctl -<span class="hljs-keyword">a</span>|<span class="hljs-keyword">grep</span> <span class="hljs-keyword">vm</span>.max_map_count<br><br>显示：<br><br><span class="hljs-keyword">vm</span>.max_map_count = <span class="hljs-number">262144</span><br></code></pre></td></tr></table></figure><ol start="2"><li>永久有效</li></ol><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">$ <span class="hljs-keyword">vim</span> /etc/sysctl.<span class="hljs-keyword">conf</span><br><br><span class="hljs-keyword">vm</span>.max_map_count=<span class="hljs-number">262144</span><br></code></pre></td></tr></table></figure><p>修改重新编译后，再次访问，显示如下，则启动成功：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">$ curl http:<span class="hljs-comment">//localhost:9200</span><br><br>&#123;<br>  <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;es&quot;</span>,<br>  <span class="hljs-string">&quot;cluster_name&quot;</span> : <span class="hljs-string">&quot;elasticsearch&quot;</span>,<br>  <span class="hljs-string">&quot;cluster_uuid&quot;</span> : <span class="hljs-string">&quot;uDlzhbhgT-6B9Zv_KGD29Q&quot;</span>,<br>  <span class="hljs-string">&quot;version&quot;</span> : &#123;<br>    <span class="hljs-string">&quot;number&quot;</span> : <span class="hljs-string">&quot;5.6.12&quot;</span>,<br>    <span class="hljs-string">&quot;build_hash&quot;</span> : <span class="hljs-string">&quot;cfe3d9f&quot;</span>,<br>    <span class="hljs-string">&quot;build_date&quot;</span> : <span class="hljs-string">&quot;2018-09-10T20:12:43.732Z&quot;</span>,<br>    <span class="hljs-string">&quot;build_snapshot&quot;</span> : <span class="hljs-literal">false</span>,<br>    <span class="hljs-string">&quot;lucene_version&quot;</span> : <span class="hljs-string">&quot;6.6.1&quot;</span><br>  &#125;,<br>  <span class="hljs-string">&quot;tagline&quot;</span> : <span class="hljs-string">&quot;You Know, for Search&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>访问 <a href="http://192.168.80.130:9100/">http://192.168.80.130:9100/</a>,显示如下，则说明elasticsearch-head启动成功</p><p><img src="http://image.focusprogram.top/20200511113534.png"></p><p><strong>注意事项：</strong></p><ul><li><ol><li>修改vm.max_map_count参数，否则无法正常启动</li></ol></li><li><ol start="2"><li>plugins中ik分词器插件版本要与elasticsearch版本保持一致，否则无法正常使用中文分词</li></ol></li></ul><h3 id="4-3-4-elasticsearch常用命令"><a href="#4-3-4-elasticsearch常用命令" class="headerlink" title="4.3.4 elasticsearch常用命令"></a>4.3.4 elasticsearch常用命令</h3><ol><li>查询全部</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">GET</span> _search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;match_all&quot;</span>: &#123;&#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>查询索引以及索引映射类型</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">GET</span> user/_search<br><br><span class="hljs-built_in">GET</span> user/_mapping<br><br><span class="hljs-built_in">GET</span> product/_search<br><br><span class="hljs-built_in">GET</span> product/_mapping<br></code></pre></td></tr></table></figure><ol start="3"><li>删除索引</li></ol><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">DELETE <span class="hljs-keyword">user</span><br><br><span class="hljs-title">DELETE</span> product<br></code></pre></td></tr></table></figure><ol start="4"><li>重新指定文档类型映射IK分词类型</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs awk">POST <span class="hljs-regexp">/product/</span>_mapping/product<br>&#123;<br>      <span class="hljs-string">&quot;product&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;properties&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;@timestamp&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;date&quot;</span><br>          &#125;,<br>          <span class="hljs-string">&quot;@version&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br>            <span class="hljs-string">&quot;fields&quot;</span>: &#123;<br>              <span class="hljs-string">&quot;keyword&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>,<br>                <span class="hljs-string">&quot;ignore_above&quot;</span>: <span class="hljs-number">256</span><br>              &#125;<br>            &#125;<br>          &#125;,<br>          <span class="hljs-string">&quot;attribute_list&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br>            <span class="hljs-string">&quot;fields&quot;</span>: &#123;<br>              <span class="hljs-string">&quot;keyword&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>,<br>                <span class="hljs-string">&quot;ignore_above&quot;</span>: <span class="hljs-number">256</span><br>              &#125;<br>            &#125;<br>          &#125;,<br>          <span class="hljs-string">&quot;category_id&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;long&quot;</span><br>          &#125;,<br>          <span class="hljs-string">&quot;created_time&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;date&quot;</span><br>          &#125;,<br>          <span class="hljs-string">&quot;detail&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br>             <span class="hljs-string">&quot;analyzer&quot;</span>:<span class="hljs-string">&quot;ik_smart&quot;</span>,<br>            <span class="hljs-string">&quot;search_analyzer&quot;</span>:<span class="hljs-string">&quot;ik_smart&quot;</span><br><br>          &#125;,<br>          <span class="hljs-string">&quot;id&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;long&quot;</span><br>          &#125;,<br>          <span class="hljs-string">&quot;main_image&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br>            <span class="hljs-string">&quot;fields&quot;</span>: &#123;<br>              <span class="hljs-string">&quot;keyword&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>,<br>                <span class="hljs-string">&quot;ignore_above&quot;</span>: <span class="hljs-number">256</span><br>              &#125;<br>            &#125;<br>          &#125;,<br>          <span class="hljs-string">&quot;name&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br>            <span class="hljs-string">&quot;analyzer&quot;</span>:<span class="hljs-string">&quot;ik_smart&quot;</span>,<br>            <span class="hljs-string">&quot;search_analyzer&quot;</span>:<span class="hljs-string">&quot;ik_smart&quot;</span><br><br>          &#125;,<br>          <span class="hljs-string">&quot;revision&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;long&quot;</span><br>          &#125;,<br>          <span class="hljs-string">&quot;status&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;long&quot;</span><br>          &#125;,<br>          <span class="hljs-string">&quot;sub_images&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br>            <span class="hljs-string">&quot;fields&quot;</span>: &#123;<br>              <span class="hljs-string">&quot;keyword&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>,<br>                <span class="hljs-string">&quot;ignore_above&quot;</span>: <span class="hljs-number">256</span><br>              &#125;<br>            &#125;<br>          &#125;,<br>          <span class="hljs-string">&quot;subtitle&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br>          <span class="hljs-string">&quot;analyzer&quot;</span>:<span class="hljs-string">&quot;ik_smart&quot;</span>,<br>         <span class="hljs-string">&quot;search_analyzer&quot;</span>:<span class="hljs-string">&quot;ik_smart&quot;</span><br><br>          &#125;,<br>          <span class="hljs-string">&quot;updated_time&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;date&quot;</span><br>          &#125;<br>        &#125;<br>      &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="5"><li>添加自定义拼音和IK分词插件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs bash">PUT /product<br>&#123;<br>   <span class="hljs-string">&quot;settings&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;analysis&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;analyzer&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;ik_smart_pinyin&quot;</span>: &#123;<br>                    <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;custom&quot;</span>,<br>                    <span class="hljs-string">&quot;tokenizer&quot;</span>: <span class="hljs-string">&quot;ik_smart&quot;</span>,<br>                    <span class="hljs-string">&quot;filter&quot;</span>: [<span class="hljs-string">&quot;my_pinyin&quot;</span>, <span class="hljs-string">&quot;word_delimiter&quot;</span>]<br>                &#125;,<br>                <span class="hljs-string">&quot;ik_max_word_pinyin&quot;</span>: &#123;<br>                    <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;custom&quot;</span>,<br>                    <span class="hljs-string">&quot;tokenizer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>,<br>                    <span class="hljs-string">&quot;filter&quot;</span>: [<span class="hljs-string">&quot;my_pinyin&quot;</span>, <span class="hljs-string">&quot;word_delimiter&quot;</span>]<br>                &#125;<br>            &#125;,<br>            <span class="hljs-string">&quot;filter&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;my_pinyin&quot;</span>: &#123;<br>                    <span class="hljs-string">&quot;type&quot;</span> : <span class="hljs-string">&quot;pinyin&quot;</span>,<br>                    <span class="hljs-string">&quot;keep_separate_first_letter&quot;</span> : <span class="hljs-literal">true</span>,<br>                    <span class="hljs-string">&quot;keep_full_pinyin&quot;</span> : <span class="hljs-literal">true</span>,<br>                    <span class="hljs-string">&quot;keep_original&quot;</span> : <span class="hljs-literal">true</span>,<br>                    <span class="hljs-string">&quot;limit_first_letter_length&quot;</span> : 16,<br>                    <span class="hljs-string">&quot;lowercase&quot;</span> : <span class="hljs-literal">true</span>,<br>                    <span class="hljs-string">&quot;remove_duplicated_term&quot;</span> : <span class="hljs-literal">true</span> <br>                &#125;<br>            &#125;<br>        &#125;<br>  &#125;<br>  <br>&#125;<br><br><span class="hljs-comment"># 重新指定文档类型映射自定义分词类型</span><br>POST /product/_mapping/product<br>&#123;<br>  <span class="hljs-string">&quot;product&quot;</span>: &#123;<br><span class="hljs-string">&quot;properties&quot;</span>: &#123;<br>  <span class="hljs-string">&quot;@timestamp&quot;</span>: &#123;<br><span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;date&quot;</span><br>  &#125;,<br>  <span class="hljs-string">&quot;@version&quot;</span>: &#123;<br><span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br><span class="hljs-string">&quot;fields&quot;</span>: &#123;<br>  <span class="hljs-string">&quot;keyword&quot;</span>: &#123;<br><span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>,<br><span class="hljs-string">&quot;ignore_above&quot;</span>: 256<br>  &#125;<br>&#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;attribute_list&quot;</span>: &#123;<br><span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br><span class="hljs-string">&quot;fields&quot;</span>: &#123;<br>  <span class="hljs-string">&quot;keyword&quot;</span>: &#123;<br><span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>,<br><span class="hljs-string">&quot;ignore_above&quot;</span>: 256<br>  &#125;<br>&#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;category_id&quot;</span>: &#123;<br><span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;long&quot;</span><br>  &#125;,<br>  <span class="hljs-string">&quot;created_time&quot;</span>: &#123;<br><span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;date&quot;</span><br>  &#125;,<br>  <span class="hljs-string">&quot;detail&quot;</span>: &#123;<br><span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br> <span class="hljs-string">&quot;analyzer&quot;</span>:<span class="hljs-string">&quot;ik_smart_pinyin&quot;</span>,<br><span class="hljs-string">&quot;search_analyzer&quot;</span>:<span class="hljs-string">&quot;ik_smart_pinyin&quot;</span><br><br>  &#125;,<br>  <span class="hljs-string">&quot;id&quot;</span>: &#123;<br><span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;long&quot;</span><br>  &#125;,<br>  <span class="hljs-string">&quot;main_image&quot;</span>: &#123;<br><span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br><span class="hljs-string">&quot;fields&quot;</span>: &#123;<br>  <span class="hljs-string">&quot;keyword&quot;</span>: &#123;<br><span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>,<br><span class="hljs-string">&quot;ignore_above&quot;</span>: 256<br>  &#125;<br>&#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;name&quot;</span>: &#123;<br><span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br><span class="hljs-string">&quot;analyzer&quot;</span>:<span class="hljs-string">&quot;ik_smart_pinyin&quot;</span>,<br><span class="hljs-string">&quot;search_analyzer&quot;</span>:<span class="hljs-string">&quot;ik_smart_pinyin&quot;</span><br><br>  &#125;,<br>  <span class="hljs-string">&quot;revision&quot;</span>: &#123;<br><span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;long&quot;</span><br>  &#125;,<br>  <span class="hljs-string">&quot;status&quot;</span>: &#123;<br><span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;long&quot;</span><br>  &#125;,<br>  <span class="hljs-string">&quot;sub_images&quot;</span>: &#123;<br><span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br><span class="hljs-string">&quot;fields&quot;</span>: &#123;<br>  <span class="hljs-string">&quot;keyword&quot;</span>: &#123;<br><span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>,<br><span class="hljs-string">&quot;ignore_above&quot;</span>: 256<br>  &#125;<br>&#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;subtitle&quot;</span>: &#123;<br><span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br>  <span class="hljs-string">&quot;analyzer&quot;</span>:<span class="hljs-string">&quot;ik_smart&quot;</span>,<br> <span class="hljs-string">&quot;search_analyzer&quot;</span>:<span class="hljs-string">&quot;ik_smart&quot;</span><br><br>  &#125;,<br>  <span class="hljs-string">&quot;updated_time&quot;</span>: &#123;<br><span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;date&quot;</span><br>  &#125;<br>&#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-3-logstash"><a href="#4-3-logstash" class="headerlink" title="4.3 logstash"></a>4.3 logstash</h2><h3 id="4-3-1-处理过程"><a href="#4-3-1-处理过程" class="headerlink" title="4.3.1 处理过程"></a>4.3.1 处理过程</h3><p><img src="http://image.focusprogram.top/20200511114553.png"></p><p>如上图，Logstash的数据处理过程主要包括：Inputs, Filters, Outputs 三部分， 另外在Inputs和Outputs中可以使用Codecs对数据格式进行处理。这四个部分均以插件形式存在，用户通过定义pipeline配置文件，设置需要使用的input，filter，output, codec插件，以实现特定的数据采集，数据处理，数据输出等功能  </p><ul><li><strong>Inputs</strong>：用于从数据源获取数据，常见的插件如file, syslog, redis, beats 等<a href="https://www.elastic.co/guide/en/logstash/5.6/input-plugins.html">详细参考</a></li><li><strong>Filters</strong>：用于处理数据如格式转换，数据派生等，常见的插件如grok, mutate, drop,  clone, geoip等<a href="https://www.elastic.co/guide/en/logstash/5.6/output-plugins.html">详细参考</a>  </li><li><strong>Outputs</strong>：用于数据输出，常见的插件如elastcisearch，file, graphite, statsd等<a href="https://www.elastic.co/guide/en/logstash/5.6/filter-plugins.html">详细参考</a></li><li><strong>Codecs</strong>：Codecs不是一个单独的流程，而是在输入和输出等插件中用于数据转换的模块，用于对数据进行编码处理，常见的插件如json，multiline<a href="https://www.elastic.co/guide/en/logstash/5.6/codec-plugins.html">详细参考</a></li></ul><h3 id="4-3-2-执行模型"><a href="#4-3-2-执行模型" class="headerlink" title="4.3.2 执行模型"></a>4.3.2 执行模型</h3><ul><li>每个Input启动一个线程，从对应数据源获取数据  </li><li>Input会将数据写入一个队列：默认为内存中的有界队列（意外停止会导致数据丢失）。为了防止数丢失Logstash提供了两个特性：<ul><li>Persistent Queues：通过磁盘上的queue来防止数据丢失</li><li>Dead Letter Queues：保存无法处理的event（仅支持Elasticsearch作为输出源）</li></ul></li><li>Logstash会有多个pipeline worker, 每一个pipeline worker会从队列中取一批数据，然后执行filter和output（worker数目及每次处理的数据量均由配置确定）</li></ul><h3 id="4-3-3-收集数据来源"><a href="#4-3-3-收集数据来源" class="headerlink" title="4.3.3 收集数据来源"></a>4.3.3 收集数据来源</h3><h4 id="4-3-3-1-kafka数据来源"><a href="#4-3-3-1-kafka数据来源" class="headerlink" title="4.3.3.1 kafka数据来源"></a>4.3.3.1 kafka数据来源</h4><p>编辑logstash_kafka.conf</p><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs puppet"><span class="hljs-keyword">input</span> &#123;<br>  kafka &#123;<br>    <span class="hljs-attr">bootstrap_servers</span> =&gt; <span class="hljs-string">&quot;192.168.80.130:9092&quot;</span><br>    <span class="hljs-attr">topics</span> =&gt; [<span class="hljs-string">&quot;my_log&quot;</span>]<br>  &#125;<br>&#125;<br><span class="hljs-keyword">output</span> &#123;<br>    stdout &#123; <span class="hljs-attr">codec</span> =&gt; rubydebug &#125;<br>    <span class="hljs-keyword">elasticsearch</span> &#123;<br>       <span class="hljs-attr">hosts</span> =&gt; [<span class="hljs-string">&quot;192.168.80.130:9200&quot;</span>]<br>       <span class="hljs-attr">index</span> =&gt; <span class="hljs-string">&quot;my_log&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-3-3-2-tomcat数据来源"><a href="#4-3-3-2-tomcat数据来源" class="headerlink" title="4.3.3.2 tomcat数据来源"></a>4.3.3.2 tomcat数据来源</h4><p>编辑logstash_tomcat.conf</p><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs puppet"><span class="hljs-keyword">input</span> &#123;<br>    <span class="hljs-comment"># 从文件读取日志信息 输送到控制台</span><br>    file &#123;<br>        <span class="hljs-attr">path</span> =&gt; <span class="hljs-string">&quot;/tomcat.logs&quot;</span><br>        <span class="hljs-attr">codec</span> =&gt; <span class="hljs-string">&quot;json&quot;</span> <span class="hljs-comment">## 以JSON格式读取日志</span><br>        <span class="hljs-attr">type</span> =&gt; <span class="hljs-string">&quot;elasticsearch&quot;</span><br>        <span class="hljs-attr">start_position</span> =&gt; <span class="hljs-string">&quot;beginning&quot;</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment"># filter &#123;</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># &#125;</span><br><br><span class="hljs-keyword">output</span> &#123;<br>    <span class="hljs-comment"># 标准输出</span><br>    <span class="hljs-comment"># stdout &#123;&#125;</span><br>    <span class="hljs-comment"># 输出进行格式化，采用Ruby库来解析日志</span><br>     stdout &#123; <span class="hljs-attr">codec</span> =&gt; rubydebug &#125;<br>         <span class="hljs-keyword">elasticsearch</span> &#123;<br>        <span class="hljs-attr">hosts</span> =&gt; [<span class="hljs-string">&quot;192.168.80.130:9200&quot;</span>]<br>        <span class="hljs-attr">index</span> =&gt; <span class="hljs-string">&quot;tomcat-%&#123;+YYYY.MM.dd&#125;&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-3-3-3-mysql数据来源"><a href="#4-3-3-3-mysql数据来源" class="headerlink" title="4.3.3.3 mysql数据来源"></a>4.3.3.3 mysql数据来源</h4><p>编辑mysql_tables.conf</p><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs puppet"><span class="hljs-keyword">input</span> &#123;<br>  jdbc &#123;<br>    <span class="hljs-attr">jdbc_driver_library</span> =&gt; <span class="hljs-string">&quot;/mysql-connector-java-5.1.46.jar&quot;</span><br>    <span class="hljs-attr">jdbc_driver_class</span> =&gt; <span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span><br>    <span class="hljs-attr">jdbc_connection_string</span> =&gt; <span class="hljs-string">&quot;jdbc:mysql://114.55.34.44:3306/elk&quot;</span><br>    <span class="hljs-attr">jdbc_user</span> =&gt; <span class="hljs-string">&quot;root&quot;</span><br>    <span class="hljs-attr">jdbc_password</span> =&gt; <span class="hljs-string">&quot;root&quot;</span><br>    <span class="hljs-attr">schedule</span> =&gt; <span class="hljs-string">&quot;* * * * *&quot;</span><br>    <span class="hljs-attr">statement</span> =&gt; <span class="hljs-string">&quot;SELECT * FROM user WHERE update_time &gt;= :sql_last_value&quot;</span><br>    <span class="hljs-attr">use_column_value</span> =&gt; <span class="hljs-keyword">true</span><br>    <span class="hljs-attr">tracking_column_type</span> =&gt; <span class="hljs-string">&quot;timestamp&quot;</span><br>    <span class="hljs-attr">tracking_column</span> =&gt; <span class="hljs-string">&quot;update_time&quot;</span><br>    <span class="hljs-attr">last_run_metadata_path</span> =&gt; <span class="hljs-string">&quot;syncpoint_table&quot;</span><br>    <span class="hljs-attr">type</span> =&gt; <span class="hljs-string">&quot;user&quot;</span><br>  &#125;<br><br>  <span class="hljs-keyword">jdbc</span> &#123;<br>    <span class="hljs-attr">jdbc_driver_library</span> =&gt; <span class="hljs-string">&quot;/mysql-connector-java-5.1.46.jar&quot;</span><br>    <span class="hljs-attr">jdbc_driver_class</span> =&gt; <span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span><br>    <span class="hljs-attr">jdbc_connection_string</span> =&gt; <span class="hljs-string">&quot;jdbc:mysql://114.55.34.44:3306/goods&quot;</span><br>    <span class="hljs-attr">jdbc_user</span> =&gt; <span class="hljs-string">&quot;root&quot;</span><br>    <span class="hljs-attr">jdbc_password</span> =&gt; <span class="hljs-string">&quot;root&quot;</span><br>    <span class="hljs-attr">schedule</span> =&gt; <span class="hljs-string">&quot;* * * * *&quot;</span><br>    <span class="hljs-attr">statement</span> =&gt; <span class="hljs-string">&quot;SELECT * FROM product WHERE updated_time &gt;= :sql_last_value&quot;</span><br>    <span class="hljs-attr">use_column_value</span> =&gt; <span class="hljs-keyword">true</span><br>    <span class="hljs-attr">tracking_column_type</span> =&gt; <span class="hljs-string">&quot;timestamp&quot;</span><br>    <span class="hljs-attr">tracking_column</span> =&gt; <span class="hljs-string">&quot;update_time&quot;</span><br>    <span class="hljs-attr">last_run_metadata_path</span> =&gt; <span class="hljs-string">&quot;syncpoint_table&quot;</span><br>    <span class="hljs-attr">type</span> =&gt; <span class="hljs-string">&quot;product&quot;</span><br>  &#125;<br><br>&#125;<br><br><span class="hljs-keyword">output</span> &#123;<br>    <br>    <span class="hljs-keyword">if</span> [<span class="hljs-built_in">type</span>] == <span class="hljs-string">&quot;user&quot;</span>&#123;     <br>       elasticsearch &#123; <br>        <span class="hljs-comment"># ES的IP地址及端口</span><br>        <span class="hljs-attr">hosts</span> =&gt; [<span class="hljs-string">&quot;192.168.80.130:9200&quot;</span>]<br>        <span class="hljs-comment"># 索引名称 可自定义</span><br>        <span class="hljs-attr">index</span> =&gt; <span class="hljs-string">&quot;user&quot;</span> <br>        <span class="hljs-comment"># 需要关联的数据库中有有一个id字段，对应类型中的id</span><br>        <span class="hljs-attr">document_id</span> =&gt; <span class="hljs-string">&quot;%&#123;id&#125;&quot;</span><br>        <span class="hljs-attr">document_type</span> =&gt; <span class="hljs-string">&quot;user&quot;</span><br>       &#125;<br>    &#125;<br><br>    if [type] == <span class="hljs-string">&quot;product&quot;</span>&#123;<br>       <span class="hljs-keyword">elasticsearch</span> &#123;  <br>        <span class="hljs-comment"># ES的IP地址及端口</span><br>        <span class="hljs-attr">hosts</span> =&gt; [<span class="hljs-string">&quot;192.168.80.130:9200&quot;</span>]<br>        <span class="hljs-comment"># 索引名称 可自定义</span><br>        <span class="hljs-attr">index</span> =&gt; <span class="hljs-string">&quot;product&quot;</span> <br>        <span class="hljs-comment"># 需要关联的数据库中有有一个id字段，对应类型中的id</span><br>        <span class="hljs-attr">document_id</span> =&gt; <span class="hljs-string">&quot;%&#123;id&#125;&quot;</span><br>        <span class="hljs-attr">document_type</span> =&gt; <span class="hljs-string">&quot;product&quot;</span><br>       &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">stdout</span> &#123;<br>        <span class="hljs-comment"># JSON格式输出</span><br>        <span class="hljs-attr">codec</span> =&gt; json_lines<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置文件说明</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">jdbc_driver_library:</span> jdbc mysql 驱动的路径<br><span class="hljs-symbol">jdbc_driver_class:</span> 驱动类的名字，mysql 填 <span class="hljs-keyword">com</span>.mysql.jdbc.Driver 就好了<br><span class="hljs-symbol">jdbc_connection_string:</span> mysql 地址<br><span class="hljs-symbol">jdbc_user:</span> mysql 用户<br><span class="hljs-symbol">jdbc_password:</span> mysql 密码<br><span class="hljs-symbol">schedule:</span> 执行 sql 时机，类似 crontab 的调度<br><span class="hljs-symbol">statement:</span> 要执行的 sql，以 “:” 开头是定义的变量，可以通过 parameters 来设置变量，这里的 sql_last_value 是内置的变量，表示上一次 sql 执行中 update_time 的值，这里 update_time 条件是 &gt;= 因为时间有可能相等，没有等号可能会漏掉一些增量<br><span class="hljs-symbol">use_column_value:</span> 使用递增列的值<br><span class="hljs-symbol">tracking_column_type:</span> 递增字段的类型，numeric 表示数值类型, timestamp 表示时间戳类型<br><span class="hljs-symbol">tracking_column:</span> 递增字段的名称，这里使用 update_time 这一列，这列的类型是 timestamp<br><span class="hljs-symbol">last_run_metadata_path:</span> 同步点文件，这个文件记录了上次的同步点，重启时会读取这个文件，这个文件可以手动修改<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">logstash-<span class="hljs-keyword">input</span>-jdbc原理:<br><br>使用 logstash-<span class="hljs-keyword">input</span>-jdbc 插件读取 mysql 的数据，这个插件的工作原理比较简单，就是定时执行一个 <span class="hljs-keyword">sql</span>，然后将 <span class="hljs-keyword">sql</span> 执行的结果写入到流中，增量获取的方式没有通过 binlog 方式同步，而是用一个递增字段作为条件去查询，每次都记录当前查询的位置，由于递增的特性，只需要查询比当前大的记录即可获取这段时间内的全部增量，一般的递增字段有两种，AUTO_INCREMENT 的主键 id 和 <span class="hljs-keyword">ON</span> <span class="hljs-keyword">UPDATE</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> 的 update_time 字段，id 字段只适用于那种只有插入没有更新的表，update_time 更加通用一些，建议在 mysql 表设计的时候都增加一个 update_time 字段<br></code></pre></td></tr></table></figure><h3 id="4-3-4-docker-compose配置文件"><a href="#4-3-4-docker-compose配置文件" class="headerlink" title="4.3.4 docker-compose配置文件"></a>4.3.4 docker-compose配置文件</h3><p>编辑docker-compose配置文件logstash.yml</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">version</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-attribute">services</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">logstash</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">logstash</span><br>    <span class="hljs-attribute">container_name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">logstash</span><br>    <span class="hljs-attribute">restart</span><span class="hljs-punctuation">:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attribute">networks</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">default</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">ipv4_address</span><span class="hljs-punctuation">:</span> <span class="hljs-string">172.30.0.4</span><br>    <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">5044:5044</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">4560:4560</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">8080:8080</span><br>    <span class="hljs-attribute">volumes</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./data:/data</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./config:/config</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./patterns:/opt/logstash/patterns</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./logs/tomcat.logs:/logs/tomcat.logs</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./java/mysql-connector-java-5.1.46.jar:/mysql-connector-java-5.1.46.jar</span><br>    <span class="hljs-attribute">external_links</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">elasticsearch:elasticsearch</span><br>    <span class="hljs-attribute">command</span><span class="hljs-punctuation">:</span> <span class="hljs-string">bash -c &quot;chmod +x /data &amp;&amp; logstash -f /config/mysql_tables.conf --path.data=/data&quot;</span><br><br><span class="hljs-attribute">networks</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">default</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">external</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">elk-network</span><br></code></pre></td></tr></table></figure><p><strong>注意事项：</strong></p><ul><li><p>logstash -f &#x2F;config&#x2F; 会启动config文件夹下全部需要同步数据来源的配置文件，但是需要在input中指定type进行不同来源的区分，在output进行区分输出</p></li><li><p>logstash -f &#x2F;config&#x2F;mysql_tables.conf 指定启动某个数据来源的配置文件</p></li></ul><h3 id="4-3-5-构建脚本"><a href="#4-3-5-构建脚本" class="headerlink" title="4.3.5 构建脚本"></a>4.3.5 构建脚本</h3><p>编辑构建脚本build.sh</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell">docker<span class="hljs-literal">-compose</span> <span class="hljs-operator">-f</span> logstash.yml stop<br><br>docker<span class="hljs-literal">-compose</span> <span class="hljs-operator">-f</span> logstash.yml <span class="hljs-built_in">rm</span> <span class="hljs-literal">--force</span><br><br>docker<span class="hljs-literal">-compose</span> <span class="hljs-operator">-f</span> logstash.yml up <span class="hljs-literal">-d</span><br></code></pre></td></tr></table></figure><p>执行构建脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">chmod</span> +x build.sh &amp;&amp; ./build.sh</span><br></code></pre></td></tr></table></figure><p>查看启动日志，发现数据库两个表数据已经成功同步,每当数据库指定表中插入数据时，数据会在设定的同步时间内同步到elasticsearch中。目前设置的同步策略为一分钟同步一次</p><p><img src="http://image.focusprogram.top/20200511125914.png"></p><h2 id="4-4-kibana"><a href="#4-4-kibana" class="headerlink" title="4.4 kibana"></a>4.4 kibana</h2><blockquote><p>Kibana 是一款开源的数据分析和可视化平台，它是 Elastic Stack 成员之一，设计用于和 Elasticsearch 协作。您可以使用 Kibana 对 Elasticsearch 索引中的数据进行搜索、查看、交互操作。您可以很方便的利用图表、表格及地图对数据进行多元化的分析和呈现。</p><p>Kibana 可以使大数据通俗易懂。它很简单，基于浏览器的界面便于您快速创建和分享动态数据仪表板来追踪 Elasticsearch 的实时数据变化。</p></blockquote><h3 id="4-4-1-docker-compose配置文件"><a href="#4-4-1-docker-compose配置文件" class="headerlink" title="4.4.1 docker-compose配置文件"></a>4.4.1 docker-compose配置文件</h3><p>编辑kibana.yml配置文件</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">version</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-attribute">services</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">kibana</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">kibana</span><br>    <span class="hljs-attribute">container_name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">kibana</span><br>    <span class="hljs-attribute">restart</span><span class="hljs-punctuation">:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attribute">networks</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">default</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">ipv4_address</span><span class="hljs-punctuation">:</span> <span class="hljs-string">172.30.0.5</span><br>    <span class="hljs-attribute">environment</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">ELASTICSEARCH_URL=http://172.30.0.2:9200</span><br>    <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">5601:5601</span><br>    <span class="hljs-attribute">external_links</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">elasticsearch:elasticsearch</span><br><br><span class="hljs-attribute">networks</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">default</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">external</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">elk-network</span><br></code></pre></td></tr></table></figure><h3 id="4-4-2-构建脚本"><a href="#4-4-2-构建脚本" class="headerlink" title="4.4.2 构建脚本"></a>4.4.2 构建脚本</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell">docker<span class="hljs-literal">-compose</span> <span class="hljs-operator">-f</span> kibana.yml stop<br><br>docker<span class="hljs-literal">-compose</span> <span class="hljs-operator">-f</span> kibana.yml <span class="hljs-built_in">rm</span> <span class="hljs-literal">--force</span><br><br>docker<span class="hljs-literal">-compose</span> <span class="hljs-operator">-f</span> kibana.yml up <span class="hljs-literal">-d</span><br></code></pre></td></tr></table></figure><p>执行构建脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">chmod</span> +x build.sh &amp;&amp; ./build.sh</span><br></code></pre></td></tr></table></figure><p>成功构建，显示如下：</p><p><img src="http://image.focusprogram.top/20200511130308.png"></p><h3 id="4-4-3-访问Kibana"><a href="#4-4-3-访问Kibana" class="headerlink" title="4.4.3 访问Kibana"></a>4.4.3 访问Kibana</h3><p><a href="http://192.168.80.130:5601/status">http://192.168.80.130:5601/status</a></p><p><img src="http://image.focusprogram.top/20200511133846.png"></p><p><a href="http://192.168.80.130:5601/">http://192.168.80.130:5601/</a></p><p><img src="http://image.focusprogram.top/20200511130538.png"></p><p>创建索引user、product</p><p><img src="http://image.focusprogram.top/20200511132114.png"></p><p><img src="http://image.focusprogram.top/20200511132218.png"></p>]]></content>
    
    
    <categories>
      
      <category>微服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
      <tag>微服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>xxl-job</title>
    <link href="/2020/07/11/xxl-job/"/>
    <url>/2020/07/11/xxl-job/</url>
    
    <content type="html"><![CDATA[<p><strong>xxl-job分布式任务调度平台</strong></p><hr><h1 id="1-xxl-job是什么？"><a href="#1-xxl-job是什么？" class="headerlink" title="1. xxl-job是什么？"></a>1. xxl-job是什么？</h1><blockquote><p><a href="https://github.com/xuxueli/xxl-job/">XXL-JOB</a> 是一个分布式任务调度平台，其核心设计目标是开发迅速、学习简单、轻量级、易扩展。</p></blockquote><h1 id="2-特性"><a href="#2-特性" class="headerlink" title="2. 特性"></a>2. 特性</h1><blockquote><ul><li>1、简单：支持通过Web页面对任务进行CRUD操作，操作简单，一分钟上手；</li><li>2、动态：支持动态修改任务状态、启动&#x2F;停止任务，以及终止运行中任务，即时生效；</li><li>3、调度中心HA（中心式）：调度采用中心式设计，“调度中心”自研调度组件并支持集群部署，可保证调度中心HA；</li><li>4、执行器HA（分布式）：任务分布式执行，任务”执行器”支持集群部署，可保证任务执行HA；</li><li>5、注册中心: 执行器会周期性自动注册任务, 调度中心将会自动发现注册的任务并触发执行。同时，也支持手动录入执行器地址；</li><li>6、弹性扩容缩容：一旦有新执行器机器上线或者下线，下次调度时将会重新分配任务；</li><li>7、路由策略：执行器集群部署时提供丰富的路由策略，包括：第一个、最后一个、轮询、随机、一致性HASH、最不经常使用、最近最久未使用、故障转移、忙碌转移等；</li><li>8、故障转移：任务路由策略选择”故障转移”情况下，如果执行器集群中某一台机器故障，将会自动Failover切换到一台正常的执行器发送调度请求。</li><li>9、阻塞处理策略：调度过于密集执行器来不及处理时的处理策略，策略包括：单机串行（默认）、丢弃后续调度、覆盖之前调度；</li><li>10、任务超时控制：支持自定义任务超时时间，任务运行超时将会主动中断任务；</li><li>11、任务失败重试：支持自定义任务失败重试次数，当任务失败时将会按照预设的失败重试次数主动进行重试；其中分片任务支持分片粒度的失败重试；</li><li>12、任务失败告警；默认提供邮件方式失败告警，同时预留扩展接口，可方便的扩展短信、钉钉等告警方式；</li><li>13、分片广播任务：执行器集群部署时，任务路由策略选择”分片广播”情况下，一次任务调度将会广播触发集群中所有执行器执行一次任务，可根据分片参数开发分片任务；</li><li>14、动态分片：分片广播任务以执行器为维度进行分片，支持动态扩容执行器集群从而动态增加分片数量，协同进行业务处理；在进行大数据量业务操作时可显著提升任务处理能力和速度。</li><li>15、事件触发：除了”Cron方式”和”任务依赖方式”触发任务执行之外，支持基于事件的触发任务方式。调度中心提供触发任务单次执行的API服务，可根据业务事件灵活触发。</li><li>16、任务进度监控：支持实时监控任务进度；</li><li>17、Rolling实时日志：支持在线查看调度结果，并且支持以Rolling方式实时查看执行器输出的完整的执行日志；</li><li>18、GLUE：提供Web IDE，支持在线开发任务逻辑代码，动态发布，实时编译生效，省略部署上线的过程。支持30个版本的历史版本回溯。</li><li>19、脚本任务：支持以GLUE模式开发和运行脚本任务，包括Shell、Python、NodeJS、PHP、PowerShell等类型脚本;</li><li>20、命令行任务：原生提供通用命令行任务Handler（Bean任务，”CommandJobHandler”）；业务方只需要提供命令行即可；</li><li>21、任务依赖：支持配置子任务依赖，当父任务执行结束且执行成功后将会主动触发一次子任务的执行, 多个子任务用逗号分隔；</li><li>22、一致性：“调度中心”通过DB锁保证集群分布式调度的一致性, 一次任务调度只会触发一次执行；</li><li>23、自定义任务参数：支持在线配置调度任务入参，即时生效；</li><li>24、调度线程池：调度系统多线程触发调度运行，确保调度精确执行，不被堵塞；</li><li>25、数据加密：调度中心和执行器之间的通讯进行数据加密，提升调度信息安全性；</li><li>26、邮件报警：任务失败时支持邮件报警，支持配置多邮件地址群发报警邮件；</li><li>27、推送maven中央仓库: 将会把最新稳定版推送到maven中央仓库, 方便用户接入和使用;</li><li>28、运行报表：支持实时查看运行数据，如任务数量、调度次数、执行器数量等；以及调度报表，如调度日期分布图，调度成功分布图等；</li><li>29、全异步：任务调度流程全异步化设计实现，如异步调度、异步运行、异步回调等，有效对密集调度进行流量削峰，理论上支持任意时长任务的运行；</li><li>30、跨语言：调度中心与执行器提供语言无关的 RESTful API 服务，第三方任意语言可据此对接调度中心或者实现执行器。除此之外，还提供了 “多任务模式”和“httpJobHandler”等其他跨语言方案；</li><li>31、国际化：调度中心支持国际化设置，提供中文、英文两种可选语言，默认为中文；</li><li>32、容器化：提供官方docker镜像，并实时更新推送dockerhub，进一步实现产品开箱即用；</li><li>33、线程池隔离：调度线程池进行隔离拆分，慢任务自动降级进入”Slow”线程池，避免耗尽调度线程，提高系统稳定性；</li><li>34、用户管理：支持在线管理系统用户，存在管理员、普通用户两种角色；</li><li>35、权限控制：执行器维度进行权限控制，管理员拥有全量权限，普通用户需要分配执行器权限后才允许相关操作。</li></ul></blockquote><h1 id="3-架构设计"><a href="#3-架构设计" class="headerlink" title="3. 架构设计"></a>3. 架构设计</h1><p><img src="https://image.focusprogram.top/20200413203530.png"></p><h1 id="4-搭建部署"><a href="#4-搭建部署" class="headerlink" title="4. 搭建部署"></a>4. 搭建部署</h1><p>源码下载地址 <a href="https://github.com/xuxueli/xxl-job">https://github.com/xuxueli/xxl-job</a></p><h2 id="4-1-初始化数据库"><a href="#4-1-初始化数据库" class="headerlink" title="4.1 初始化数据库"></a>4.1 初始化数据库</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/xxl-job/</span>doc<span class="hljs-regexp">/db/</span>tables_xxl_job.sql<br></code></pre></td></tr></table></figure><h2 id="4-2-源码结构"><a href="#4-2-源码结构" class="headerlink" title="4.2 源码结构"></a>4.2 源码结构</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">xxl-<span class="hljs-keyword">job-admin：调度中心</span><br><span class="hljs-keyword"></span>xxl-<span class="hljs-keyword">job-core：公共依赖</span><br><span class="hljs-keyword"></span>xxl-<span class="hljs-keyword">job-executor-samples：执行器Sample示例（选择合适的版本执行器，可直接使用，也可以参考其并将现有项目改造成执行器）</span><br><span class="hljs-keyword"></span>    ：xxl-<span class="hljs-keyword">job-executor-sample-springboot：Springboot版本，通过Springboot管理执行器，推荐这种方式；</span><br><span class="hljs-keyword"></span>    ：xxl-<span class="hljs-keyword">job-executor-sample-spring：Spring版本，通过Spring容器管理执行器，比较通用；</span><br><span class="hljs-keyword"></span>    ：xxl-<span class="hljs-keyword">job-executor-sample-frameless：无框架版本；</span><br><span class="hljs-keyword"></span>    ：xxl-<span class="hljs-keyword">job-executor-sample-jfinal：JFinal版本，通过JFinal管理执行器；</span><br><span class="hljs-keyword"></span>    ：xxl-<span class="hljs-keyword">job-executor-sample-nutz：Nutz版本，通过Nutz管理执行器；</span><br><span class="hljs-keyword"></span>    ：xxl-<span class="hljs-keyword">job-executor-sample-jboot：jboot版本，通过jboot管理执行器；</span><br></code></pre></td></tr></table></figure><h2 id="4-3-配置调度中心xxl-job-admin"><a href="#4-3-配置调度中心xxl-job-admin" class="headerlink" title="4.3  配置调度中心xxl-job-admin"></a>4.3  配置调度中心xxl-job-admin</h2><h3 id="4-3-1-单点部署"><a href="#4-3-1-单点部署" class="headerlink" title="4.3.1 单点部署"></a>4.3.1 单点部署</h3><blockquote><p>&#x2F;xxl-job&#x2F;xxl-job-admin&#x2F;src&#x2F;main&#x2F;resources&#x2F;application.properties</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">### 调度中心JDBC链接：链接地址请保持和 2.1章节 所创建的调度数据库的地址一致</span><br>spring.datasource.<span class="hljs-attribute">url</span>=jdbc:mysql://127.0.0.1:3306/xxl_job?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai<br>spring.datasource.<span class="hljs-attribute">username</span>=root<br>spring.datasource.<span class="hljs-attribute">password</span>=root_pwd<br>spring.datasource.<span class="hljs-attribute">driver-class-name</span>=com.mysql.jdbc.Driver<br><br><span class="hljs-comment">### 报警邮箱</span><br>spring.mail.<span class="hljs-attribute">host</span>=smtp.qq.com<br>spring.mail.<span class="hljs-attribute">port</span>=25<br>spring.mail.<span class="hljs-attribute">username</span>=xxx@qq.com<br>spring.mail.<span class="hljs-attribute">password</span>=xxx<br>spring.mail.properties.mail.smtp.<span class="hljs-attribute">auth</span>=<span class="hljs-literal">true</span><br>spring.mail.properties.mail.smtp.starttls.<span class="hljs-attribute">enable</span>=<span class="hljs-literal">true</span><br>spring.mail.properties.mail.smtp.starttls.<span class="hljs-attribute">required</span>=<span class="hljs-literal">true</span><br>spring.mail.properties.mail.smtp.socketFactory.<span class="hljs-attribute">class</span>=javax.net.ssl.SSLSocketFactory<br><br><span class="hljs-comment">### 调度中心通讯TOKEN [选填]：非空时启用；</span><br>xxl.job.accessToken=<br><br><span class="hljs-comment">### 调度中心国际化配置 [必填]： 默认为 &quot;zh_CN&quot;/中文简体, 可选范围为 &quot;zh_CN&quot;/中文简体, &quot;zh_TC&quot;/中文繁体 and &quot;en&quot;/英文；</span><br>xxl.job.<span class="hljs-attribute">i18n</span>=zh_CN<br><br><span class="hljs-comment">## 调度线程池最大线程配置【必填】</span><br>xxl.job.triggerpool.fast.<span class="hljs-attribute">max</span>=200<br>xxl.job.triggerpool.slow.<span class="hljs-attribute">max</span>=100<br><br><span class="hljs-comment">### 调度中心日志表数据保存天数 [必填]：过期日志自动清理；限制大于等于7时生效，否则, 如-1，关闭自动清理功能；</span><br>xxl.job.<span class="hljs-attribute">logretentiondays</span>=30<br></code></pre></td></tr></table></figure><blockquote><p>编译部署项目</p></blockquote><p>调度中心访问地址：<a href="http://localhost:8080/xxl-job-admin">http://localhost:8080/xxl-job-admin</a> (该地址执行器将会使用到，作为回调地址)</p><p>默认账户密码： admin&#x2F;123456</p><p><img src="http://image.focusprogram.top/20200421165013.png"></p><h3 id="4-3-2-集群部署"><a href="#4-3-2-集群部署" class="headerlink" title="4.3.2 集群部署"></a>4.3.2 集群部署</h3><p><strong>调度中心支持集群部署，提升调度系统容灾和可用性</strong></p><p><strong>调度中心集群部署时，几点要求和建议：</strong></p><ul><li><strong>DB配置保持一致；</strong></li><li><strong>集群机器时钟保持一致（单机集群忽视）；</strong></li><li><strong>建议：推荐通过nginx为调度中心集群做负载均衡，分配域名。调度中心访问、执行器回调配置、调用API服务等操作均通过该域名进行。</strong></li></ul><p>使用docker运行如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ docker network create --driver=bridge --subnet=<span class="hljs-number">172.18</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">16</span> mynetwork<br><br>$ docker run -d -p <span class="hljs-number">8080</span>:<span class="hljs-number">8080</span> \<br>--restart=always \<br>--net mynetwork --ip <span class="hljs-number">172.18</span>.<span class="hljs-number">0.8</span> \<br>-v <span class="hljs-regexp">/data/</span>xxl-job-admin-one<span class="hljs-regexp">/applogs:/</span>data/applogs \<br>-v <span class="hljs-regexp">/etc/</span>localtime:<span class="hljs-regexp">/etc/</span>localtime<br>-v <span class="hljs-regexp">/etc/</span>timezone:<span class="hljs-regexp">/etc/</span>timezone<br>-e PARAMS=<span class="hljs-string">&quot;--spring.datasource.url=jdbc:mysql://114.55.34.44:3306/xxl_job?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai --spring.datasource.username=root --spring.datasource.password=root&quot;</span> \<br>--name xxl-job-admin-one xuxueli/xxl-job-admin:<span class="hljs-number">2.2</span>.<span class="hljs-number">0</span><br><br>$ docker run -d -p <span class="hljs-number">8081</span>:<span class="hljs-number">8080</span> \<br>--restart=always \<br>--net mynetwork --ip <span class="hljs-number">172.18</span>.<span class="hljs-number">0.9</span> \<br>-v <span class="hljs-regexp">/data/</span>xxl-job-admin-two<span class="hljs-regexp">/applogs:/</span>data/applogs \<br>-v <span class="hljs-regexp">/etc/</span>localtime:<span class="hljs-regexp">/etc/</span>localtime<br>-v <span class="hljs-regexp">/etc/</span>timezone:<span class="hljs-regexp">/etc/</span>timezone<br>-e PARAMS=<span class="hljs-string">&quot;--spring.datasource.url=jdbc:mysql://114.55.34.44:3306/xxl_job?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai --spring.datasource.username=root --spring.datasource.password=root&quot;</span> \<br>--name xxl-job-admin-two xuxueli/xxl-job-admin:<span class="hljs-number">2.2</span>.<span class="hljs-number">0</span><br><br>$ docker run -d -p <span class="hljs-number">8082</span>:<span class="hljs-number">8080</span> \<br>--restart=always \<br>--net mynetwork --ip <span class="hljs-number">172.18</span>.<span class="hljs-number">0.10</span> \<br>-v <span class="hljs-regexp">/data/</span>xxl-job-admin-three<span class="hljs-regexp">/applogs:/</span>data/applogs \<br>-v <span class="hljs-regexp">/etc/</span>localtime:<span class="hljs-regexp">/etc/</span>localtime<br>-v <span class="hljs-regexp">/etc/</span>timezone:<span class="hljs-regexp">/etc/</span>timezone<br>-e PARAMS=<span class="hljs-string">&quot;--spring.datasource.url=jdbc:mysql://114.55.34.44:3306/xxl_job?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai --spring.datasource.username=root --spring.datasource.password=root&quot;</span> \<br>--name xxl-job-admin-three xuxueli/xxl-job-admin:<span class="hljs-number">2.2</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p><img src="http://image.focusprogram.top/20200422112535.png"></p><p>nginx配置轮询</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">upstream</span> xxl-server &#123;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">172.18.0.8:8080</span> weight=<span class="hljs-number">1</span>;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">172.18.0.9:8081</span> weight=<span class="hljs-number">2</span>;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">172.18.0.10:8082</span> weight=<span class="hljs-number">3</span>;<br>&#125;<br><br><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br><br>    <span class="hljs-attribute">server_name</span> www.focusprogram.top;<br><br>    <span class="hljs-attribute">client_max_body_size</span> <span class="hljs-number">1024m</span>;<br><br>    <span class="hljs-section">location</span> /xxl-job-admin/ &#123;<br>    <br>          <span class="hljs-attribute">proxy_set_header</span> HOST <span class="hljs-variable">$host</span>;<br>          <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-Proto <span class="hljs-variable">$scheme</span>;<br>          <span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>          <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br><br>          <span class="hljs-attribute">proxy_send_timeout</span> <span class="hljs-number">300</span>;<br>          <span class="hljs-attribute">proxy_read_timeout</span> <span class="hljs-number">300</span>;<br>          <span class="hljs-attribute">proxy_connect_timeout</span> <span class="hljs-number">300</span>;<br><br>          <span class="hljs-attribute">proxy_pass</span> http://xxl-server/xxl-job-admin/;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>访问 <a href="https://www.focusprogram.top/xxl-job-admin/">https://www.focusprogram.top/xxl-job-admin/</a></p><p><img src="http://image.focusprogram.top/20200422112810.png"></p><h2 id="4-4-配置执行器"><a href="#4-4-配置执行器" class="headerlink" title="4.4  配置执行器"></a>4.4  配置执行器</h2><h3 id="4-4-1-引入maven依赖"><a href="#4-4-1-引入maven依赖" class="headerlink" title="4.4.1 引入maven依赖"></a>4.4.1 引入maven依赖</h3><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.xuxueli<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>xxl-job-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;version&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="4-4-2-配置文件"><a href="#4-4-2-配置文件" class="headerlink" title="4.4.2 配置文件"></a>4.4.2 配置文件</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs clean">### 调度中心部署跟地址 [选填]：如调度中心集群部署存在多个地址则用逗号分隔。执行器将会使用该地址进行<span class="hljs-string">&quot;执行器心跳注册&quot;</span>和<span class="hljs-string">&quot;任务结果回调&quot;</span>；为空则关闭自动注册；<br>xxl.job.admin.addresses=http:<span class="hljs-comment">//127.0.0.1:8080/xxl-job-admin</span><br><br>### 执行器通讯TOKEN [选填]：非空时启用；<br>xxl.job.accessToken=<br><br>### 执行器AppName [选填]：执行器心跳注册分组依据；为空则关闭自动注册<br>xxl.job.executor.appname=xxl-job-executor-sample<br>### 执行器注册 [选填]：优先使用该配置作为注册地址，为空时使用内嵌服务 ”IP:PORT“ 作为注册地址。从而更灵活的支持容器类型执行器动态IP和动态映射端口问题。<br>xxl.job.executor.address=<br>### 执行器IP [选填]：默认为空表示自动获取IP，多网卡时可手动设置指定IP，该IP不会绑定Host仅作为通讯实用；地址信息用于 <span class="hljs-string">&quot;执行器注册&quot;</span> 和 <span class="hljs-string">&quot;调度中心请求并触发任务&quot;</span>；<br>xxl.job.executor.ip=<br>### 执行器端口号 [选填]：小于等于<span class="hljs-number">0</span>则自动获取；默认端口为<span class="hljs-number">9999</span>，单机部署多个执行器时，注意要配置不同执行器端口；<br>xxl.job.executor.port=<span class="hljs-number">9999</span><br>### 执行器运行日志文件存储磁盘路径 [选填] ：需要对该路径拥有读写权限；为空则使用默认路径；<br>xxl.job.executor.logpath=/data/applogs/xxl-job/jobhandler<br>### 执行器日志文件保存天数 [选填] ： 过期日志自动清理, 限制值大于等于<span class="hljs-number">3</span>时生效; 否则, 如<span class="hljs-number">-1</span>, 关闭自动清理功能；<br>xxl.job.executor.logretentiondays=<span class="hljs-number">30</span><br></code></pre></td></tr></table></figure><h3 id="4-4-3-执行器组件注入"><a href="#4-4-3-执行器组件注入" class="headerlink" title="4.4.3 执行器组件注入"></a>4.4.3 执行器组件注入</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Bean<br>public XxlJobSpringExecutor xxl<span class="hljs-constructor">JobExecutor()</span> &#123;<br>    logger.info(<span class="hljs-string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; xxl-job config init.&quot;</span>);<br>    XxlJobSpringExecutor xxlJobSpringExecutor = <span class="hljs-keyword">new</span> <span class="hljs-constructor">XxlJobSpringExecutor()</span>;<br>    xxlJobSpringExecutor.set<span class="hljs-constructor">AdminAddresses(<span class="hljs-params">adminAddresses</span>)</span>;<br>    xxlJobSpringExecutor.set<span class="hljs-constructor">Appname(<span class="hljs-params">appname</span>)</span>;<br>    xxlJobSpringExecutor.set<span class="hljs-constructor">Ip(<span class="hljs-params">ip</span>)</span>;<br>    xxlJobSpringExecutor.set<span class="hljs-constructor">Port(<span class="hljs-params">port</span>)</span>;<br>    xxlJobSpringExecutor.set<span class="hljs-constructor">AccessToken(<span class="hljs-params">accessToken</span>)</span>;<br>    xxlJobSpringExecutor.set<span class="hljs-constructor">LogPath(<span class="hljs-params">logPath</span>)</span>;<br>    xxlJobSpringExecutor.set<span class="hljs-constructor">LogRetentionDays(<span class="hljs-params">logRetentionDays</span>)</span>;<br><br>    return xxlJobSpringExecutor;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-4-4-单点部署"><a href="#4-4-4-单点部署" class="headerlink" title="4.4.4 单点部署"></a>4.4.4 单点部署</h3><p>编译jar包执行即可</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">mvn clean <span class="hljs-keyword">install </span><br><br><span class="hljs-keyword">java </span>-<span class="hljs-keyword">jar </span>*.<span class="hljs-keyword">jar</span><br></code></pre></td></tr></table></figure><h3 id="4-4-5-集群部署"><a href="#4-4-5-集群部署" class="headerlink" title="4.4.5 集群部署"></a>4.4.5 集群部署</h3><p><strong>执行器支持集群部署，提升调度系统可用性，同时提升任务处理能力。</strong></p><p><strong>执行器集群部署时，几点要求和建议：</strong></p><ul><li><p><strong>执行器回调地址（xxl.job.admin.addresses）需要保持一致；执行器根据该配置进行执行器自动注册等操作。</strong></p></li><li><p><strong>同一个执行器集群内AppName（xxl.job.executor.appname）需要保持一致；调度中心根据该配置动态发现不同集群的在线执行器列表。</strong></p></li></ul><p><img src="http://image.focusprogram.top/20200423212112.png"></p><h2 id="4-5-新建定时任务"><a href="#4-5-新建定时任务" class="headerlink" title="4.5 新建定时任务"></a>4.5 新建定时任务</h2><h3 id="4-5-1-BEAN执行模式"><a href="#4-5-1-BEAN执行模式" class="headerlink" title="4.5.1 BEAN执行模式"></a>4.5.1 BEAN执行模式</h3><blockquote><p>Bean模式任务，支持基于方法的开发方式，每个任务对应一个方法。</p><p>基于方法开发的任务，底层会生成JobHandler代理，和基于类的方式一样，任务也会以JobHandler的形式存在于执行器任务容器中。</p></blockquote><ul><li>优点：<ul><li>每个任务只需要开发一个方法，并添加”@XxlJob”注解即可，更加方便、快速。</li><li>支持自动扫描任务并注入到执行器容器。</li></ul></li><li>缺点：要求Spring容器环境；</li></ul><p><img src="http://image.focusprogram.top/20200423212525.png"></p><p><img src="http://image.focusprogram.top/20200423212613.png"></p><p><img src="http://image.focusprogram.top/20200423212803.png"></p><h3 id="4-5-2-GLUE模式-Java"><a href="#4-5-2-GLUE模式-Java" class="headerlink" title="4.5.2 GLUE模式(Java)"></a>4.5.2 GLUE模式(Java)</h3><blockquote><p>任务以源码方式维护在调度中心，支持通过Web IDE在线更新，实时编译和生效，因此不需要指定JobHandler。</p></blockquote><p><img src="http://image.focusprogram.top/20200423213011.png"></p><p><img src="http://image.focusprogram.top/20200423213038.png"></p><p><img src="http://image.focusprogram.top/20200423213132.png"></p><h3 id="4-5-3-配置属性详细说明"><a href="#4-5-3-配置属性详细说明" class="headerlink" title="4.5.3 配置属性详细说明"></a>4.5.3 配置属性详细说明</h3><blockquote><ul><li><p>执行器：任务的绑定的执行器，任务触发调度时将会自动发现注册成功的执行器, 实现任务自动发现功能; 另一方面也可以方便的进行任务分组。每个任务必须绑定一个执行器, 可在 “执行器管理” 进行设置;</p></li><li><p>任务描述：任务的描述信息，便于任务管理；</p></li><li><p>路由策略：当执行器集群部署时，提供丰富的路由策略，包括；<br>  FIRST（第一个）：固定选择第一个机器；<br>  LAST（最后一个）：固定选择最后一个机器；<br>  ROUND（轮询）：；<br>  RANDOM（随机）：随机选择在线的机器；<br>  CONSISTENT_HASH（一致性HASH）：每个任务按照Hash算法固定选择某一台机器，且所有任务均匀散列在不同机器上。<br>  LEAST_FREQUENTLY_USED（最不经常使用）：使用频率最低的机器优先被选举；<br>  LEAST_RECENTLY_USED（最近最久未使用）：最久未使用的机器优先被选举；<br>  FAILOVER（故障转移）：按照顺序依次进行心跳检测，第一个心跳检测成功的机器选定为目标执行器并发起调度；<br>  BUSYOVER（忙碌转移）：按照顺序依次进行空闲检测，第一个空闲检测成功的机器选定为目标执行器并发起调度；<br>  SHARDING_BROADCAST(分片广播)：广播触发对应集群中所有机器执行一次任务，同时系统自动传递分片参数；可根据分片参数开发分片任务；</p></li><li><p>Cron：触发任务执行的Cron表达式；</p></li><li><p>运行模式：<br>  BEAN模式：任务以JobHandler方式维护在执行器端；需要结合 “JobHandler” 属性匹配执行器中任务；<br>  GLUE模式(Java)：任务以源码方式维护在调度中心；该模式的任务实际上是一段继承自IJobHandler的Java类代码并 “groovy” 源码方式维护，它在执行器项目中运行，可使用@Resource&#x2F;@Autowire注入执行器里中的其他服务；<br>  GLUE模式(Shell)：任务以源码方式维护在调度中心；该模式的任务实际上是一段 “shell” 脚本；<br>  GLUE模式(Python)：任务以源码方式维护在调度中心；该模式的任务实际上是一段 “python” 脚本；<br>  GLUE模式(PHP)：任务以源码方式维护在调度中心；该模式的任务实际上是一段 “php” 脚本；<br>  GLUE模式(NodeJS)：任务以源码方式维护在调度中心；该模式的任务实际上是一段 “nodejs” 脚本；<br>  GLUE模式(PowerShell)：任务以源码方式维护在调度中心；该模式的任务实际上是一段 “PowerShell” 脚本；</p></li><li><p>JobHandler：运行模式为 “BEAN模式” 时生效，对应执行器中新开发的JobHandler类“@JobHandler”注解自定义的value值；</p></li><li><p>阻塞处理策略：调度过于密集执行器来不及处理时的处理策略；<br>  单机串行（默认）：调度请求进入单机执行器后，调度请求进入FIFO队列并以串行方式运行；<br>  丢弃后续调度：调度请求进入单机执行器后，发现执行器存在运行的调度任务，本次请求将会被丢弃并标记为失败；<br>  覆盖之前调度：调度请求进入单机执行器后，发现执行器存在运行的调度任务，将会终止运行中的调度任务并清空队列，然后运行本地调度任务；</p></li><li><p>子任务：每个任务都拥有一个唯一的任务ID(任务ID可以从任务列表获取)，当本任务执行结束并且执行成功时，将会触发子任务ID所对应的任务的一次主动调度。</p></li><li><p>任务超时时间：支持自定义任务超时时间，任务运行超时将会主动中断任务；</p></li><li><p>失败重试次数；支持自定义任务失败重试次数，当任务失败时将会按照预设的失败重试次数主动进行重试；</p></li><li><p>报警邮件：任务调度失败时邮件通知的邮箱地址，支持配置多邮箱地址，配置多个邮箱地址时用逗号分隔；</p></li><li><p>负责人：任务的负责人；</p></li><li><p>执行参数：任务执行所需的参数；</p></li></ul></blockquote><h3 id="4-5-4-配置执行器"><a href="#4-5-4-配置执行器" class="headerlink" title="4.5.4 配置执行器"></a>4.5.4 配置执行器</h3><blockquote><p>1、”调度中心OnLine:”右侧显示在线的”调度中心”列表, 任务执行结束后, 将会以failover的模式进行回调调度中心通知执行结果, 避免回调的单点风险;</p><p>2、”执行器列表” 中显示在线的执行器列表, 可通过”OnLine 机器”查看对应执行器的集群机器。</p></blockquote><p><img src="http://image.focusprogram.top/20200423213816.png"></p><blockquote><p>执行器属性说明:</p><p>AppName: 是每个执行器集群的唯一标示AppName, 执行器会周期性以AppName为对象进行自动注册。可通过该配置自动发现注册成功的执行器, 供任务调度时使用;</p><p>名称: 执行器的名称, 因为AppName限制字母数字等组成,可读性不强,名称为了提高执行器的可读性;</p><p>排序: 执行器的排序, 系统中需要执行器的地方,如任务新增, 将会按照该排序读取可用的执行器列表;</p><p>注册方式：调度中心获取执行器地址的方式；<br>    自动注册：执行器自动进行执行器注册，调度中心通过底层注册表可以动态发现执行器机器地址；<br>    手动录入：人工手动录入执行器的地址信息，多地址逗号分隔，供调度中心使用；</p><p>机器地址：”注册方式”为”手动录入”时有效，支持人工维护执行器的地址信息；</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>微服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
      <tag>微服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Zookeeper</title>
    <link href="/2020/07/11/Zookeeper/"/>
    <url>/2020/07/11/Zookeeper/</url>
    
    <content type="html"><![CDATA[<p><strong>Zookeeper</strong></p><hr><h1 id="1-什么是Zookeeper"><a href="#1-什么是Zookeeper" class="headerlink" title="1.什么是Zookeeper?"></a>1.什么是Zookeeper?</h1><blockquote><p><a href="https://github.com/apache/zookeeper">Zookeeper</a> 是一个用于维护配置信息、命名、提供分布式同步和提供组服务的集中服务。 所有这些类型的服务都以某种形式被分布式应用程序所使用。 每次实现它们时，都有大量的工作需要去修复那些不可避免的 bug 和竞争条件。 由于实现这些类型的服务很困难，应用程序最初通常会对它们进行缩减，这使得它们在出现变更时变得脆弱，难以管理。 即使正确地执行，在部署应用程序时，这些服务的不同实现也会导致管理复杂性。Zookeeper 旨在将这些不同服务的本质提炼为一个非常简单的接口，以集中化的协调服务。 服务本身是分布式的，并且高度可靠。 服务将实现共识、组管理和存在协议，这样应用程序就不需要自己实现它们。 这些应用程序的特定用途将包括动物园管理员的特定组件和应用程序特定约定的混合。 Zookeeper Recipes 展示了如何使用这个简单的服务来构建更强大的抽象。</p></blockquote><h1 id="2-搭建Zookeeper"><a href="#2-搭建Zookeeper" class="headerlink" title="2. 搭建Zookeeper"></a>2. 搭建Zookeeper</h1><blockquote><p>根据自己选择，下载相应的Zookeeper版本 <a href="http://zookeeper.apache.org/releases.html">下载地址</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs linux"><br>$ tar -zxvf apache-zookeeper-3.6.0-bin.tar.gz<br><br>$ cd /apache-zookeeper-3.6.0-bin<br><br>$ mkdir data #创建data目录<br><br>$ vim /apache-zookeeper-3.6.0-bin/conf/zoo.cfg<br></code></pre></td></tr></table></figure><p>编辑配置文件如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs linux">#ZK中的一个时间单元。ZK中所有时间都是以这个时间单元为基础，进行整数倍配置的。例如，session的最小超时时间是2*tickTime<br>tickTime=2000<br><br>#Follower在启动过程中，会从Leader同步所有最新数据，然后确定自己能够对外服务的起始状态。Leader允许F在 initLimit 时间内完成这个工作。通常情况下，我们不用太在意这个参数的设置。如果ZK集群的数据量确实很大了，F在启动的时候，从Leader上同步数据的时间也会相应变长，因此在这种情况下，有必要适当调大这个参数了<br>initLimit=10<br><br>#在运行过程中，Leader负责与ZK集群中所有机器进行通信，例如通过一些心跳检测机制，来检测机器的存活状态。如果L发出心跳包在syncLimit之后，还没有从F那里收到响应，那么就认为这个F已经不在线了。注意：不要把这个参数设置得过大，否则可能会掩盖一些问题<br>syncLimit=5<br><br>#存储快照文件snapshot的目录。默认情况下，事务日志也会存储在这里。建议同时配置参数dataLogDir, 事务日志的写性能直接影响zk性能<br>dataDir=/data/apache-zookeeper-3.6.0-bin/data<br><br>#客户端连接server的端口，即对外服务端口，一般默认为2181<br>clientPort=2181 <br></code></pre></td></tr></table></figure><p>启动服务端</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs linux">$ cd /data/apache-zookeeper-3.6.0-bin/bin/<br><br>$ ./zkServer.sh start<br></code></pre></td></tr></table></figure><p>显示如下，则说明启动成功：</p><p><img src="https://image.focusprogram.top/20200308214002.png"></p><h1 id="3-集群搭建Zookeeper"><a href="#3-集群搭建Zookeeper" class="headerlink" title="3. 集群搭建Zookeeper"></a>3. 集群搭建Zookeeper</h1><h2 id="3-1-集群服务器所需配置"><a href="#3-1-集群服务器所需配置" class="headerlink" title="3.1 集群服务器所需配置"></a>3.1 集群服务器所需配置</h2><table><thead><tr><th>hostname</th><th>ipaddress</th><th>mask</th><th>gateway</th><th>port</th></tr></thead><tbody><tr><td>master</td><td>192.168.80.130</td><td>255.255.255.0</td><td>192.168.80.2</td><td>2181</td></tr><tr><td>slave-one</td><td>192.168.80.131</td><td>255.255.255.0</td><td>192.168.80.2</td><td>2181</td></tr><tr><td>slave-two</td><td>192.168.80.132</td><td>255.255.255.0</td><td>192.168.80.2</td><td>2181</td></tr></tbody></table><h2 id="3-2-集群数量为什么至少是三台，并且最好为奇数？"><a href="#3-2-集群数量为什么至少是三台，并且最好为奇数？" class="headerlink" title="3.2 集群数量为什么至少是三台，并且最好为奇数？"></a>3.2 集群数量为什么至少是三台，并且最好为奇数？</h2><blockquote><p>zookeeper 集群通常是用来对用户的分布式应用程序提供协调服务的，为了保证数据的一致性，对 zookeeper 集群进行了这样三种角色划分：leader、follower、observer分别对应着总统、议员和观察者。</p></blockquote><ul><li><p><strong>总统（leader）：负责进行投票的发起和决议，更新系统状态。</strong></p></li><li><p><strong>议员（follower）：用于接收客户端请求并向客户端返回结果以及在选举过程中参与投票。</strong></p></li><li><p><strong>观察者（observer）：也可以接收客户端连接，将写请求转发给leader节点，但是不参与投票过程，只同步leader的状态。通常对查询操作做负载。</strong></p></li></ul><blockquote><p>我们知道，在每台机器数据保持一致的情况下，zookeeper集群可以保证，客户端发起的每次查询操作，集群节点都能返回同样的结果。</p><p>但是对于客户端发起的修改、删除等能改变数据的操作呢？集群中那么多台机器，你修改你的，我修改我的，最后返回集群中哪台机器的数据呢？</p><p>这就是一盘散沙，需要一个领导，于是在zookeeper集群中，leader的作用就体现出来了，只有leader节点才有权利发起修改数据的操作，而follower节点即使接收到了客户端发起的修改操作，也要将其转交给leader来处理，leader接收到修改数据的请求后，会向所有follower广播一条消息，让他们执行某项操作，follower 执行完后，便会向 leader 回复执行完毕。当 leader 收到半数以上的 follower 的确认消息，便会判定该操作执行完毕，然后向所有 follower 广播该操作已经生效。</p><p>所以zookeeper集群中leader是不可缺少的，但是 leader 节点是怎么产生的呢？其实就是由所有follower 节点选举产生的，讲究民主嘛，而且leader节点只能有一个，毕竟一个国家不能有多个总统。</p><p>这个时候回到我们的小标题，为什么 zookeeper 节点数是奇数，我们下面来一一来说明：</p></blockquote><ul><li><strong>容错率</strong></li></ul><blockquote><p>  首先从容错率来说明：（需要保证集群能够有半数进行投票）</p><p>　　2台服务器，至少2台正常运行才行（2的半数为1，半数以上最少为2），正常运行1台服务器都不允许挂掉，但是相对于 单节点服务器，2台服务器还有两个单点故障，所以直接排除了。</p><p>　　3台服务器，至少2台正常运行才行（3的半数为1.5，半数以上最少为2），正常运行可以允许1台服务器挂掉</p><p>　　4台服务器，至少3台正常运行才行（4的半数为2，半数以上最少为3），正常运行可以允许1台服务器挂掉</p><p>　　5台服务器，至少3台正常运行才行（5的半数为2.5，半数以上最少为3），正常运行可以允许2台服务器挂掉</p></blockquote><ul><li><strong>防脑裂</strong></li></ul><blockquote><p>　　脑裂集群的脑裂通常是发生在节点之间通信不可达的情况下，集群会分裂成不同的小集群，小集群各自选出自己的leader节点，导致原有的集群出现多个leader节点的情况，这就是脑裂。</p><p>　　3台服务器，投票选举半数为1.5，一台服务裂开，和另外两台服务器无法通行，这时候2台服务器的集群（2票大于半数1.5票），所以可以选举出leader，而 1 台服务器的集群无法选举。</p><p>　　4台服务器，投票选举半数为2，可以分成 1,3两个集群或者2,2两个集群，对于 1,3集群，3集群可以选举；对于2,2集群，则不能选择，造成没有leader节点。</p><p>　　5台服务器，投票选举半数为2.5，可以分成1,4两个集群，或者2,3两集群，这两个集群分别都只能选举一个集群，满足zookeeper集群搭建数目。</p><p>　　以上分析，我们从容错率以及防止脑裂两方面说明了3台服务器是搭建集群的最少数目，4台发生脑裂时会造成没有leader节点的错误。</p></blockquote><h2 id="3-3-集群配置文件"><a href="#3-3-集群配置文件" class="headerlink" title="3.3 集群配置文件"></a>3.3 集群配置文件</h2><h3 id="3-3-1-创建myid文件"><a href="#3-3-1-创建myid文件" class="headerlink" title="3.3.1 创建myid文件"></a>3.3.1 创建myid文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs linux">$ echo 0 &gt; /data/apache-zookeeper-3.6.0-bin/data/myid #192.168.80.130<br><br>$ echo 1 &gt; /data/apache-zookeeper-3.6.0-bin/data/myid #192.168.80.131<br><br>$ echo 2 &gt; /data/apache-zookeeper-3.6.0-bin/data/myid #192.168.80.132<br></code></pre></td></tr></table></figure><h3 id="3-3-2-编辑配置文件zoo-cfg"><a href="#3-3-2-编辑配置文件zoo-cfg" class="headerlink" title="3.3.2 编辑配置文件zoo.cfg"></a>3.3.2 编辑配置文件zoo.cfg</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs linux">tickTime=2000<br><br>initLimit=10<br><br>syncLimit=5<br><br>dataDir=/data/apache-zookeeper-3.6.0-bin/data<br><br>clientPort=2181<br><br>server.0=192.168.80.130:2888:3888<br>server.1=192.168.80.131:2888:3888<br>server.2=192.168.80.132:2888:3888<br></code></pre></td></tr></table></figure><p><img src="https://image.focusprogram.top/20200309102548.png"></p><blockquote><p>server.A&#x3D;B:C:D</p><p>　　　　A：其中 A 是一个数字，表示这个是服务器的编号(myid设置的值)；</p><p>　　　　B：是这个服务器的 ip 地址；</p><p>　　　　C：Leader选举的端口；</p><p>　　　　D：Zookeeper服务器之间的通信端口。</p></blockquote><h3 id="3-2-3-配置系统环境变量"><a href="#3-2-3-配置系统环境变量" class="headerlink" title="3.2.3 配置系统环境变量"></a>3.2.3 配置系统环境变量</h3><blockquote><p>为了能够在任意目录启动zookeeper集群，我们需要配置环境变量</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs linux">$ vim /etc/profile<br><br>#set zookeeper environment<br>export ZK_HOME=/data/apache-zookeeper-3.6.0-bin<br>export PATH=$PATH:$ZK_HOME/bin<br><br>$ source /etc/profile<br></code></pre></td></tr></table></figure><h3 id="3-2-4-启动zookeeper集群服务"><a href="#3-2-4-启动zookeeper集群服务" class="headerlink" title="3.2.4 启动zookeeper集群服务"></a>3.2.4 启动zookeeper集群服务</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> zkServer.sh <span class="hljs-built_in">start</span>         <span class="hljs-comment">#启动服务</span><br><br><span class="hljs-variable">$</span> zkServer.sh stop          <span class="hljs-comment">#停止服务</span><br><br><span class="hljs-variable">$</span> zkServer.sh restart       <span class="hljs-comment">#重启服务</span><br><br><span class="hljs-variable">$</span> zkServer.sh status        <span class="hljs-comment">#查看服务状态</span><br></code></pre></td></tr></table></figure><blockquote><p>　我们分别对集群三台机器执行启动命令。执行完毕后，分别查看集群节点状态：</p><p>　出现如下即是集群搭建成功：</p></blockquote><p><img src="https://image.focusprogram.top/20200309103415.png"></p><p><img src="https://image.focusprogram.top/20200309103423.png"></p><p><img src="https://image.focusprogram.top/20200309103433.png"></p><h2 id="3-4-Zookeeper基础知识"><a href="#3-4-Zookeeper基础知识" class="headerlink" title="3.4 Zookeeper基础知识"></a>3.4 Zookeeper基础知识</h2><h3 id="3-4-1-Zookeeper存储结构"><a href="#3-4-1-Zookeeper存储结构" class="headerlink" title="3.4.1 Zookeeper存储结构"></a>3.4.1 Zookeeper存储结构</h3><p><img src="https://image.focusprogram.top/20200309123305.png"></p><h3 id="3-4-2-Zookeeper分布式协调工具应用场景"><a href="#3-4-2-Zookeeper分布式协调工具应用场景" class="headerlink" title="3.4.2 Zookeeper分布式协调工具应用场景"></a>3.4.2 Zookeeper分布式协调工具应用场景</h3><ul><li><p><strong>命名服务(注册中心)Dubbo注册中心(动态实现负载均衡)</strong></p><ul><li>参考实现 zookeeper-loadbalance(<a href="https://github.com/FocusProgram/person-improve/tree/main/springcloud-zookeeper/zookeeper-loadbalance">github源码地址</a>)</li></ul></li><li><p><strong>分布式配置中心，动态管理配置文件</strong></p></li><li><p><strong>消息中间件，事件通知(发布订阅)</strong></p></li><li><p><strong>Zookeeper分布式事务(全局协调者)</strong></p></li><li><p><strong>Zookeeper实现分布式锁</strong></p><ul><li>参考实现 zookeeper-lock(<a href="https://github.com/FocusProgram/person-improve/tree/main/springcloud-zookeeper/zookeeper-lock">github源码地址</a>)</li></ul><blockquote><p>分布式锁解决方案（目的：为了保证在分布式中共享数据安全问题）</p><p>1.数据库实现分布式锁（不推荐，效率特别低）</p><p>2.基于Redis实现分布式锁（考虑死锁、释放问题）redissession分布式锁</p><p>3.基于Zookeeper实现分布式锁（临时节点释放锁、失效时间容易控制）    </p></blockquote><blockquote><p>Zookeeper实现分布式锁的分类:</p><p>1.保持独占：所谓保持独占，就是所有试图来获取这个锁的客户端，最终只有一个可以成功获得这把锁。通常的做法是把 zk 上的一个 znode 看作是一把锁，通过 create znode 的方式来实现。所有客户端都去创建 &#x2F;distribute_lock 节点，最终成功创建的那个客户端也即拥有了这把锁。</p><p>2.控制时序：就是所有视图来获取这个锁的客户端，最终都是会被安排执行，只是有个全局时序了。做法和上面基本类似，只是这里 &#x2F;distributelock 已经预先存在，客户端在它下面创建临时有序节点（这个可以通过节点的属性控制：CreateMode.EPHEMERALSEQUENTIAL 来指定）。Zk 的父节点（&#x2F;distribute_lock）维持一份 sequence, 保证子节点创建的时序性，从而也形成了每个客户端的全局时序。</p></blockquote><blockquote><p>Zookeeper实现原理：</p><p>多个JVM在同一个Zookeeper创建一个相同的临时节点，由于同级节点不允许重复特性保证只能有一个JVM创建节点</p></blockquote><blockquote><p>Zookeeper如何获取锁？</p><p>那个JVM创建节点快，就先拿到锁</p></blockquote><blockquote><p>Zookeeper如何释放锁？</p><p>拿到锁的JVM执行完程序，关闭当前的session会话，通过事件通知给其余的JVM进行重新等待抢锁</p></blockquote></li><li><p><strong>Zookeeper实现选举策略(哨兵机制)</strong></p><ul><li>参考实现 zookeeper-master(<a href="https://github.com/FocusProgram/person-improve/tree/main/springcloud-zookeeper/zookeeper-master">github源码地址</a>)</li></ul></li><li><p><strong>Zookeeper实现本地负载均衡</strong></p></li></ul><h3 id="3-4-3-Zookeeper节点类型"><a href="#3-4-3-Zookeeper节点类型" class="headerlink" title="3.4.3 Zookeeper节点类型"></a>3.4.3 Zookeeper节点类型</h3><ul><li><strong>持久节点</strong><ul><li>创建的节点永久持久化到硬盘上</li></ul></li><li><strong>临时节点</strong><ul><li>当前节点和会话链接保持，如果链接断开，则临时节点被删除</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>微服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
      <tag>微服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nacos</title>
    <link href="/2020/07/11/Nacos/"/>
    <url>/2020/07/11/Nacos/</url>
    
    <content type="html"><![CDATA[<p><strong>Sping Cloud Alibaba Nacos</strong></p><hr><h1 id="1-什么是Nacos？"><a href="#1-什么是Nacos？" class="headerlink" title="1. 什么是Nacos？"></a>1. 什么是Nacos？</h1><blockquote><p><a href="https://github.com/alibaba/Nacos">Nacos</a> 致力于帮助您发现、配置和管理微服务。Nacos 提供了一组简单易用的特性集，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管理。Nacos 帮助您更敏捷和容易地构建、交付和管理微服务平台。 Nacos 是构建以“服务”为中心的现代应用架构 (例如微服务范式、云原生范式) 的服务基础设施。</p></blockquote><h1 id="2-Nacos的关键特性"><a href="#2-Nacos的关键特性" class="headerlink" title="2. Nacos的关键特性"></a>2. Nacos的关键特性</h1><ul><li>服务发现和服务健康监测</li></ul><blockquote><p>Nacos 支持基于 DNS 和基于 RPC 的服务发现。服务提供者使用 原生SDK、OpenAPI、或一个独立的Agent TODO注册 Service 后，服务消费者可以使用DNS TODO 或HTTP&amp;API查找和发现服务。</p><p>Nacos 提供对服务的实时的健康检查，阻止向不健康的主机或服务实例发送请求。Nacos 支持传输层 (PING 或 TCP)和应用层 (如 HTTP、MySQL、用户自定义）的健康检查。 对于复杂的云环境和网络拓扑环境中（如 VPC、边缘网络等）服务的健康检查，Nacos 提供了 agent 上报模式和服务端主动检测2种健康检查模式。Nacos 还提供了统一的健康检查仪表盘，帮助您根据健康状态管理服务的可用性及流量。</p></blockquote><ul><li>动态配置服务</li></ul><blockquote><p>动态配置服务可以让您以中心化、外部化和动态化的方式管理所有环境的应用配置和服务配置。</p><p>动态配置消除了配置变更时重新部署应用和服务的需要，让配置管理变得更加高效和敏捷。</p><p>配置中心化管理让实现无状态服务变得更简单，让服务按需弹性扩展变得更容易。</p><p>Nacos 提供了一个简洁易用的UI <a href="http://console.nacos.io/nacos/index.html">控制台样例</a> 帮助您管理所有的服务和应用的配置。Nacos 还提供包括配置版本跟踪、金丝雀发布、一键回滚配置以及客户端配置更新状态跟踪在内的一系列开箱即用的配置管理特性，帮助您更安全地在生产环境中管理配置变更和降低配置变更带来的风险。</p></blockquote><ul><li>动态 DNS 服务</li></ul><blockquote><p>动态 DNS 服务支持权重路由，让您更容易地实现中间层负载均衡、更灵活的路由策略、流量控制以及数据中心内网的简单DNS解析服务。动态DNS服务还能让您更容易地实现以 DNS 协议为基础的服务发现，以帮助您消除耦合到厂商私有服务发现 API 上的风险。</p><p>Nacos 提供了一些简单的 DNS APIs TODO 帮助您管理服务的关联域名和可用的 IP:PORT 列表.</p></blockquote><ul><li>服务及其元数据管理</li></ul><blockquote><p>Nacos 能让您从微服务平台建设的视角管理数据中心的所有服务及元数据，包括管理服务的描述、生命周期、服务的静态依赖分析、服务的健康状态、服务的流量管理、路由及安全策略、服务的 SLA 以及最首要的 metrics 统计数据。</p></blockquote><h1 id="3-Nacos生态"><a href="#3-Nacos生态" class="headerlink" title="3. Nacos生态"></a>3. Nacos生态</h1><p><img src="https://image.focusprogram.top/nacosMap.jpg"></p><p><img src="https://image.focusprogram.top/1533045871534-e64b8031-008c-4dfc-b6e8-12a597a003fb.png"></p><h1 id="4-启动-Nacos-Server-并添加配置"><a href="#4-启动-Nacos-Server-并添加配置" class="headerlink" title="4. 启动 Nacos Server 并添加配置"></a>4. 启动 Nacos Server 并添加配置</h1><h2 id="4-1-下载地址"><a href="#4-1-下载地址" class="headerlink" title="4.1 下载地址"></a>4.1 <a href="https://github.com/alibaba/nacos/releases">下载地址</a></h2><h2 id="4-2-启动Nacos-Service"><a href="#4-2-启动Nacos-Service" class="headerlink" title="4.2 启动Nacos Service"></a>4.2 启动Nacos Service</h2><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-title">Linux/Unix/Mac 操作系统，执行命令(默认集群版本启动):</span><br><br>`sh startup.sh -m standalone`(单机) `sh startup.sh -m cluster`(集群)<br><br>Windows 操作系统，执行命令 `cmd startup.cmd`<br><br>默认账户密码：nacos/naocs<br></code></pre></td></tr></table></figure><h2 id="4-3-命令添加配置"><a href="#4-3-命令添加配置" class="headerlink" title="4.3 命令添加配置"></a>4.3 命令添加配置</h2><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">curl -X POST <span class="hljs-string">&quot;http://127.0.0.1:8848/nacos/v1/cs/configs?dataId=nacosConfig.properties&amp;group=DEFAULT_GROUP&amp;content=user.name=Mr.Kong%0Auser.age=24&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">添加配置如下：<br>dataId 为 nacosConfig.properties<span class="hljs-built_in"></span><br><span class="hljs-built_in">group </span>为 DEFAULT_GROUP<br><br>内容如下:<br>user.<span class="hljs-attribute">name</span>=Mr.Kong<br>user.<span class="hljs-attribute">age</span>=24<br></code></pre></td></tr></table></figure><p><img src="https://image.focusprogram.top/20200305152113.png"></p><h1 id="5-Nacos-Config-整合"><a href="#5-Nacos-Config-整合" class="headerlink" title="5. Nacos Config 整合"></a>5. Nacos Config 整合</h1><h2 id="5-1-引入maven依赖"><a href="#5-1-引入maven依赖" class="headerlink" title="5.1 引入maven依赖"></a>5.1 引入maven依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="5-2-添加bootstrap-properties"><a href="#5-2-添加bootstrap-properties" class="headerlink" title="5.2 添加bootstrap.properties"></a>5.2 添加bootstrap.properties</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">spring.application.name</span>=nacosConfig  <span class="hljs-comment">#保持跟Nacos的id名一致</span><br><span class="hljs-attr">spring.cloud.nacos.config.server-addr</span>=ip:<span class="hljs-number">8848</span> <span class="hljs-comment">#服务器ip或本地ip</span><br></code></pre></td></tr></table></figure><h2 id="5-3-添加application-properties"><a href="#5-3-添加application-properties" class="headerlink" title="5.3 添加application.properties"></a>5.3 添加application.properties</h2><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-title">server</span>.<span class="hljs-keyword">port</span>=9000<br></code></pre></td></tr></table></figure><h2 id="5-4-获取相应的配置"><a href="#5-4-获取相应的配置" class="headerlink" title="5.4 获取相应的配置"></a>5.4 获取相应的配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RefreshScope</span> <span class="hljs-comment">//打开动态刷新功能</span><br> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SampleController</span> &#123;<br><br> <span class="hljs-meta">@Value(&quot;$&#123;user.name&#125;&quot;)</span><br> String userName;<br><br> <span class="hljs-meta">@Value(&quot;$&#123;user.age&#125;&quot;)</span><br> <span class="hljs-type">int</span> age;<br> &#125;<br></code></pre></td></tr></table></figure><h2 id="5-5-应用启动"><a href="#5-5-应用启动" class="headerlink" title="5.5 应用启动"></a>5.5 应用启动</h2><p><img src="https://image.focusprogram.top/20200305153453.png"></p><h2 id="5-6-原理解析"><a href="#5-6-原理解析" class="headerlink" title="5.6 原理解析"></a>5.6 原理解析</h2><h3 id="5-6-1-Nacos-Config-数据结构"><a href="#5-6-1-Nacos-Config-数据结构" class="headerlink" title="5.6.1 Nacos Config 数据结构"></a>5.6.1 Nacos Config 数据结构</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">Nacos Config 主要通过 dataId 和 group 来唯一确定一条配置<br><br>Nacos Client 从 Nacos Server 端获取数据时，调用的是此接口<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ConfigService</span>.</span></span>get<span class="hljs-constructor">Config(String <span class="hljs-params">dataId</span>, String <span class="hljs-params">group</span>, <span class="hljs-params">long</span> <span class="hljs-params">timeoutMs</span>)</span><br></code></pre></td></tr></table></figure><h3 id="5-6-2-Spring-Cloud-应用获取数据"><a href="#5-6-2-Spring-Cloud-应用获取数据" class="headerlink" title="5.6.2 Spring Cloud 应用获取数据"></a>5.6.2 Spring Cloud 应用获取数据</h3><h4 id="5-6-2-1-dataId"><a href="#5-6-2-1-dataId" class="headerlink" title="5.6.2.1 dataId"></a>5.6.2.1 dataId</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs markdown">在 Nacos Config Starter 中，dataId 的拼接格式如下<br><br>$&#123;prefix&#125; - $&#123;spring.profiles.active&#125; . $&#123;file-extension&#125;<br><br><span class="hljs-bullet">-</span> <span class="hljs-code">`prefix`</span> 默认为 <span class="hljs-code">`spring.application.name`</span> 的值，也可以通过配置项 <span class="hljs-code">`spring.cloud.nacos.config.prefix`</span>来配置。<br><br><span class="hljs-bullet">-</span> <span class="hljs-code">`spring.profiles.active`</span> 即为当前环境对应的 profile，详情可以参考 [<span class="hljs-string">Spring Boot文档</span>](<span class="hljs-link">https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-profiles.html#boot-features-profiles</span>)<br><br><span class="hljs-bullet">-</span>  注意:当 activeprofile 为空时，对应的连接符 - 也将不存在，dataId 的拼接格式变成 prefix.prefix<br><br><span class="hljs-bullet">-</span> <span class="hljs-code">`file-extension`</span> 为配置内容的数据格式，可以通过配置项 <span class="hljs-code">`spring.cloud.nacos.config.file-extension`</span>来配置。 目前只支持 <span class="hljs-code">`properties`</span> 类型。<br></code></pre></td></tr></table></figure><h4 id="5-6-2-2-group"><a href="#5-6-2-2-group" class="headerlink" title="5.6.2.2 group"></a>5.6.2.2 group</h4><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">- `group` 默认为 `DEFAULT_GROUP`，可以通过 `spring.cloud.nacos.config.group` 配置。<br></code></pre></td></tr></table></figure><h4 id="5-6-2-3-自动注入"><a href="#5-6-2-3-自动注入" class="headerlink" title="5.6.2.3 自动注入"></a>5.6.2.3 自动注入</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">Nacos Config Starter 实现了 `org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.cloud</span><span class="hljs-selector-class">.bootstrap</span><span class="hljs-selector-class">.config</span>.PropertySourceLocator`接口，并将优先级设置成了最高。<br><br>在 Spring Cloud 应用启动阶段，会主动从 Nacos Server 端获取对应的数据，并将获取到的数据转换成 PropertySource 且注入到 Environment 的 PropertySources 属性中，所以使用 @Value 注解也能直接获取 Nacos Server 端配置的内容。<br></code></pre></td></tr></table></figure><h4 id="5-6-2-4-动态刷新"><a href="#5-6-2-4-动态刷新" class="headerlink" title="5.6.2.4 动态刷新"></a>5.6.2.4 动态刷新</h4><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">Nacos Config Starter 默认为所有获取数据成功的 Nacos 的配置项添加了监听功能，在监听到服务端配置发生变化时会实时触发 `org.springframework.cloud.context.refresh.ContextRefresher` 的 refresh 方法 。<br><br>如果需要对 Bean 进行动态刷新，给类添加 `@RefreshScope` 或 `@ConfigurationProperties`注解。<br></code></pre></td></tr></table></figure><h4 id="5-6-2-5-Endpoint-信息查看"><a href="#5-6-2-5-Endpoint-信息查看" class="headerlink" title="5.6.2.5 Endpoint 信息查看"></a>5.6.2.5 Endpoint 信息查看</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk">Springboot支持这一点，Nacos Config也同时可以使用Endpoint来暴露信息。<br><br>在maven 中添加 `spring-boot-starter-actuator`依赖，并在配置中允许 Endpoints 的访问。<br><br>- Spring Boot <span class="hljs-number">1</span>.x 中添加配置 management.security.enabled=false<br>- Spring Boot <span class="hljs-number">2</span>.x 中添加配置 management.endpoints.web.exposure.include=*<br><br>Spring Boot <span class="hljs-number">1</span>.x 可以通过访问 [http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">9000</span><span class="hljs-regexp">/nacos_config](http:/</span><span class="hljs-regexp">/127.0.0.1:9000/</span>nacos_config) 来查看 Nacos Endpoint 的信息。<br><br>Spring Boot <span class="hljs-number">2</span>.x 可以通过访问 [http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">9000</span><span class="hljs-regexp">/actuator/</span>nacos-config](http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">9000</span><span class="hljs-regexp">/actuator/</span>nacos-config) 来访问。<br></code></pre></td></tr></table></figure><p><img src="https://image.focusprogram.top/20200305162410.png"></p><h2 id="5-7-更多"><a href="#5-7-更多" class="headerlink" title="5.7 更多"></a>5.7 更多</h2><table><thead><tr><th>配置项</th><th>key</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>服务端地址</td><td>spring.cloud.nacos.config.server-addr</td><td></td><td></td></tr><tr><td>DataId前缀</td><td>spring.cloud.nacos.config.prefix</td><td></td><td>spring.application.name</td></tr><tr><td>Group</td><td>spring.cloud.nacos.config.group</td><td>DEFAULT_GROUP</td><td></td></tr><tr><td>dataID后缀及内容文件格式</td><td>spring.cloud.nacos.config.file-extension</td><td>properties</td><td>dataId的后缀，同时也是配置内容的文件格式，目前只支持 properties</td></tr><tr><td>配置内容的编码方式</td><td>spring.cloud.nacos.config.encode</td><td>UTF-8</td><td>配置的编码</td></tr><tr><td>获取配置的超时时间</td><td>spring.cloud.nacos.config.timeout</td><td>3000</td><td>单位为 ms</td></tr><tr><td>配置的命名空间</td><td>spring.cloud.nacos.config.namespace</td><td></td><td>常用场景之一是不同环境的配置的区分隔离，例如开发测试环境和生产环境的资源隔离等。</td></tr><tr><td>AccessKey</td><td>spring.cloud.nacos.config.access-key</td><td></td><td></td></tr><tr><td>SecretKey</td><td>spring.cloud.nacos.config.secret-key</td><td></td><td></td></tr><tr><td>相对路径</td><td>spring.cloud.nacos.config.context-path</td><td></td><td>服务端 API 的相对路径</td></tr><tr><td>接入点</td><td>spring.cloud.nacos.config.endpoint</td><td>UTF-8</td><td>地域的某个服务的入口域名，通过此域名可以动态地拿到服务端地址</td></tr><tr><td>是否开启监听和自动刷新</td><td>spring.cloud.nacos.config.refresh.enabled</td><td>TRUE</td><td></td></tr></tbody></table><h1 id="6-Nacos-Discovery-整合"><a href="#6-Nacos-Discovery-整合" class="headerlink" title="6. Nacos Discovery 整合"></a>6. Nacos Discovery 整合</h1><blockquote><p>Nacos Discovery Starter 完成 Spring Cloud 应用的服务注册与发现。</p></blockquote><h2 id="6-1-引入maven依赖"><a href="#6-1-引入maven依赖" class="headerlink" title="6.1 引入maven依赖"></a>6.1 引入maven依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="6-2-添加application-properties"><a href="#6-2-添加application-properties" class="headerlink" title="6.2 添加application.properties"></a>6.2 添加application.properties</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">spring<span class="hljs-selector-class">.cloud</span><span class="hljs-selector-class">.nacos</span><span class="hljs-selector-class">.discovery</span>.server-addr=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8848</span><br></code></pre></td></tr></table></figure><h2 id="6-3-服务注册和发现"><a href="#6-3-服务注册和发现" class="headerlink" title="6.3 服务注册和发现"></a>6.3 服务注册和发现</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@SpringBootApplication</span><br><span class="hljs-variable">@EnableDiscoveryClient</span><br>public class ProviderApplication &#123;<br><br> <span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">static</span> <span class="hljs-selector-tag">void</span> <span class="hljs-selector-tag">main</span>(String[] args) &#123;<br> <span class="hljs-selector-tag">SpringApplication</span><span class="hljs-selector-class">.run</span>(Application.class, args);<br> &#125;<br><br> @<span class="hljs-selector-tag">RestController</span><br> <span class="hljs-selector-tag">class</span> <span class="hljs-selector-tag">EchoController</span> &#123;<br> <span class="hljs-variable">@RequestMapping</span>(value = <span class="hljs-string">&quot;/echo/&#123;string&#125;&quot;</span>, method = RequestMethod.GET)<br> public String echo(<span class="hljs-variable">@PathVariable</span> String string) &#123;<br> <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">string</span>;<br> &#125;<br> &#125;<br> &#125;<br></code></pre></td></tr></table></figure><h2 id="6-4-查询服务"><a href="#6-4-查询服务" class="headerlink" title="6.4 查询服务"></a>6.4 查询服务</h2><p><img src="https://image.focusprogram.top/20200305163858.png"></p><h2 id="6-5-服务发现"><a href="#6-5-服务发现" class="headerlink" title="6.5 服务发现"></a>6.5 服务发现</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">Nacos</span> Discovery Starter默认集成了Ribbon，因此对于使用Ribbon进行负载平衡的组件，您&gt; 可以直接使用Nacos服务发现。<br><br>NacosServerList实现com.netflix.loadbalancer.ServerList接口并在<span class="hljs-variable">@ConditionOnMissing</span>&gt; Bean下自动注入它。<br></code></pre></td></tr></table></figure><h2 id="6-6-原理"><a href="#6-6-原理" class="headerlink" title="6.6 原理"></a>6.6 原理</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">服务注册：<br><br>在Spring云应用程序的启动阶段，将监视WebServerInitializedEvent事件。在初始化Web容器后收到WebServerInitializedEvent事件时，将触发注册操作，并调用ServiceRegistry注册方法以将服务注册到Nacos Server。<br><br>服务发现：<br><br>NacosServerList实现com<span class="hljs-selector-class">.netflix</span><span class="hljs-selector-class">.loadbalancer</span>.ServerList接口并在@ConditionOnMissingBean下自动注入它。功能区默认为集成。<br></code></pre></td></tr></table></figure><h2 id="6-7-更多"><a href="#6-7-更多" class="headerlink" title="6.7 更多"></a>6.7 更多</h2><table><thead><tr><th>配置项</th><th>键</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>服务器地址</td><td>spring.cloud.nacos.discovery.server-addr</td><td></td><td>nacos注册中心地址</td></tr><tr><td>服务名</td><td>spring.cloud.nacos.discovery.service</td><td>spring.application.name</td><td>服务名</td></tr><tr><td>权重</td><td>spring.cloud.nacos.discovery.weight</td><td>1</td><td>值从1到100，值越大，重量越大</td></tr><tr><td>IP</td><td>spring.cloud.nacos.discovery.ip</td><td></td><td>ip address to registry，最高优先级</td></tr><tr><td>网络接口</td><td>spring.cloud.nacos.discovery.network-interface</td><td></td><td>未配置IP时，注册的IP地址为网络接口对应的IP地址。如果未配置此项，则默认采用第一个网络接口的地址。</td></tr><tr><td>端口</td><td>spring.cloud.nacos.discovery.port</td><td>-1</td><td>注册端口，无需配置即可自动检测</td></tr><tr><td>namesapce</td><td>spring.cloud.nacos.discovery.namespace</td><td></td><td>开发环境（dev、pro等）</td></tr><tr><td>accesskey</td><td>spring.cloud.nacos.discovery.access-key</td><td></td><td></td></tr><tr><td>secretkey</td><td>spring.cloud.nacos.discovery.secret-key</td><td></td><td></td></tr><tr><td>元数据</td><td>spring.cloud.nacos.discovery.metadata</td><td></td><td>扩展数据，使用Map格式配置</td></tr><tr><td>日志名称</td><td>spring.cloud.nacos.discovery.log-name</td><td></td><td></td></tr><tr><td>端点</td><td>spring.cloud.nacos.discovery.endpoint</td><td></td><td>服务的域名，通过该域名可以动态获取服务器地址。</td></tr><tr><td>集成功能区</td><td>ribbon.nacos.enabled</td><td>TRUE</td><td></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>微服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
      <tag>微服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Eureka</title>
    <link href="/2020/07/11/Eureka/"/>
    <url>/2020/07/11/Eureka/</url>
    
    <content type="html"><![CDATA[<p><strong>Eureka</strong></p><hr><h1 id="1-什么是Eureka"><a href="#1-什么是Eureka" class="headerlink" title="1. 什么是Eureka?"></a>1. 什么是Eureka?</h1><blockquote><p><a href="https://github.com/Netflix/eureka">Eureka</a> 是一个基于 REST (REST)的服务，主要用于 AWS 云中定位服务，用于中间层服务器的负载平衡和故障转移。 我们称这个服务为 Eureka 服务器。 Eureka 还带有一个基于 java 的客户机组件—— Eureka Client，它使得与服务的交互更加容易。 客户机还有一个内置的负载平衡器，可以进行基本的循环负载平衡。 在 Netflix，一个更加复杂的负载平衡器包装了 Eureka，以提供基于流量、资源使用、错误条件等几个因素的加权负载平衡，从而提供更好的弹性。</p></blockquote><h1 id="2-Eureka的组成"><a href="#2-Eureka的组成" class="headerlink" title="2. Eureka的组成?"></a>2. Eureka的组成?</h1><p><img src="https://image.focusprogram.top/20200310094547.png"></p><ul><li><p>Eureka Server:提供服务注册和发现（响应失效剔除、自我保护）；</p></li><li><p>Service Provider：服务提供方将自身服务注册到Eureka,从而使服务消费方能够找到（向注册中心服务注册、服务同步、服务续约）；</p></li><li><p>Service Consumer服务消费方从Eureka获取注册服务列表，从而能够消费服务（往注册中心获取服务、服务调用、服务下线）</p></li></ul><blockquote><p>为了让Eureka Server知道客户端是否还活着，引入了心跳机制，即每隔一定时间（默认30s）都会告知Eureka Server我还活着，防止“剔除任务”将服务实例从服务列表中排除出去。如果发现一个服务死了，Eureka不会将其注册信息直接删除而是尽可能当前实例的注册信息保护起来即进入自我保护阶段（默认自我保护为开启，可以通过eureka.server.enable-self-preservation&#x3D;false关闭自我保护）。SpringCloud的一些其它模块（比如Ribbon、Zuul等）可以通过Eureka Server来发现系统中其他微服务，做相关的逻辑处理。</p></blockquote><h1 id="3-SpringCloud集成Eureka"><a href="#3-SpringCloud集成Eureka" class="headerlink" title="3. SpringCloud集成Eureka"></a>3. SpringCloud集成Eureka</h1><p>参考地址 <a href="https://github.com/FocusProgram/person-improve/tree/main/springcloud-eureka">https://github.com/FocusProgram/person-improve/tree/main/springcloud-eureka</a></p><h2 id="3-1-模块"><a href="#3-1-模块" class="headerlink" title="3.1 模块"></a>3.1 模块</h2><table><thead><tr><th>Sever Name</th><th>Port</th><th>Function</th></tr></thead><tbody><tr><td>springcloud-eureka-server-one</td><td>9001</td><td>服务端1</td></tr><tr><td>springcloud-eureka-server-two</td><td>9002</td><td>服务端2</td></tr><tr><td>springcloud-eureka-provider-one</td><td>8001</td><td>客户端1（服务提供者）</td></tr><tr><td>springcloud-eureka-provider-two</td><td>8002</td><td>客户端2（服务提供者）</td></tr><tr><td>springcloud-eureka-consumer</td><td>7000</td><td>客户端（服务消费者）</td></tr></tbody></table><h2 id="3-2-功能模块配置"><a href="#3-2-功能模块配置" class="headerlink" title="3.2 功能模块配置"></a>3.2 功能模块配置</h2><h3 id="3-2-1-eureka-server配置"><a href="#3-2-1-eureka-server配置" class="headerlink" title="3.2.1 eureka-server配置"></a>3.2.1 eureka-server配置</h3><ol><li><strong>springcloud-eureka-server-one</strong>和<strong>springcloud-eureka-server-two</strong>引入依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li><strong>springcloud-eureka-server-one</strong>配置文件</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">fetchRegistry:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#由于服务本身就为注册中心，因此不需要注册自己，所有设置为false</span><br>    <span class="hljs-attr">registerWithEureka:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#由于注册中心的职责就是维护服务实例，不需要去检索服务，所有设置为false</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:9002/eureka</span> <span class="hljs-comment">#服务注册中心的配置内容，指定服务注册中心的位置</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">eureka-server-one</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9001</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">eureka-server-one</span><br></code></pre></td></tr></table></figure><ol start="3"><li><strong>springcloud-eureka-server-two</strong>配置文件</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">fetchRegistry:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#由于服务本身就为注册中心，因此不需要注册自己，所有设置为false</span><br>    <span class="hljs-attr">registerWithEureka:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#由于注册中心的职责就是维护服务实例，不需要去检索服务，所有设置为false</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:9001/eureka</span> <span class="hljs-comment">#服务注册中心的配置内容，指定服务注册中心的位置</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">eureka-server-two</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9002</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">eureka-server-two</span><br></code></pre></td></tr></table></figure><ol start="4"><li>启动类添加@EnableEurekaServer注解</li></ol><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@SpringBootApplication</span><br><span class="hljs-variable">@EnableEurekaServer</span><br>public class SpringcloudEurekaServerOneApplication &#123;<br><br>    <span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">static</span> <span class="hljs-selector-tag">void</span> <span class="hljs-selector-tag">main</span>(String[] args) &#123;<br>        <span class="hljs-selector-tag">SpringApplication</span><span class="hljs-selector-class">.run</span>(SpringcloudEurekaServerOneApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@SpringBootApplication</span><br><span class="hljs-variable">@EnableEurekaServer</span><br>public class SpringcloudEurekaServerTwoApplication &#123;<br><br>    <span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">static</span> <span class="hljs-selector-tag">void</span> <span class="hljs-selector-tag">main</span>(String[] args) &#123;<br>        <span class="hljs-selector-tag">SpringApplication</span><span class="hljs-selector-class">.run</span>(SpringcloudEurekaServerTwoApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ol start="5"><li>成功启动显示如下：</li></ol><p><img src="https://image.focusprogram.top/20200310144122.png"></p><p><img src="https://image.focusprogram.top/20200310144134.png"></p><h3 id="3-2-2-eureka-provider配置"><a href="#3-2-2-eureka-provider配置" class="headerlink" title="3.2.2 eureka-provider配置"></a>3.2.2 eureka-provider配置</h3><ol><li><strong>springcloud-eureka-provider-one</strong>和<strong>springcloud-eureka-provider-two</strong>引入依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li><strong>springcloud-eureka-provider-one</strong>配置文件</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">fetchRegistry:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#注册到别的服务，所有设置为true</span><br>    <span class="hljs-attr">registerWithEureka:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#需要去检索服务，所有设置为true</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:9001/eureka,http://localhost:9002/eureka</span> <span class="hljs-comment">#服务注册中心的配置内容，指定服务注册中心的位置</span><br><span class="hljs-comment">#  instance:</span><br><span class="hljs-comment">#    hostname: eureka-provider</span><br><span class="hljs-comment">#    prefer-ip-address: true #以ip地址注册到服务中心（单节点部署为分布式Eureka集群，禁止设置为true）</span><br>  <span class="hljs-attr">server:</span><br>    <span class="hljs-attr">enable-self-preservation:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#是否开启自我保护模式</span><br>    <span class="hljs-attr">eviction-interval-timer-in-ms:</span> <span class="hljs-number">60000</span> <span class="hljs-comment">#服务注册表清理间隔（单位：毫秒，默认60*1000）</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8001</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">eureka-provider</span><br></code></pre></td></tr></table></figure><ol start="3"><li><strong>springcloud-eureka-provider-two</strong>配置文件</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">fetchRegistry:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#注册到别的服务，所有设置为true</span><br>    <span class="hljs-attr">registerWithEureka:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#需要去检索服务，所有设置为true</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:9001/eureka,http://localhost:9002/eureka</span> <span class="hljs-comment">#服务注册中心的配置内容，指定服务注册中心的位置</span><br><span class="hljs-comment">#  instance:</span><br><span class="hljs-comment">#    hostname: eureka-provider</span><br><span class="hljs-comment">#    prefer-ip-address: true #以ip地址注册到服务中心（单节点部署为分布式Eureka集群，禁止设置为true）</span><br>  <span class="hljs-attr">server:</span><br>    <span class="hljs-attr">enable-self-preservation:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#是否开启自我保护模式</span><br>    <span class="hljs-attr">eviction-interval-timer-in-ms:</span> <span class="hljs-number">60000</span> <span class="hljs-comment">#服务注册表清理间隔（单位：毫秒，默认60*1000）</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8002</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">eureka-provider</span><br></code></pre></td></tr></table></figure><ol start="4"><li>添加Controller访问层</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(<span class="hljs-string">&quot;provider&quot;</span>)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProviderController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Value(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;server.port&#125;</span>&quot;</span>)</span><br>    <span class="hljs-keyword">private</span> String port;<br><br>    <span class="hljs-meta">@GetMapping(<span class="hljs-string">&quot;/get&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-keyword">get</span>() &#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;-------------&gt;我是提供服务提供者,端口号为&quot;</span> + port);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;我是提供服务提供者,端口号为&quot;</span> + port;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="5"><li>启动类添加@EnableEurekaClient注解</li></ol><blockquote><p>@EnableEurekaClient与@EnableDiscoveryClient,@EnableEurekaClient该组合注解包含了@EnableDiscoveryClient注解,但是在Finchley.RELEASE版本及之后两者不在是包含关系，spring cloud中discovery service有许多种实现（eureka、consul、zookeeper等等），@EnableDiscoveryClient基于spring-cloud-commons,@EnableEurekaClient基于spring-cloud-netflix，更简单的说就是如果选用的注册中心是eureka，那么推荐@EnableEurekaClient，如果是其他的注册中心，那么推荐使用@EnableDiscoveryClient。</p></blockquote><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@SpringBootApplication</span><br><span class="hljs-variable">@EnableEurekaClient</span><br>public class SpringcloudEurekaProviderOneApplication &#123;<br><br>    <span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">static</span> <span class="hljs-selector-tag">void</span> <span class="hljs-selector-tag">main</span>(String[] args) &#123;<br>        <span class="hljs-selector-tag">SpringApplication</span><span class="hljs-selector-class">.run</span>(SpringcloudEurekaProviderOneApplication.class, args);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@SpringBootApplication</span><br><span class="hljs-variable">@EnableEurekaClient</span><br>public class SpringcloudEurekaProviderTwoApplication &#123;<br><br>    <span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">static</span> <span class="hljs-selector-tag">void</span> <span class="hljs-selector-tag">main</span>(String[] args) &#123;<br>        <span class="hljs-selector-tag">SpringApplication</span><span class="hljs-selector-class">.run</span>(SpringcloudEurekaProviderTwoApplication.class, args);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><ol start="5"><li>成功启动如下，为集群模式：</li></ol><p><img src="https://image.focusprogram.top/20200310145130.png"></p><p><img src="https://image.focusprogram.top/20200310145142.png"></p><h3 id="3-2-3-eureka-consumer配置"><a href="#3-2-3-eureka-consumer配置" class="headerlink" title="3.2.3 eureka-consumer配置"></a>3.2.3 eureka-consumer配置</h3><ol><li><strong>springcloud-eureka-consumer</strong>引入依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-ribbon<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li><strong>springcloud-eureka-consumer</strong>配置文件</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">fetchRegistry:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#注册到别的服务，所有设置为true</span><br>    <span class="hljs-attr">registerWithEureka:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#需要去检索服务，所有设置为true</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:9001/eureka,http://localhost:9002/eureka</span> <span class="hljs-comment">#服务注册中心的配置内容，指定服务注册中心的位置</span><br>  <span class="hljs-attr">server:</span><br>    <span class="hljs-attr">enable-self-preservation:</span> <span class="hljs-literal">false</span> <br>    <span class="hljs-attr">eviction-interval-timer-in-ms:</span> <span class="hljs-number">60000</span><br><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">7000</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">eureka-consumer</span><br></code></pre></td></tr></table></figure><ol start="3"><li>添加Controller访问层</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(<span class="hljs-string">&quot;consumer&quot;</span>)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConsumerController</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> static String url = <span class="hljs-string">&quot;http://eureka-provider/provider/get&quot;</span>;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RestTemplate restTemplate;<br><br>    <span class="hljs-meta">@GetMapping(<span class="hljs-string">&quot;get&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-keyword">get</span>() &#123;<br>        <span class="hljs-keyword">return</span> restTemplate.getForObject(url, String.<span class="hljs-keyword">class</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>注入RestTemplate</li></ol><blockquote><p>在你使用标注了@LoadBalanced的RestTemplate调用服务的时候，就是用了Ribbon，开启了负载均衡Ribbon默认使用的是RoundRobinRule轮询算法（每个服务按顺序请求一次）</p></blockquote><ul><li><p><strong>Ribbon自带负载均衡策略：</strong></p><ul><li>BestAvailableRule ：选择一个最小的并发请求的server</li><li>AvailabilityFilteringRule ：过滤掉那些因为一直连接失败的被标记为circuit tripped的后端server，并过滤掉那些高并发的的后端server（active connections 超过配置的阈值）</li><li>WeightedResponseTimeRule：根据相应时间分配一个weight，相应时间越长，weight越小，被选中的可能性越低</li><li>RetryRule ：对选定的负载均衡策略机上重试机制</li><li>RoundRobinRule：roundRobin方式轮询选择server</li><li>RandomRule：随机选择一个server</li><li>ZoneAvoidanceRule：复合判断server所在区域的性能和server的可用性选择server</li></ul></li></ul><blockquote><p>当然，我们也可以指定使用Ribbon的某种负载均衡算法，或者也可以自定义负载均衡算法</p></blockquote><p>&lt;1&gt;. <strong>指定Ribbon的随机算法为负载均衡策略</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BeanConfig</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Bean</span> 将服务注册到Spring容器中</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@LoadBalanced</span> 实现负载均衡调用服务</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@LoadBalanced</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">RestTemplate</span> <span class="hljs-title function_">getRestTemplate</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 选择随机算法</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">RandomRule</span> <span class="hljs-title function_">getRandomRule</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomRule</span>();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>&lt;2&gt;. <strong>自定义负载均衡算法</strong></p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRule</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">AbstractLoadBalancerRule</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> total = <span class="hljs-number">0</span>;        <span class="hljs-comment">//总共被调用的次数，目前要求每台被调用5次</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> currentIndex = <span class="hljs-number">0</span>; <span class="hljs-comment">//当前提供服务的机器号</span><br><br>    <span class="hljs-keyword">public</span> Server choose(ILoadBalancer lb, Object key) &#123;<br>        <span class="hljs-keyword">if</span> (lb == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        Server <span class="hljs-keyword">server</span> = <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">server</span> == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (Thread.interrupted()) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>            List&lt;Server&gt; upList = lb.getReachableServers();<br>            List&lt;Server&gt; allList = lb.getAllServers();<br><br>            <span class="hljs-built_in">int</span> serverCount = allList.size();<br>            <span class="hljs-keyword">if</span> (serverCount == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (total &lt; <span class="hljs-number">5</span>) &#123;<br>                <span class="hljs-keyword">server</span> = upList.get(currentIndex);<br>                total++;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                total = <span class="hljs-number">0</span>;<br>                currentIndex++;<br>                <span class="hljs-keyword">if</span> (currentIndex &gt;= upList.size()) &#123;<br>                    currentIndex = <span class="hljs-number">0</span>;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">server</span> == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">/*</span><br><span class="hljs-comment">                 * The only time this should happen is if the server list were</span><br><span class="hljs-comment">                 * somehow trimmed. This is a transient condition. Retry after</span><br><span class="hljs-comment">                 * yielding.</span><br><span class="hljs-comment">                 */</span><br>                Thread.yield();<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">server</span>.isAlive()) &#123;<br>                <span class="hljs-keyword">return</span> (<span class="hljs-keyword">server</span>);<br>            &#125;<br><br>            <span class="hljs-comment">// Shouldn&#x27;t actually happen.. but must be transient or a bug.</span><br>            <span class="hljs-keyword">server</span> = <span class="hljs-literal">null</span>;<br>            Thread.yield();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">server</span>;<br><br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-built_in">int</span> chooseRandomInt(<span class="hljs-built_in">int</span> serverCount) &#123;<br>        <span class="hljs-keyword">return</span> ThreadLocalRandom.current().nextInt(serverCount);<br>    &#125;<br><br>    @Override<br>    <span class="hljs-keyword">public</span> Server choose(Object key) &#123;<br>        <span class="hljs-keyword">return</span> choose(getLoadBalancer(), key);<br>    &#125;<br><br>    @Override<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> initWithNiwsConfig(IClientConfig iClientConfig) &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BeanConfig</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Bean</span> 将服务注册到Spring容器中</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@LoadBalanced</span> 实现负载均衡调用服务</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@LoadBalanced</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">RestTemplate</span> <span class="hljs-title function_">getRestTemplate</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 自定义负载均衡算法（调用五次）</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">MyRule</span> <span class="hljs-title function_">getMyRule</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRule</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://image.focusprogram.top/20200310155000.png"></p><p><img src="https://image.focusprogram.top/20200310155017.png"></p><blockquote><p>这个自定义的类不能放在@ComponentScan所扫描的当前包以及子包下，否则我们自定义的这个配置类就会被所有的Ribbon 客户端所共享，也就是我们达不到特殊化指定的目的了</p><p>可以使用@RibbonClient(name &#x3D; “SPRINGCLOUD-EMPLOYEE-PROVIDER”, configuration &#x3D; MyRule.class)明确指定针对哪个服务进行负载均衡，而configuration指定负载均衡的算法具体实现类。当然也可以没有，即对所有服务生效。</p></blockquote><ol start="5"><li>启动类添加@EnableEurekaClient注解</li></ol><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@SpringBootApplication</span><br><span class="hljs-variable">@EnableEurekaClient</span><br>public class SpringcloudEurekaConsumerApplication &#123;<br><br>    <span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">static</span> <span class="hljs-selector-tag">void</span> <span class="hljs-selector-tag">main</span>(String[] args) &#123;<br>        <span class="hljs-selector-tag">SpringApplication</span><span class="hljs-selector-class">.run</span>(SpringcloudEurekaConsumerApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="6"><li>成功启动后，显示如下：</li></ol><p><img src="https://image.focusprogram.top/20200310145917.png"></p><p><img src="https://image.focusprogram.top/20200310145932.png"></p><ol start="7"><li><p>通过RestTemplete远程调用eureka-provider的接口</p><p>访问 <a href="http://localhost:7000/consumer/get">http://localhost:7000/consumer/get</a> 显示如下：</p></li></ol><p><img src="https://image.focusprogram.top/20200310150233.png"></p><p><img src="https://image.focusprogram.top/20200310150248.png"></p><h1 id="4-Eureka和Zookeeper对比"><a href="#4-Eureka和Zookeeper对比" class="headerlink" title="4. Eureka和Zookeeper对比"></a>4. Eureka和Zookeeper对比</h1><blockquote><p>Eureka是基于AP原则构建，而ZooKeeper是基于CP原则构建；ZooKeeper基于CP，不保证高可用，如果zookeeper正在选举或者Zookeeper集群中半数以上机器不可用，那么将无法获得数据。Eureka基于AP，能保证高可用，即使所有机器都挂了，也能拿到本地缓存的数据。作为注册中心，其实配置是不经常变动的，只有发版和机器出故障时会变。对于不经常变动的配置来说，CP是不合适的，而AP在遇到问题时可以用牺牲一致性来保证可用性，既返回旧数据，缓存数据。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>微服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
      <tag>微服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Consul</title>
    <link href="/2020/07/11/Consul/"/>
    <url>/2020/07/11/Consul/</url>
    
    <content type="html"><![CDATA[<p><strong>Consul</strong></p><hr><h1 id="1-什么是Consul"><a href="#1-什么是Consul" class="headerlink" title="1.什么是Consul?"></a>1.什么是Consul?</h1><blockquote><p><a href="https://github.com/hashicorp/consul">Consul</a> 是一个服务网格解决方案，提供了一个全功能的控制平面，具有服务发现、配置和分割功能。 这些特性中的每一个都可以根据需要单独使用，或者可以一起使用来构建一个完整的服务网格。 consul需要一个数据平面，并且支持代理和本地集成模型。 执政带有一个简单的内置代理，这样一切都可以开箱即用，而且还支持第三方代理集成。</p></blockquote><h1 id="2-安装Consul"><a href="#2-安装Consul" class="headerlink" title="2.安装Consul"></a>2.安装Consul</h1><ul><li><strong>安装方式</strong><ul><li>Precompiled Binaries 预编译二进制文件</li><li>Compiling from Source 从源头编译</li><li>Docker</li></ul></li></ul><h2 id="2-1-二进制文件安装-下载地址"><a href="#2-1-二进制文件安装-下载地址" class="headerlink" title="2.1 二进制文件安装 下载地址"></a>2.1 二进制文件安装 <a href="https://www.consul.io/downloads.html">下载地址</a></h2><h2 id="2-2-源码编译"><a href="#2-2-源码编译" class="headerlink" title="2.2 源码编译"></a>2.2 源码编译</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs linux">$ mkdir -p $GOPATH/src/github.com/hashicorp &amp;&amp; cd !$<br><br>$ git clone https://github.com/hashicorp/consul.git<br><br>$ cd consul<br><br>$ make tools<br><br>$ make dev<br><br>$ consul -v 验证安装是否成功<br></code></pre></td></tr></table></figure><h2 id="2-3-Docker安装"><a href="#2-3-Docker安装" class="headerlink" title="2.3 Docker安装"></a>2.3 Docker安装</h2><h3 id="2-3-1-拉取镜像"><a href="#2-3-1-拉取镜像" class="headerlink" title="2.3.1 拉取镜像"></a>2.3.1 拉取镜像</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>docker pull <span class="hljs-symbol">consul:</span>latest<br></code></pre></td></tr></table></figure><h3 id="2-3-2-consul-参数详解"><a href="#2-3-2-consul-参数详解" class="headerlink" title="2.3.2 consul 参数详解"></a>2.3.2 consul 参数详解</h3><blockquote><ul><li>–net&#x3D;host docker参数, 使得docker容器越过了net namespace的隔离，免去手动指定端口映射的步骤</li><li>-server consul支持以server或client的模式运行, server是服务发现模块的核心, client主要用于转发请求</li><li>-advertise 将本机私有IP传递到consul</li><li>-retry-join 指定要加入的consul节点地址，失败后会重试, 可多次指定不同的地址</li><li>-client 指定consul绑定在哪个client地址上，这个地址可提供HTTP、DNS、RPC等服务，默认是&gt;127.0.0.1</li><li>-bind 绑定服务器的ip地址；该地址用来在集群内部的通讯，集群内的所有节点到地址必须是可达的，&gt;默认是0.0.0.0</li></ul><p>allow_stale 设置为true则表明可从consul集群的任一server节点获取dns信息, false则表明每次请求都会&gt;经过consul的server leader</p><ul><li>-bootstrap-expect 数据中心中预期的服务器数。指定后，Consul将等待指定数量的服务器可用，然后&gt;启动群集。允许自动选举leader，但不能与传统-bootstrap标志一起使用, 需要在server模式下运行。</li><li>-data-dir 数据存放的位置，用于持久化保存集群状态</li><li>-node 群集中此节点的名称，这在群集中必须是唯一的，默认情况下是节点的主机名。</li><li>-config-dir 指定配置文件，当这个目录下有 .json 结尾的文件就会被加载，详细可参考<a href="https://www.consul.io/docs/agent/options.html#configuration_files">https://www.consul.io/docs/agent/options.html#configuration_files</a></li><li>-enable-script-checks 检查服务是否处于活动状态，类似开启心跳</li><li>-datacenter 数据中心名称</li><li>-ui 开启ui界面</li><li>-join 指定ip, 加入到已有的集群中</li></ul></blockquote><h3 id="2-3-3-consul-端口详解"><a href="#2-3-3-consul-端口详解" class="headerlink" title="2.3.3 consul 端口详解"></a>2.3.3 consul 端口详解</h3><blockquote><ul><li>8500 : http 端口，用于 http 接口和 web ui访问；</li><li>8300 : server rpc 端口，同一数据中心 consul server 之间通过该端口通信；</li><li>8301 : serf lan 端口，同一数据中心 consul client 通过该端口通信; 用于处理当前datacenter中LAN的gossip通信；</li><li>8302 : serf wan 端口，不同数据中心 consul server 通过该端口通信; agent Server使用，处理与其他datacenter的gossip通信；</li><li>8600 : dns 端口，用于已注册的服务发现；</li></ul></blockquote><h3 id="2-3-4-consul-集群启动Consul"><a href="#2-3-4-consul-集群启动Consul" class="headerlink" title="2.3.4 consul 集群启动Consul"></a>2.3.4 consul 集群启动Consul</h3><p><strong>创建挂载目录</strong></p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs haskell">$ mkdir -p /<span class="hljs-class"><span class="hljs-keyword">data</span>/consul-one/&#123;<span class="hljs-title">conf</span>,<span class="hljs-title">data</span>&#125;</span><br><br>$ mkdir -p /<span class="hljs-class"><span class="hljs-keyword">data</span>/consul-two/&#123;<span class="hljs-title">conf</span>,<span class="hljs-title">data</span>&#125;</span><br><br>$ mkdir -p /<span class="hljs-class"><span class="hljs-keyword">data</span>/consul-three/&#123;<span class="hljs-title">conf</span>,<span class="hljs-title">data</span>&#125;</span><br></code></pre></td></tr></table></figure><p><strong>创建consul的网段</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ docker<span class="hljs-built_in"> network </span>create <span class="hljs-attribute">--driver</span>=bridge <span class="hljs-attribute">--subnet</span>=172.20.0.0/16 consul_network<br></code></pre></td></tr></table></figure><p><strong>启动第一个Consul节点（consul-one）</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ docker run --name consul-one \<br>-d -p <span class="hljs-number">8500</span>:<span class="hljs-number">8500</span> -p <span class="hljs-number">8300</span>:<span class="hljs-number">8300</span> \<br>-p <span class="hljs-number">8301</span>:<span class="hljs-number">8301</span> -p <span class="hljs-number">8302</span>:<span class="hljs-number">8302</span> -p <span class="hljs-number">8600</span>:<span class="hljs-number">8600</span> \<br>--restart=always \<br>-v <span class="hljs-regexp">/data/</span>consul-one<span class="hljs-regexp">/conf/</span>:<span class="hljs-regexp">/consul/</span>conf/ \<br>-v <span class="hljs-regexp">/data/</span>consul-one<span class="hljs-regexp">/data/</span>:<span class="hljs-regexp">/consul/</span>data/ \<br>--net consul_network --ip <span class="hljs-number">172.20</span>.<span class="hljs-number">0.2</span> consul \<br>agent -server -bootstrap-expect <span class="hljs-number">2</span> -ui -bind=<span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span> -client=<span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><br></code></pre></td></tr></table></figure><p><strong>查看consul-one的ip地址</strong></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">$ docker inspect --format=&#x27;&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;&#x27; consul-one<br><br><span class="hljs-number">172.17.0.2</span><br></code></pre></td></tr></table></figure><p><strong>启动第二个Consul节点（consul-two）加入到consul-one</strong></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gradle">$ docker run --name consul-two \<br>-d -p <span class="hljs-number">8501</span>:<span class="hljs-number">8500</span> \<br>--restart=always \<br>-v <span class="hljs-regexp">/data/</span>consul-two<span class="hljs-regexp">/conf/</span>:<span class="hljs-regexp">/consul/</span>conf/ \<br>-v <span class="hljs-regexp">/data/</span>consul-two<span class="hljs-regexp">/data/</span>:<span class="hljs-regexp">/consul/</span>data/ \<br>--net consul_network --ip <span class="hljs-number">172.20</span>.<span class="hljs-number">0.3</span> consul \<br>agent -server -ui -bind=<span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span> -client=<span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span> -<span class="hljs-keyword">join</span> <span class="hljs-number">172.20</span>.<span class="hljs-number">0.2</span><br></code></pre></td></tr></table></figure><p><strong>启动第二个Consul节点（consul-three）加入到consul-one</strong></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gradle">$ docker run --name consul-three \<br>-d -p <span class="hljs-number">8502</span>:<span class="hljs-number">8500</span> \<br>--restart=always \<br>-v <span class="hljs-regexp">/data/</span>consul-three<span class="hljs-regexp">/conf/</span>:<span class="hljs-regexp">/consul/</span>conf/ \<br>-v <span class="hljs-regexp">/data/</span>consul-three<span class="hljs-regexp">/data/</span>:<span class="hljs-regexp">/consul/</span>data/ \<br>--net consul_network --ip <span class="hljs-number">172.20</span>.<span class="hljs-number">0.4</span> consul \<br>agent -server -ui -bind=<span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span> -client=<span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span> -<span class="hljs-keyword">join</span> <span class="hljs-number">172.20</span>.<span class="hljs-number">0.2</span><br></code></pre></td></tr></table></figure><p><strong>查看consul集群信息</strong></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">docker exec -<span class="hljs-keyword">it</span> consul-<span class="hljs-literal">one</span> consul members<br></code></pre></td></tr></table></figure><p><img src="https://image.focusprogram.top/20200307154109.png"></p><p>访问 <a href="http://192.168.80.128:8500/">http://192.168.80.128:8500</a></p><p><img src="https://image.focusprogram.top/20200307154346.png"></p><h1 id="3-客户端集成Consul"><a href="#3-客户端集成Consul" class="headerlink" title="3. 客户端集成Consul"></a>3. 客户端集成Consul</h1><h2 id="3-1-引入maven依赖"><a href="#3-1-引入maven依赖" class="headerlink" title="3.1 引入maven依赖"></a>3.1 引入maven依赖</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-cloud-starter-consul-discovery&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-cloud-starter-consul-config&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h2 id="3-2-项目结构"><a href="#3-2-项目结构" class="headerlink" title="3.2 项目结构"></a>3.2 项目结构</h2><p><img src="https://image.focusprogram.top/20200307231701.png"></p><h2 id="3-3-环境依赖"><a href="#3-3-环境依赖" class="headerlink" title="3.3 环境依赖"></a>3.3 环境依赖</h2><table><thead><tr><th>依赖</th><th>版本</th><th>备注</th></tr></thead><tbody><tr><td>JDK</td><td>1.8</td><td></td></tr><tr><td>Consul</td><td>2.0.0.RELEASE</td><td></td></tr><tr><td>SpringCloud</td><td>Finchley.RELEASE</td><td></td></tr><tr><td>SpringBoot</td><td>2.0.4.RELEASE</td><td></td></tr></tbody></table><h2 id="3-4-配置文件"><a href="#3-4-配置文件" class="headerlink" title="3.4 配置文件"></a>3.4 配置文件</h2><h3 id="3-4-1-application-yml"><a href="#3-4-1-application-yml" class="headerlink" title="3.4.1 application.yml"></a>3.4.1 application.yml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 端口</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8090</span><br><br><span class="hljs-comment"># 演示数据key-value</span><br><span class="hljs-attr">company:</span><br>  <span class="hljs-attr">pay:</span><br>    <span class="hljs-attr">money:</span> <span class="hljs-number">1000</span><br></code></pre></td></tr></table></figure><h3 id="3-4-2-bootstrap-yml"><a href="#3-4-2-bootstrap-yml" class="headerlink" title="3.4.2 bootstrap.yml"></a>3.4.2 bootstrap.yml</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"># 服务名<br>spring:<br>  application:<br>    name: waiter-service<br><br>  profiles:<br>    active: prd<br><br># 是否重载本地配置<br>  cloud:<br>    config:<br>      override-system-properties: <span class="hljs-literal">false</span><br>    consul:<br>      # 指定consul的ip地址和端口<br>      host: <span class="hljs-number">192.168</span><span class="hljs-number">.80</span><span class="hljs-number">.130</span><br>      port: <span class="hljs-number">8500</span><br>      config:<br>        # 指定consul配置文件目录后缀结束为consul<br>        data-key: consul<br>        # consul配置中心功能，默认<span class="hljs-literal">true</span><br>        enabled: <span class="hljs-literal">true</span><br>        # consul配置中心值的格式<br>        format: yaml<br>        # 指定consul配置文件目录前缀为config<br>        prefix: config<br>      discovery:<br>        # 指定服务版本信息<br>        tags: version=<span class="hljs-number">1.0</span>,auth=Mr.Kong<br>        # 是否需要注册到consul，默认为<span class="hljs-literal">true</span><br>        register: <span class="hljs-literal">true</span><br>        # 注册的实例ID (唯一标志)<br>        instance-id: $&#123;spring.application.name&#125;:$&#123;spring.cloud.client.ip-address&#125;<br>        # 服务名称<br>        service-name: $&#123;spring.application.name&#125;<br>        # 服务请求端口<br>        port: $&#123;server.port&#125;<br>        # 指定开启ip地址注册<br>        prefer-ip-address: <span class="hljs-literal">true</span><br>        # 当前服务请求ip<br>        ip-address: $&#123;spring.cloud.client.ip-address&#125;<br>        # 指定consul心跳检测地址<br>        health-check-url: http:<span class="hljs-comment">//$&#123;spring.cloud.client.ip-address&#125;:$&#123;server.port&#125;/actuator/health</span><br>        # 指定consul心跳检测间隔<br>        health-check-interval: 15s<br><br># consul配置中心的目录为 $&#123;spring.cloud.consul.config.prefix&#125;/$&#123;spring.application.name&#125;,$&#123;spring.profiles.active&#125;/$&#123;spring.cloud.consul.config.data-key&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注：关于consul的配置文件一定要放置在bootstrap.yml中才可以生效</p></blockquote><h3 id="3-4-3-动态参数接收类"><a href="#3-4-3-动态参数接收类" class="headerlink" title="3.4.3 动态参数接收类"></a>3.4.3 动态参数接收类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ConfigurationProperties(&quot;company.pay&quot;)</span><br><span class="hljs-meta">@RefreshScope</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PayMoneyProperties</span> &#123;<br><br>    Integer money;<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>@ConfigurationProperties 表示这个类关联动态配置，“company.pay”表示key的前缀部分。</p><p>@RefreshScope 表示动态刷新config server 值</p><p>@Component 表示将该类加载到IOC容器中<br>在实战中尝试用@Value的方式获取动态，只能实现服务重启后获取动态的config server 的值,最终找到解决方案在相应的取值类上加@RefreshScope注解，完美解决。</p></blockquote><h3 id="3-4-4-controller接口"><a href="#3-4-4-controller接口" class="headerlink" title="3.4.4 controller接口"></a>3.4.4 controller接口</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(<span class="hljs-string">&quot;consul&quot;</span>)</span><br><span class="hljs-meta">@RefreshScope</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConsulConfigController</span> </span>&#123;<br><br>    <span class="hljs-comment">//第一种注入值的方法</span><br>    <span class="hljs-meta">@Value(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;company.pay.money&#125;</span>&quot;</span>)</span><br>    <span class="hljs-keyword">private</span> String money;<br><br>    <span class="hljs-comment">//第二种注入值的方法</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> PayMoneyProperties payMoneyProperties;<br><br>    <span class="hljs-meta">@RequestMapping(<span class="hljs-string">&quot;/pay/money&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> Object getConfig() &#123;<br>        String result = <span class="hljs-string">&quot;第一种注入值获取的值为：&quot;</span> + money + <span class="hljs-string">&quot;,第二种注入值获取的值为：&quot;</span> + payMoneyProperties.getMoney();<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>提供了两种注入值的方法，均可，第一种采用@Value进行注入，第二种采用ConfigurationProperties进行注入</p></blockquote><h2 id="3-5-consul中创建节点数据"><a href="#3-5-consul中创建节点数据" class="headerlink" title="3.5 consul中创建节点数据"></a>3.5 consul中创建节点数据</h2><p><img src="https://image.focusprogram.top/20200307233617.png"></p><p><img src="https://image.focusprogram.top/20200307233630.png"></p><blockquote><p>节点的目录分别为：</p><p>config&#x2F;waiter-service,dev&#x2F;consul</p><p>config&#x2F;waiter-service,prd&#x2F;consul</p></blockquote><h2 id="3-6-验证从consul中获取的配置文件"><a href="#3-6-验证从consul中获取的配置文件" class="headerlink" title="3.6 验证从consul中获取的配置文件"></a>3.6 验证从consul中获取的配置文件</h2><p>访问 <a href="http://localhost:8090/consul/pay/money">http://localhost:8090/consul/pay/money</a></p><p><img src="https://image.focusprogram.top/20200307234114.png"></p><p><img src="https://image.focusprogram.top/20200307234217.png"></p><h1 id="4-注意事项"><a href="#4-注意事项" class="headerlink" title="4. 注意事项"></a>4. 注意事项</h1><blockquote><p>consul出现Critical Checks错误</p></blockquote><p><img src="http://image.focusprogram.top/20200514140255.png"></p><p><img src="http://image.focusprogram.top/20200514141020.png"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ curl http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">247.1</span>:<span class="hljs-number">8090</span><span class="hljs-regexp">/actuator/</span>health<br><br>&#123;<span class="hljs-string">&quot;timestamp&quot;</span>:<span class="hljs-string">&quot;2020-05-14T06:07:04.905+0000&quot;</span>,<span class="hljs-string">&quot;status&quot;</span>:<span class="hljs-number">404</span>,<span class="hljs-string">&quot;error&quot;</span>:<span class="hljs-string">&quot;Not Found&quot;</span>,<span class="hljs-string">&quot;message&quot;</span>:<span class="hljs-string">&quot;No message available&quot;</span>,<span class="hljs-string">&quot;path&quot;</span>:<span class="hljs-string">&quot;/actuator/health&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>解决措施：引入maven依赖spring-boot-starter-actuator</p><p>再次访问</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ curl http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">247.1</span>:<span class="hljs-number">8090</span><span class="hljs-regexp">/actuator/</span>health<br><br>&#123;<span class="hljs-string">&quot;status&quot;</span>:<span class="hljs-string">&quot;UP&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>注：consul部署在虚拟机，所以本地网络可以和虚拟机宿主机互通，如果采用云服务器，则服务正常进行健康检查，必须将服务部署在和consul同网段下的云服务器上才可以正常通讯，健康检查才可以通过，该服务才可以正常调用。</p><blockquote><p>引入spring-boot-starter-actuator版本依赖错误</p></blockquote><p><img src="http://image.focusprogram.top/20200514135934.png"></p><p>解决措施：spring-boot版本为2.0.4.RELEASE，spring-cloud版本为Finchley.RELEASE</p>]]></content>
    
    
    <categories>
      
      <category>微服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
      <tag>微服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Apollo</title>
    <link href="/2020/07/11/Apollo/"/>
    <url>/2020/07/11/Apollo/</url>
    
    <content type="html"><![CDATA[<p><strong>Apollo</strong></p><hr><h1 id="1-什么是Apollo"><a href="#1-什么是Apollo" class="headerlink" title="1. 什么是Apollo?"></a>1. 什么是Apollo?</h1><p><a href="https://github.com/ctripcorp/apollo">Apollo</a><br>（阿波罗）是携程框架部门研发的分布式配置中心，能够集中化管理应用不同环境、不同集群的配置，配置修改后能够实时推送到应用端，并且具备规范的权限、流程治理等特性，适用于微服务配置管理场景。</p><h1 id="2-特点"><a href="#2-特点" class="headerlink" title="2. 特点"></a>2. 特点</h1><ul><li><p><strong>统一管理不同环境、不同集群的配置</strong></p><ul><li>Apollo提供了一个统一界面集中式管理不同环境（environment）、不同集群（cluster）、不同命名空间（namespace）的配置。</li><li>同一份代码部署在不同的集群，可以有不同的配置，比如zk的地址等</li><li>通过命名空间（namespace）可以很方便的支持多个不同应用共享同一份配置，同时还允许应用对共享的配置进行覆盖</li><li>配置界面支持多语言（中文，English）</li></ul></li><li><p><strong>配置修改实时生效（热发布）</strong></p><ul><li>用户在Apollo修改完配置并发布后，客户端能实时（1秒）接收到最新的配置，并通知到应用程序。</li></ul></li><li><p><strong>版本发布管理</strong></p><ul><li>所有的配置发布都有版本概念，从而可以方便的支持配置的回滚。</li></ul></li><li><p><strong>灰度发布</strong></p><ul><li>支持配置的灰度发布，比如点了发布后，只对部分应用实例生效，等观察一段时间没问题后再推给所有应用实例。</li></ul></li><li><p><strong>权限管理、发布审核、操作审计</strong></p><ul><li>应用和配置的管理都有完善的权限管理机制，对配置的管理还分为了编辑和发布两个环节，从而减少人为的错误。</li><li>所有的操作都有审计日志，可以方便的追踪问题。</li></ul></li><li><p><strong>客户端配置信息监控</strong></p><ul><li>可以方便的看到配置在被哪些实例使用</li></ul></li><li><p><strong>提供Java和.Net原生客户端</strong></p><ul><li>提供了Java和.Net的原生客户端，方便应用集成</li><li>支持Spring Placeholder，Annotation和Spring Boot的ConfigurationProperties，方便应用使用（需要Spring 3.1.1+）</li><li>同时提供了Http接口，非Java和.Net应用也可以方便的使用</li></ul></li><li><p><strong>提供开放平台API</strong></p><ul><li>Apollo自身提供了比较完善的统一配置管理界面，支持多环境、多数据中心配置管理、权限、流程治理等特性。</li><li>不过Apollo出于通用性考虑，对配置的修改不会做过多限制，只要符合基本的格式就能够保存。</li><li>在我们的调研中发现，对于有些使用方，它们的配置可能会有比较复杂的格式，如xml, json，需要对格式做校验。</li><li>还有一些使用方如DAL，不仅有特定的格式，而且对输入的值也需要进行校验后方可保存，如检查数据库、用户名和密码是否匹配。</li><li>对于这类应用，Apollo支持应用方通过开放接口在Apollo进行配置的修改和发布，并且具备完善的授权和权限控制</li></ul></li></ul><h1 id="3-设计-官方文档参考地址"><a href="#3-设计-官方文档参考地址" class="headerlink" title="3. 设计(官方文档参考地址)"></a>3. 设计(<a href="https://github.com/ctripcorp/apollo/wiki/Apollo%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E4%BB%8B%E7%BB%8D">官方文档参考地址</a>)</h1><h2 id="3-1-基础模型"><a href="#3-1-基础模型" class="headerlink" title="3.1 基础模型"></a>3.1 基础模型</h2><p>如下即是Apollo的基础模型：</p><ol><li>用户在配置中心对配置进行修改并发布</li><li>配置中心通知Apollo客户端有配置更新</li><li>Apollo客户端从配置中心拉取最新的配置、更新本地配置并通知到应用</li></ol><p><img src="https://image.focusprogram.top/basic-architecture.png"></p><h2 id="3-2-界面概览"><a href="#3-2-界面概览" class="headerlink" title="3.2 界面概览"></a>3.2 界面概览</h2><p><img src="https://image.focusprogram.top/apollo-home-screenshot.png"></p><h2 id="3-3-添加-x2F-修改配置项"><a href="#3-3-添加-x2F-修改配置项" class="headerlink" title="3.3  添加&#x2F;修改配置项"></a>3.3  添加&#x2F;修改配置项</h2><p>用户可以通过配置中心界面方便的添加&#x2F;修改配置项，更多使用说明请参见应用<a href="https://github.com/ctripcorp/apollo/wiki/%E5%BA%94%E7%94%A8%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97">接入指南</a></p><p><img src="https://image.focusprogram.top/edit-item-entry.png"></p><p>输入配置信息：</p><p><img src="https://image.focusprogram.top/edit-item.png"></p><h2 id="3-4-发布配置"><a href="#3-4-发布配置" class="headerlink" title="3.4  发布配置"></a>3.4  发布配置</h2><p>通过配置中心发布配置：</p><p><img src="https://image.focusprogram.top/publish-items-entry.png"></p><p>填写发布信息：</p><p><img src="https://image.focusprogram.top/publish-items.png"></p><h2 id="3-5-客户端获取配置（Java-API样例）"><a href="#3-5-客户端获取配置（Java-API样例）" class="headerlink" title="3.5 客户端获取配置（Java API样例）"></a>3.5 客户端获取配置（Java API样例）</h2><p>配置发布后，就能在客户端获取到了，以Java为例，获取配置的示例代码如下。Apollo客户端还支持和Spring整合，更多客户端使用说明请参见<a href="https://github.com/ctripcorp/apollo/wiki/Java%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97">Java客户端使用指南</a>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Config</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> ConfigService.getAppConfig();<br><span class="hljs-type">Integer</span> <span class="hljs-variable">defaultRequestTimeout</span> <span class="hljs-operator">=</span> <span class="hljs-number">200</span>;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">requestTimeout</span> <span class="hljs-operator">=</span> config.getIntProperty(<span class="hljs-string">&quot;requestTimeout&quot;</span>, defaultRequestTimeout);<br></code></pre></td></tr></table></figure><h2 id="3-6-客户端监听配置变化"><a href="#3-6-客户端监听配置变化" class="headerlink" title="3.6 客户端监听配置变化"></a>3.6 客户端监听配置变化</h2><p>通过上述获取配置代码，应用就能实时获取到最新的配置了。</p><p>不过在某些场景下，应用还需要在配置变化时获得通知，比如数据库连接的切换等，所以Apollo还提供了监听配置变化的功能，Java示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Config</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> ConfigService.getAppConfig();<br>config.addChangeListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConfigChangeListener</span>() &#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onChange</span><span class="hljs-params">(ConfigChangeEvent changeEvent)</span> &#123;<br>    <span class="hljs-keyword">for</span> (String key : changeEvent.changedKeys()) &#123;<br>      <span class="hljs-type">ConfigChange</span> <span class="hljs-variable">change</span> <span class="hljs-operator">=</span> changeEvent.getChange(key);<br>      System.out.println(String.format(<br>        <span class="hljs-string">&quot;Found change - key: %s, oldValue: %s, newValue: %s, changeType: %s&quot;</span>,<br>        change.getPropertyName(), change.getOldValue(),<br>        change.getNewValue(), change.getChangeType()));<br>     &#125;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="3-7-Spring集成样例"><a href="#3-7-Spring集成样例" class="headerlink" title="3.7 Spring集成样例"></a>3.7 Spring集成样例</h2><p>Apollo和Spring也可以很方便地集成，只需要标注@EnableApolloConfig后就可以通过@Value获取配置信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableApolloConfig</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppConfig</span> &#123;&#125;<br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SomeBean</span> &#123;<br>    <span class="hljs-comment">//timeout的值会自动更新</span><br>    <span class="hljs-meta">@Value(&quot;$&#123;request.timeout:200&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> timeout;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="4-客户端集成Apollo"><a href="#4-客户端集成Apollo" class="headerlink" title="4. 客户端集成Apollo"></a>4. 客户端集成Apollo</h1><h2 id="4-1-开发环境"><a href="#4-1-开发环境" class="headerlink" title="4.1 开发环境"></a>4.1 开发环境</h2><h3 id="4-1-1-java"><a href="#4-1-1-java" class="headerlink" title="4.1.1 java"></a>4.1.1 java</h3><ul><li><strong>Apollo服务端：1.8+</strong></li><li><strong>Apollo客户端：1.7+</strong></li></ul><p>由于Quick Start会在本地同时启动服务端和客户端，所以需要在本地安装Java 1.8+。</p><p>在配置好后，可以通过如下命令检查：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs linux">java -version<br>样例输出：<br><br>java version &quot;1.8.0_74&quot;<br>Java(TM) SE Runtime Environment (build 1.8.0_74-b02)<br>Java HotSpot(TM) 64-Bit Server VM (build 25.74-b02, mixed mode)<br>Windows用户请确保JAVA_HOME环境变量已经设置。<br></code></pre></td></tr></table></figure><h3 id="4-1-2-mysql"><a href="#4-1-2-mysql" class="headerlink" title="4.1.2 mysql"></a>4.1.2 mysql</h3><ul><li><strong>版本要求：5.6.5+</strong></li></ul><p>Apollo的表结构对timestamp使用了多个default声明，所以需要5.6.5以上版本。</p><p>连接上MySQL后，可以通过如下命令检查：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs linux">SHOW VARIABLES WHERE Variable_name = &#x27;version&#x27;;<br></code></pre></td></tr></table></figure><h3 id="4-1-3-下载Quick-Start安装包"><a href="#4-1-3-下载Quick-Start安装包" class="headerlink" title="4.1.3 下载Quick Start安装包"></a>4.1.3 下载Quick Start安装包</h3><p>我们准备好了一个Quick Start安装包，大家只需要下载到本地，就可以直接使用，免去了编译、打包过程。</p><p>安装包共50M，如果访问github网速不给力的话，可以从百度网盘下载。</p><ul><li><strong>从Github下载</strong><ul><li>checkout或下载<a href="https://github.com/nobodyiam/apollo-build-scripts">apollo-build-scripts</a>项目</li><li>由于Quick Start项目比较大，所以放在了另外的repository，请注意<a href="https://github.com/nobodyiam/apollo-build-scripts">项目地址</a><br><a href="https://github.com/nobodyiam/apollo-build-scripts">https://github.com/nobodyiam/apollo-build-scripts</a></li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs linux">$ git clone https://github.com/nobodyiam/apollo-build-scripts.git<br></code></pre></td></tr></table></figure><ul><li><p><strong>从百度网盘下载</strong></p><ul><li><a href="https://pan.baidu.com/s/1mhVf9va#list/path=/sharelink1426331153-165614845139829/apollo-quick-start&parentPath=/sharelink1426331153-165614845139829">百度网盘下载地址</a></li></ul></li></ul><p>Quick Start只针对本地测试使用，所以一般用户不需要自己下载源码打包，只需要下载已经打好的包即可。不过也有部分用户希望在修改代码后重新打包，那么可以参考如下步骤：</p><p>修改apollo-configservice, apollo-adminservice和apollo-portal的pom.xml，注释掉spring-boot-maven-plugin和maven-assembly-plugin<br>在根目录下执行mvn clean package -pl apollo-assembly -am -DskipTests&#x3D;true<br>复制apollo-assembly&#x2F;target下的jar包，rename为apollo-all-in-one.jar</p><h2 id="4-2-安装部署"><a href="#4-2-安装部署" class="headerlink" title="4.2 安装部署"></a>4.2 安装部署</h2><h3 id="4-2-1-创建数据库"><a href="#4-2-1-创建数据库" class="headerlink" title="4.2.1 创建数据库"></a>4.2.1 创建数据库</h3><p>Apollo服务端共需要两个数据库：ApolloPortalDB和ApolloConfigDB，我们把数据库、表的创建和样例数据都分别准备了sql文件，只需要导入数据库即可。</p><blockquote><p>注意：如果你本地已经创建过Apollo数据库，请注意备份数据。我们准备的sql文件会清空Apollo相关的表。</p></blockquote><p>执行以下sql导入sql执行脚本：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">source <span class="hljs-operator">/</span>your_local_path<span class="hljs-operator">/</span><span class="hljs-keyword">sql</span><span class="hljs-operator">/</span>apolloportaldb.sql<br><br>source <span class="hljs-operator">/</span>your_local_path<span class="hljs-operator">/</span><span class="hljs-keyword">sql</span><span class="hljs-operator">/</span>apolloconfigdb.sql<br></code></pre></td></tr></table></figure><h3 id="4-2-2-配置数据库链接"><a href="#4-2-2-配置数据库链接" class="headerlink" title="4.2.2 配置数据库链接"></a>4.2.2 配置数据库链接</h3><p>Apollo服务端需要知道如何连接到你前面创建的数据库，所以需要编辑demo.sh，修改ApolloPortalDB和ApolloConfigDB相关的数据库连接串信息。</p><blockquote><p>注意：填入的用户需要具备对ApolloPortalDB和ApolloConfigDB数据的读写权限。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs linux">#apollo config db info<br>apollo_config_db_url=jdbc:mysql://localhost:3306/ApolloConfigDB?characterEncoding=utf8<br>apollo_config_db_username=用户名<br>apollo_config_db_password=密码（如果没有密码，留空即可）<br><br># apollo portal db info<br>apollo_portal_db_url=jdbc:mysql://localhost:3306/ApolloPortalDB?characterEncoding=utf8<br>apollo_portal_db_username=用户名<br>apollo_portal_db_password=密码（如果没有密码，留空即可）<br></code></pre></td></tr></table></figure><h3 id="4-2-3-启动Apollo"><a href="#4-2-3-启动Apollo" class="headerlink" title="4.2.3 启动Apollo"></a>4.2.3 启动Apollo</h3><p>Quick Start脚本会在本地启动3个服务，分别使用8070, 8080, 8090端口，请确保这3个端口当前没有被使用。</p><p>例如，在Linux&#x2F;Mac下，可以通过如下命令检查：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs linux">lsof -i:8080 查看8080端口是否被占用<br><br>netstart -tunlp|grep 8080 查看8080端口是否被占用<br><br>ps aux|grep apollo 查看Apollo进程是否运行<br></code></pre></td></tr></table></figure><p>执行脚本:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs linux">./demo.sh start  开启服务端运行（start services and portal）<br>./demo.sh stop   停止服务端运行（stop services and portal）<br>./demo.sh client 开启客户端运行（start client demo program）<br></code></pre></td></tr></table></figure><p>输出如下内容，说明启动成功：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs linux">==== starting service ====<br>Service logging file is ./service/apollo-service.log<br>Started [10768]<br>Waiting for config service startup.......<br>Config service started. You may visit http://localhost:8080 for service status now!<br>Waiting for admin service startup....<br>Admin service started<br>==== starting portal ====<br>Portal logging file is ./portal/apollo-portal.log<br>Started [10846]<br>Waiting for portal startup......<br>Portal started. You can visit http://localhost:8070 now!<br></code></pre></td></tr></table></figure><h2 id="4-3-使用Apollo配置中心"><a href="#4-3-使用Apollo配置中心" class="headerlink" title="4.3 使用Apollo配置中心"></a>4.3 使用Apollo配置中心</h2><h3 id="4-3-1-服务器端搭建"><a href="#4-3-1-服务器端搭建" class="headerlink" title="4.3.1 服务器端搭建"></a>4.3.1 服务器端搭建</h3><p>访问<a href="http://localhost:8070/">http://localhost:8070</a></p><p><img src="https://image.focusprogram.top/apollo-login.png"></p><p>默认用户名密码apollo&#x2F;admin,如需修改参考<a href="https://github.com/ctripcorp/apollo/wiki/Portal-%E5%AE%9E%E7%8E%B0%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E5%8A%9F%E8%83%BD">Portal 实现用户登录功能</a></p><p><img src="https://image.focusprogram.top/apollo-sample-home.png"></p><p>点击SampleApp进入配置界面，可以看到当前有一个配置timeout&#x3D;100</p><p><img src="https://image.focusprogram.top/sample-app-config.png"></p><blockquote><p>如果提示系统出错，请重试或联系系统负责人，请稍后几秒钟重试一下，因为通过Eureka注册的服务有一个刷新的延时。</p></blockquote><p>新建一个配置中心:</p><p><img src="https://image.focusprogram.top/20200307105252.png"></p><p>新增配置：</p><p><img src="https://image.focusprogram.top/20200307105521.png"></p><blockquote><p>注：可以通过文本的方式一次添加多个配置</p></blockquote><p>点击发布：</p><p><img src="https://image.focusprogram.top/20200307105824.png"></p><h3 id="4-3-2-客户端搭建基于SpringBoot"><a href="#4-3-2-客户端搭建基于SpringBoot" class="headerlink" title="4.3.2 客户端搭建基于SpringBoot"></a>4.3.2 客户端搭建基于SpringBoot</h3><p>1.引入maven依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!-- apollo 携程apollo配置中心框架 --&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;com.ctrip.framework.apollo&lt;/groupId&gt;<br>            &lt;artifactId&gt;apollo-client&lt;/artifactId&gt;<br>            &lt;version&gt;<span class="hljs-number">1.0</span><span class="hljs-number">.0</span>&lt;/version&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;com.ctrip.framework.apollo&lt;/groupId&gt;<br>            &lt;artifactId&gt;apollo-core&lt;/artifactId&gt;<br>            &lt;version&gt;<span class="hljs-number">1.0</span><span class="hljs-number">.0</span>&lt;/version&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p>2.项目结构为：</p><p><img src="https://image.focusprogram.top/20200307104203.png"></p><ul><li><p><strong>app.properties</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">app.id</span>=apolloConfig<br><span class="hljs-attr">apollo.meta</span>=http://<span class="hljs-number">114.55</span>.<span class="hljs-number">34.44</span>:<span class="hljs-number">8080</span><br></code></pre></td></tr></table></figure></li><li><p><strong>apollo-env.properties</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">local.meta</span>=http://<span class="hljs-number">114.55</span>.<span class="hljs-number">34.44</span>:<span class="hljs-number">8080</span><br><span class="hljs-attr">dev.meta</span>=http://<span class="hljs-number">114.55</span>.<span class="hljs-number">34.44</span>:<span class="hljs-number">8080</span><br><span class="hljs-attr">fat.meta</span>=<span class="hljs-variable">$&#123;fat_meta&#125;</span><br><span class="hljs-attr">uat.meta</span>=<span class="hljs-variable">$&#123;uat_meta&#125;</span><br><span class="hljs-attr">lpt.meta</span>=<span class="hljs-variable">$&#123;lpt_meta&#125;</span><br><span class="hljs-attr">pro.meta</span>=<span class="hljs-variable">$&#123;pro_meta&#125;</span><br><br></code></pre></td></tr></table></figure></li><li><p><strong>application.yml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9000</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">apollo-demo</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://114.55.34.44:8080/eureka</span><br></code></pre></td></tr></table></figure></li></ul><p>Controller层实现：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(<span class="hljs-string">&quot;apollo&quot;</span>)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ApolloController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Value(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;name:无法读取到值&#125;</span>&quot;</span>)</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-meta">@Value(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;age:<span class="hljs-number">0</span>&#125;</span>&quot;</span>)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">Long</span> age;<br><br>    <span class="hljs-meta">@RequestMapping(<span class="hljs-string">&quot;/getname&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> String getName() &#123;<br>        <span class="hljs-keyword">return</span> name + <span class="hljs-string">&quot;的年龄&quot;</span> + age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>项目启动类代码类实现：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Configuration</span><br><span class="hljs-variable">@SpringBootApplication</span><br><span class="hljs-variable">@EnableApolloConfig</span><br>public class ApollodemoApplication &#123;<br><br>    <span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">static</span> <span class="hljs-selector-tag">void</span> <span class="hljs-selector-tag">main</span>(String[] args) &#123;<br>        <span class="hljs-selector-tag">SpringApplication</span><span class="hljs-selector-class">.run</span>(ApollodemoApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>访问 <a href="http://localhost:9000/apollo/getname">http://localhost:9000/apollo/getname</a></p><p><img src="https://image.focusprogram.top/20200307111511.png"></p><p>修改name值后，重新访问，实时动态更新</p><p><img src="https://image.focusprogram.top/20200307111635.png"></p><p><img src="https://image.focusprogram.top/20200307111710.png"></p><h2 id="4-4-使用Apollo灰度发布"><a href="#4-4-使用Apollo灰度发布" class="headerlink" title="4.4 使用Apollo灰度发布"></a>4.4 使用Apollo灰度发布</h2><h3 id="4-4-1-准备两台服务器"><a href="#4-4-1-准备两台服务器" class="headerlink" title="4.4.1 准备两台服务器"></a>4.4.1 准备两台服务器</h3><table><thead><tr><th>集群节点</th><th>端口</th></tr></thead><tbody><tr><td>192.168.80.128</td><td>9000</td></tr><tr><td>192.168.80.135</td><td>9000</td></tr></tbody></table><p>访问<a href="http://192.168.80.128:9000/apollo/getname">http://192.168.80.128:9000/apollo/getname</a></p><p><img src="https://image.focusprogram.top/20200307112459.png"></p><p>访问<a href="http://192.168.80.135:9000/apollo/getname">http://192.168.80.135:9000/apollo/getname</a></p><p><img src="https://image.focusprogram.top/20200307112514.png"></p><p>Apollo添加灰度发布</p><p><img src="https://image.focusprogram.top/20200307112720.png"></p><p><img src="https://image.focusprogram.top/20200307112758.png"></p><p>针对192.168.80.128节点进行灰度发布</p><p><img src="https://image.focusprogram.top/20200307112850.png"></p><p><img src="https://image.focusprogram.top/20200307112917.png"></p><p>访问<a href="http://192.168.80.128:9000/apollo/getname">http://192.168.80.128:9000/apollo/getname</a>已经发生变化</p><p><img src="https://image.focusprogram.top/20200307112940.png"></p><p>访问<a href="http://192.168.80.135:9000/apollo/getname">http://192.168.80.135:9000/apollo/getname</a>未发生变化</p><p><img src="https://image.focusprogram.top/20200307112514.png"></p><blockquote><p>至此，Apollo的灰度发布已经生效，如果测试灰度发布节点没有问题可以进行全量发布同步到所有的节点，如果测试灰度发布节点存在问题可以放弃灰度发布，会恢复至以前的配置文件版本。</p></blockquote><h1 id="5-常见问题"><a href="#5-常见问题" class="headerlink" title="5. 常见问题"></a>5. 常见问题</h1><ul><li><strong>问题一：只在Maven中导入了client依赖</strong></li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">Exception <span class="hljs-keyword">in</span> thread <span class="hljs-string">&quot;main&quot;</span> java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.NoClassDefFoundError</span>: Could not initialize class com<span class="hljs-selector-class">.ctrip</span><span class="hljs-selector-class">.framework</span><span class="hljs-selector-class">.apollo</span><span class="hljs-selector-class">.tracer</span><span class="hljs-selector-class">.Tracer</span><br>      at com<span class="hljs-selector-class">.ctrip</span><span class="hljs-selector-class">.framework</span><span class="hljs-selector-class">.apollo</span><span class="hljs-selector-class">.build</span><span class="hljs-selector-class">.ApolloInjector</span><span class="hljs-selector-class">.getInstance</span>(ApolloInjector<span class="hljs-selector-class">.java</span>:<span class="hljs-number">37</span>)<br>      at com<span class="hljs-selector-class">.ctrip</span><span class="hljs-selector-class">.framework</span><span class="hljs-selector-class">.apollo</span><span class="hljs-selector-class">.ConfigService</span><span class="hljs-selector-class">.getManager</span>(ConfigService<span class="hljs-selector-class">.java</span>:<span class="hljs-number">25</span>)<br>      at com<span class="hljs-selector-class">.ctrip</span><span class="hljs-selector-class">.framework</span><span class="hljs-selector-class">.apollo</span><span class="hljs-selector-class">.ConfigService</span><span class="hljs-selector-class">.getConfig</span>(ConfigService<span class="hljs-selector-class">.java</span>:<span class="hljs-number">61</span>)<br></code></pre></td></tr></table></figure><p>解决办法：</p><p>导入同版本的apollo-core依赖</p><ul><li><strong>问题二：eureka解析为内网地址</strong></li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Sync</span> config failed, will retry. Repository class com.ctrip.framework.apollo.internals.RemoteConfigRepository, <br><span class="hljs-attribute">reason</span>: Load Apollo Config failed - appId: bitongchong_bos, cluster: default, namespace: application, <br><span class="hljs-attribute">url</span>: http://此处是私有ip:<span class="hljs-number">8080</span>/configs/bitongchong_bos/default/application?ip=<span class="hljs-number">192.168.102.1</span>&amp;messages=%<span class="hljs-number">7</span>B%<span class="hljs-number">22</span>details%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>A%<span class="hljs-number">7</span>B%<span class="hljs-number">22</span>bitongchong_bos%<span class="hljs-number">2</span>Bdefault%<span class="hljs-number">2</span>Bapplication%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>A6%<span class="hljs-number">7</span>D%<span class="hljs-number">7</span>D&amp;releaseKey=<span class="hljs-number">20190803112627</span>-<span class="hljs-number">2</span>b5dd0e414976d16 <span class="hljs-meta"></span><br><span class="hljs-meta">[Cause: Could not complete get operation [Cause: connect timed out]]</span><br></code></pre></td></tr></table></figure><p>解决办法：</p><ol><li>项目启动时指定启动参数：</li></ol><p>-Deureka.instance.ip-address&#x3D;公网地址</p><ol start="2"><li>修改Apollo启动脚本：</li></ol><p>-Deureka.instance.ip-address&#x3D;114.55.34.44”</p><p><img src="https://image.focusprogram.top/20200307114400.png"></p><p><img src="https://image.focusprogram.top/20200307114508.png"></p><ul><li><strong>问题三：未对apollo.meta 属性进行正确赋值</strong></li></ul><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">2020</span>-<span class="hljs-number">03</span>-<span class="hljs-number">04</span> <span class="hljs-number">01</span>:<span class="hljs-number">34</span>:<span class="hljs-number">28.169</span>  WARN <span class="hljs-number">21840</span> --- [           main] c.c.f.a.i.AbstractConfigRepository       : Sync config failed, will retry. Repository class <span class="hljs-keyword">com</span>.ctrip.framework.apollo.internals.<span class="hljs-comment">RemoteConfigRepository, reason: Get config services failed from http://xx.xx.xx.xx:8070/services/config?appId=SPOC_Platform&amp;ip=192.168.102.1 [Cause: Could not complete get operation [Cause: java.lang.IllegalStateException: Expected BEGIN_ARRAY but was STRING at line 1 column 1 path $ [Cause: Expected BEGIN_ARRAY but was STRING at line 1 column 1 path $]]]</span><br><span class="hljs-number">2020</span>-<span class="hljs-number">03</span>-<span class="hljs-number">04</span> <span class="hljs-number">01</span>:<span class="hljs-number">34</span>:<span class="hljs-number">30.511</span>  WARN <span class="hljs-number">21840</span> --- [           main] c.c.f.a.i.LocalFileConfigRepository      : Sync config from upstream repository class <span class="hljs-keyword">com</span>.ctrip.framework.apollo.internals.<span class="hljs-comment">RemoteConfigRepository failed, reason: Get config services failed from http://xx.xx.xx.xx:8070/services/config?appId=SPOC_Platform&amp;ip=192.168.102.1 [Cause: Could not complete get operation [Cause: java.lang.IllegalStateException: Expected BEGIN_ARRAY but was STRING at line 1 column 1 path $ [Cause: Expected BEGIN_ARRAY but was STRING at line 1 column 1 path $]]]</span><br></code></pre></td></tr></table></figure><p>解决办法：</p><p>这个是未对apollo.meta 属性进行正确赋值，必须是eureka的地址和端口，就是你输入这个url+端口的时候跳转到的是eureka这个界面，而非apollo管理页面，否则必定报错</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">-Dapollo.<span class="hljs-attribute">meta</span>=http://ip:8080 <span class="hljs-attribute">-Denv</span>=dev<br></code></pre></td></tr></table></figure><h1 id="6-Apollo相比于Spring-Cloud-Config有什么优势"><a href="#6-Apollo相比于Spring-Cloud-Config有什么优势" class="headerlink" title="6. Apollo相比于Spring Cloud Config有什么优势?"></a>6. Apollo相比于Spring Cloud Config有什么优势?</h1><table><thead><tr><th>功能点</th><th>Apollo</th><th>Spring Cloud Config</th><th>备注</th></tr></thead><tbody><tr><td>配置界面</td><td>一个界面管理不同环境、不同集群配置</td><td>无，需要通过git操作</td><td></td></tr><tr><td>配置生效时间</td><td>实时</td><td>重启生效，或手动refresh生效</td><td>Spring Cloud Config需要通过Git webhook，加上额外的消息队列才能支持实时生效</td></tr><tr><td>版本管理</td><td>界面上直接提供发布历史和回滚按钮</td><td>无，需要通过git操作</td><td></td></tr><tr><td>灰度发布</td><td>支持</td><td>不支持</td><td></td></tr><tr><td>授权、审核、审计</td><td>界面上直接支持，而且支持修改、发布权限分离</td><td>需要通过git仓库设置，且不支持修改、发布权限分离</td><td></td></tr><tr><td>实例配置监控</td><td>可以方便的看到当前哪些客户端在使用哪些配置</td><td>不支持</td><td></td></tr><tr><td>配置获取性能</td><td>快，通过数据库访问，还有缓存支持</td><td>较慢，需要从git clone repository，然后从文件系统读取</td><td></td></tr><tr><td>客户端支持</td><td>原生支持所有Java和.Net应用，提供API支持其它语言应用，同时也支持Spring annotation获取配置</td><td>支持Spring应用，提供annotation获取配置</td><td>Apollo的适用范围更广一些</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>微服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
      <tag>微服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>zipkin</title>
    <link href="/2020/07/11/zipkin/"/>
    <url>/2020/07/11/zipkin/</url>
    
    <content type="html"><![CDATA[<p><strong>Zipkin链路追踪与监控</strong></p><hr><h1 id="1-分布式链路监控与追踪产生背景"><a href="#1-分布式链路监控与追踪产生背景" class="headerlink" title="1. 分布式链路监控与追踪产生背景"></a>1. 分布式链路监控与追踪产生背景</h1><blockquote><p>在微服务系统中，随着业务的发展，系统会变得越来越大，那么各个服务之间的调用关系也就变得越来越复杂。一个 HTTP 请求会调用多个不同的微服务来处理返回最后的结果，在这个调用过程中，可能会因为某个服务出现网络延迟过高或发送错误导致请求失败，这个时候，对请求调用的监控就显得尤为重要了。Spring Cloud Sleuth 提供了分布式服务链路监控的解决方案。</p></blockquote><h1 id="2-zipkin框架介绍"><a href="#2-zipkin框架介绍" class="headerlink" title="2. zipkin框架介绍"></a>2. zipkin框架介绍</h1><p><img src="http://image.focusprogram.top/20200506154252.png"></p><blockquote><p><a href="https://zipkin.io/">zipkin</a>是 Twitter 的一个开源项目，它基于 Google Dapper 实现的。我们可以使用它来收集各个服务器上请求链路的跟踪数据，并通过它提供的 REST API 接口来辅助查询跟踪数据以实现对分布式系统的监控程序，从而及时发现系统中出现的延迟过高问题。除了面向开发的 API 接口之外，它还提供了方便的 UI 组件来帮助我们直观地搜索跟踪信息和分析请求链路明细，比如可以查询某段时间内各用户请求的处理时间等。</p><p>Zipkin 和 Config 结构类似，分为服务端 Server，客户端 Client，客户端就是各个微服务应用。</p></blockquote><h1 id="3-zipkin部署"><a href="#3-zipkin部署" class="headerlink" title="3. zipkin部署"></a>3. zipkin部署</h1><h2 id="3-1-docker"><a href="#3-1-docker" class="headerlink" title="3.1 docker"></a>3.1 docker</h2><p>以下两种部署方式均可：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">$ docker <span class="hljs-keyword">run</span><span class="language-bash"> -d -p 9411:9411 openzipkin/zipkin</span><br></code></pre></td></tr></table></figure><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">$ vim docker-compose.yml</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">version</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-attribute">services</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">web</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">openzipkin/zipkin</span><br>    <span class="hljs-attribute">hostname</span><span class="hljs-punctuation">:</span> <span class="hljs-string">zipkin</span><br>    <span class="hljs-attribute">container_name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">zipkin</span><br>    <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">9400:9411</span><br>    <span class="hljs-attribute">environment</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">STORAGE_TYPE=mysql</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_DB=zipkin</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_USER=root</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_PASS=root</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_HOST=114.55.34.44</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_TCP_PORT=3306</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">SET_CONTAINER_TIMEZONE=true</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">CONTAINER_TIMEZONE=Asia/Shanghai</span><br>     <span class="hljs-attribute">volumes</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/etc/localtime:/etc/localtime</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/etc/timezone:/etc/timezone</span><br>    <span class="hljs-attribute">networks</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">default</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">ipv4_address</span><span class="hljs-punctuation">:</span> <span class="hljs-string">172.18.0.11</span><br>    <span class="hljs-attribute">restart</span><span class="hljs-punctuation">:</span> <span class="hljs-string">always</span><br><br><span class="hljs-attribute">networks</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">default</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">external</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">mynetwork</span><br>      <br>$ docker-compose up -d<br></code></pre></td></tr></table></figure><h2 id="3-2-jar包运行"><a href="#3-2-jar包运行" class="headerlink" title="3.2 jar包运行"></a>3.2 jar包运行</h2><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>curl -sSL <span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/zipkin.io/quickstart</span>.sh | bash -s<br><br><span class="hljs-variable">$ </span>java -jar zipkin.jar<br></code></pre></td></tr></table></figure><h2 id="3-3-源码编译"><a href="#3-3-源码编译" class="headerlink" title="3.3 源码编译"></a>3.3 源码编译</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">get the latest <span class="hljs-built_in">source</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">clone</span> https://github.com/openzipkin/zipkin</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> zipkin</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Build the server and also make its dependencies</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./mvnw -DskipTests --also-make -pl zipkin-server clean install</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Run the server</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">java -jar ./zipkin-server/target/zipkin-server-*exec.jar</span><br></code></pre></td></tr></table></figure><h1 id="4-项目构建"><a href="#4-项目构建" class="headerlink" title="4. 项目构建"></a>4. 项目构建</h1><ul><li><strong>项目模块分为</strong></li><li>zipkin-server zipkin 服务监控</li><li>zipkin-consumer 服务消费者</li><li>zipkin-provider 服务提供者</li></ul><h2 id="4-1-zipkinp-server"><a href="#4-1-zipkinp-server" class="headerlink" title="4.1 zipkinp-server"></a>4.1 zipkinp-server</h2><p>引入maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.5.2.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>Camden.SR6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.zipkin.java<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>zipkin-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.zipkin.java<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>zipkin-autoconfigure-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>编辑配置文件application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9411</span><br></code></pre></td></tr></table></figure><p>编辑启动主类ZipkinServerApplication</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@SpringBootApplication</span><br><span class="hljs-variable">@EnableZipkinServer</span><br>public class ZipkinServerApplication &#123;<br><br>    <span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">static</span> <span class="hljs-selector-tag">void</span> <span class="hljs-selector-tag">main</span>(String[] args) &#123;<br>        <span class="hljs-selector-tag">SpringApplication</span><span class="hljs-selector-class">.run</span>(ZipkinServerApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-2-zipkin-comsumber"><a href="#4-2-zipkin-comsumber" class="headerlink" title="4.2 zipkin-comsumber"></a>4.2 zipkin-comsumber</h2><p>引入maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>编辑配置文件</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">server:</span><br><span class="hljs-symbol">  port:</span> <span class="hljs-number">9100</span><br><span class="hljs-symbol">spring:</span><br><span class="hljs-symbol">  application:</span><br><span class="hljs-symbol">    name:</span> zipkin-consumer<br>  <span class="hljs-meta"># 指定zipkin的地址</span><br><span class="hljs-symbol">  zipkin:</span><br>    base-url: http:<span class="hljs-comment">//114.55.34.44:9400</span><br>    <span class="hljs-meta">#base-url: http:<span class="hljs-comment">//localhost:9411</span></span><br>  <span class="hljs-meta"># 默认sleuth收集信息的比率是0.1</span><br><span class="hljs-symbol">  sleuth:</span><br><span class="hljs-symbol">    sampler:</span><br><span class="hljs-symbol">      percentage:</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>编辑启动主类ZipkinConsumerApplication</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ZipkinConsumerApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>) &#123;<br>        <span class="hljs-title class_">SpringApplication</span>.<span class="hljs-title function_">run</span>(<span class="hljs-title class_">ZipkinConsumerApplication</span>.<span class="hljs-property">class</span>, args);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">RestTemplate</span> <span class="hljs-title function_">getRestTemplate</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>    &#125;<br><br><span class="hljs-comment">//    指定sleuth收集比率，解决sleuth收集问题</span><br><span class="hljs-comment">//    @Bean</span><br><span class="hljs-comment">//    public AlwaysSampler defaultSampler()&#123;</span><br><span class="hljs-comment">//        return new AlwaysSampler();</span><br><span class="hljs-comment">//    &#125;</span><br><br>&#125;<br></code></pre></td></tr></table></figure><p>编辑ConsumerController</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">@RestController<br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> ConsumerController &#123;<br><br>    private static final Logger <span class="hljs-keyword">LOG</span> = Logger.getLogger(ConsumerController.<span class="hljs-keyword">class</span>.getName());<br><br>    @Autowired<br>    private RestTemplate restTemplate;<br><br>    @RequestMapping(&quot;/consumer&quot;)<br>    <span class="hljs-built_in">public</span> String callHome() &#123;<br>        <span class="hljs-keyword">LOG</span>.log(<span class="hljs-keyword">Level</span>.<span class="hljs-keyword">INFO</span>, &quot;请求 service-consumer&quot;);<br>        <span class="hljs-keyword">LOG</span>.log(<span class="hljs-keyword">Level</span>.<span class="hljs-keyword">INFO</span>, &quot;远程调用：http://localhost:9200/provider&quot;);<br>        <span class="hljs-keyword">return</span> restTemplate.getForObject(&quot;http://localhost:9200/provider&quot;, String.<span class="hljs-keyword">class</span>);<br>    &#125;<br><br>    @RequestMapping(&quot;/consumerInfo&quot;)<br>    <span class="hljs-built_in">public</span> String <span class="hljs-keyword">info</span>() &#123;<br>        <span class="hljs-keyword">LOG</span>.log(<span class="hljs-keyword">Level</span>.<span class="hljs-keyword">INFO</span>, &quot;请求 service-consumer&quot;);<br>        <span class="hljs-keyword">return</span> &quot;i&#x27;m service-consumer&quot;;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-3-zipkin-provider"><a href="#4-3-zipkin-provider" class="headerlink" title="4.3 zipkin-provider"></a>4.3 zipkin-provider</h2><p>引入maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>编辑配置文件</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">server:</span><br><span class="hljs-symbol">  port:</span> <span class="hljs-number">9200</span><br><span class="hljs-symbol">spring:</span><br><span class="hljs-symbol">  application:</span><br><span class="hljs-symbol">    name:</span> zipkin-consumer<br>  <span class="hljs-meta"># 指定zipkin的地址</span><br><span class="hljs-symbol">  zipkin:</span><br>    base-url: http:<span class="hljs-comment">//114.55.34.44:9400</span><br>    <span class="hljs-meta">#base-url: http:<span class="hljs-comment">//localhost:9411</span></span><br>  <span class="hljs-meta"># 默认sleuth收集信息的比率是0.1</span><br><span class="hljs-symbol">  sleuth:</span><br><span class="hljs-symbol">    sampler:</span><br><span class="hljs-symbol">      percentage:</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>编辑主启动类ZipkinProviderApplication</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ZipkinProviderApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>) &#123;<br>        <span class="hljs-title class_">SpringApplication</span>.<span class="hljs-title function_">run</span>(<span class="hljs-title class_">ZipkinProviderApplication</span>.<span class="hljs-property">class</span>, args);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">RestTemplate</span> <span class="hljs-title function_">getRestTemplate</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>编辑ProviderController</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">@RestController<br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> ProviderController &#123;<br><br>    private static final Logger <span class="hljs-keyword">LOG</span> = Logger.getLogger(ProviderController.<span class="hljs-keyword">class</span>.getName());<br><br>    @Autowired<br>    private RestTemplate restTemplate;<br><br>    @RequestMapping(&quot;/provider&quot;)<br>    <span class="hljs-built_in">public</span> String callHome() &#123;<br>        <span class="hljs-keyword">LOG</span>.log(<span class="hljs-keyword">Level</span>.<span class="hljs-keyword">INFO</span>, &quot;请求 service-provider&quot;);<br>        <span class="hljs-keyword">LOG</span>.log(<span class="hljs-keyword">Level</span>.<span class="hljs-keyword">INFO</span>, &quot;远程调用：http://localhost:9100/consumerInfo&quot;);<br>        <span class="hljs-keyword">return</span> restTemplate.getForObject(&quot;http://localhost:9100/consumerInfo&quot;, String.<span class="hljs-keyword">class</span>);<br>    &#125;<br><br>    @RequestMapping(&quot;/providerInfo&quot;)<br>    <span class="hljs-built_in">public</span> String <span class="hljs-keyword">info</span>() &#123;<br>        <span class="hljs-keyword">LOG</span>.log(<span class="hljs-keyword">Level</span>.<span class="hljs-keyword">INFO</span>, &quot;请求 service-provider &quot;);<br>        <span class="hljs-keyword">return</span> &quot;i&#x27;m service-provider&quot;;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-4-启动部署"><a href="#4-4-启动部署" class="headerlink" title="4.4 启动部署"></a>4.4 启动部署</h2><p>分别依次启动三个项目，然后访问</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">curl http://localhost:9100/consumer</span><br></code></pre></td></tr></table></figure><p><img src="http://image.focusprogram.top/20200506160018.png"></p><p>访问zipkin服务监控地址</p><p><a href="https://www.focusprogram.top/zipkin">https://www.focusprogram.top/zipkin</a></p><p><img src="http://image.focusprogram.top/20200506160218.png"></p><p><img src="http://image.focusprogram.top/20200506160257.png"></p>]]></content>
    
    
    <categories>
      
      <category>微服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
      <tag>微服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
